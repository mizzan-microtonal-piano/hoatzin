/*
 * fatar_port.c
 *
 *  Created on: Nov 27, 2022
 *      Author: hr193
 */

/* Includes ------------------------------------------------------------------*/
#include "stm32l4xx_hal.h"
#include "main.h"
#include "fatar_typedef.h"

#include "midi.h"
#include "usbmidi.h"

extern MIDI_t MIDI1;
extern USBMIDI_t USBMIDI1;


static int threshold = 500;

/* Exponential Velocity response curves data*/
static int expCurve[127] = {1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22 , 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 61, 62, 64, 65, 67, 68, 70, 71, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 91, 92, 94, 95, 97, 98, 100, 101, 103, 104, 106, 107, 109, 110, 112, 113, 115, 116, 118, 119, 121, 122, 124, 125, 127
 };

/* Logarithmic Velocity response curves data*/
static int logCurve[127] = {1, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 47, 40, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 91, 92, 93, 94, 95, 95, 96, 97, 97, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127
};

/* S-Type Curve Velocity response curves data*/
static int sCurve[127] =  {1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 10, 11, 13, 14, 17, 19, 21, 24, 26, 28, 31, 33, 35, 37, 40, 42, 44, 47, 49, 51, 54, 56, 58, 60, 63, 65, 67, 70, 72, 74, 77, 79, 81, 83, 86, 88, 90, 93, 95, 97, 100, 102, 104, 106, 109, 111, 113, 115, 116, 117, 118, 118, 119, 119, 120, 120, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 127, 127, 127
};

/* N-Type Curve Velocity response curves data*/
static int nCurve[127] = {10, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45, 46, 46, 47, 40, 40, 49, 49, 50, 50, 51, 51, 51, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 57, 57, 58, 58, 59, 59, 59, 60, 60, 60, 60, 61, 62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 65, 65, 66, 66, 67, 67, 67, 68, 69, 70, 71, 73, 74, 76, 78, 80, 81, 83, 85, 87, 90, 92, 93, 95, 97, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 115, 116, 118, 119, 121, 122, 123, 125, 127, 127
};

static uint32_t timestamp1[88];
static uint32_t timestamp2[88];

int octaveShift = 0;
int midiStartNoteNo  = 21;

GPIO_TypeDef * K_L_T_PORT[] = {GPIOB,GPIOB,GPIOC,GPIOC,GPIOA,GPIOA,GPIOA,GPIOA };
uint16_t K_L_T_PIN[] = {K_L_T0_Pin,K_L_T1_Pin,K_L_T2_Pin,K_L_T3_Pin,K_L_T4_Pin,K_L_T5_Pin,K_L_T6_Pin,K_L_T7_Pin};

GPIO_TypeDef * K_L_BR_PORT[] = {GPIOB,GPIOB,GPIOC,GPIOC,GPIOA};
uint16_t K_L_BR_PIN[] = {K_L_BR0_Pin,K_L_BR1_Pin,K_L_BR2_Pin,K_L_BR3_Pin,K_L_BR4_Pin};

GPIO_TypeDef * K_L_MK_PORT[] = {GPIOB,GPIOB,GPIOB,GPIOC, GPIOA};
uint16_t K_L_MK_PIN[] = {K_L_MK0_Pin,K_L_MK1_Pin,K_L_MK2_Pin,K_L_MK3_Pin,K_L_MK4_Pin};

GPIO_TypeDef * K_R_T_PORT[] = {GPIOC,GPIOC, GPIOC, GPIOB,GPIOB,GPIOB,GPIOB,GPIOB};
uint16_t K_R_T_PIN[] = {K_R_T0_Pin,K_R_T1_Pin,K_R_T2_Pin,K_R_T3_Pin,K_R_T4_Pin,K_R_T5_Pin,K_R_T6_Pin,K_R_T7_Pin};

GPIO_TypeDef * K_R_BR_PORT[] = {GPIOA,GPIOA,GPIOC,GPIOC, GPIOB,GPIOB};
uint16_t K_R_BR_PIN[] = {K_R_BR5_Pin,K_R_BR6_Pin,K_R_BR7_Pin,K_R_BR8_Pin,K_R_BR9_Pin,K_R_BR10_Pin};

GPIO_TypeDef * K_R_MK_PORT[] = {GPIOC,GPIOA,GPIOA,GPIOC,GPIOD,GPIOB};
uint16_t K_R_MK_PIN[] = {K_R_MK5_Pin,K_R_MK6_Pin,K_R_MK7_Pin,K_R_MK8_Pin,K_R_MK9_Pin,K_R_MK10_Pin};

void write_K_L_T(int index, GPIO_PinState val){
	HAL_GPIO_WritePin(K_L_T_PORT[index], K_L_T_PIN[index],  val);
}

void write_K_R_T(int index, GPIO_PinState val){
	HAL_GPIO_WritePin(K_R_T_PORT[index], K_R_T_PIN[index],  val);
}

GPIO_PinState read_K_L_MK(int index){
	return HAL_GPIO_ReadPin(K_L_MK_PORT[index], K_L_MK_PIN[index]);
}

GPIO_PinState read_K_L_BR(int index){
	return HAL_GPIO_ReadPin(K_L_BR_PORT[index], K_L_BR_PIN[index]);
}

GPIO_PinState read_K_R_MK(int index){
	return HAL_GPIO_ReadPin(K_R_MK_PORT[index], K_R_MK_PIN[index]);
}

GPIO_PinState read_K_R_BR(int index){
	return HAL_GPIO_ReadPin(K_R_BR_PORT[index], K_R_BR_PIN[index]);
}


FATAR_KEY_STATUS_t keyStatus[88];



static int getVelocity(int br_mr_time_ms){

	int max_velocity = 127;
	int min_velocity = 1; //lower end of the velocity in range 0 to 127

	int time_ms = br_mr_time_ms;
	if(time_ms > threshold) time_ms = threshold;
	int velocity = 127 - ( time_ms * (max_velocity - min_velocity) / (threshold - 0) );
	velocity = nCurve[velocity-1];

	return velocity;


}


void scan_L_keys(){
	int i,j;

	for(j=0;j<=7;j++){
		for(i=0;i<=4;i++){
			int keyID = i*8 + j;
			write_K_L_T(j, 1);
			int br = read_K_L_BR(i);
			int mk = read_K_L_MK(i);
			FATAR_KEY_STATUS_t currentKeyStat = 0;
			write_K_L_T(j, 0);

			if(br == 0  && mk == 0) currentKeyStat = UNPRESSED;
			else if(br == 1  && mk == 0) currentKeyStat = BROKEN;
			else if(br == 1  && mk == 1) currentKeyStat = MADE;

			if( keyStatus[keyID] == UNPRESSED && currentKeyStat == BROKEN){
				timestamp1[keyID] = HAL_GetTick();
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == MADE){
				timestamp2[keyID] = HAL_GetTick();
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
				int velocity = getVelocity(time_elapsed);
				usbmidi_note_on(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
				midi_note_on(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift +  keyID, velocity );

			}
			else if( keyStatus[keyID] == MADE && currentKeyStat == BROKEN){
				timestamp1[keyID] = HAL_GetTick();
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == UNPRESSED){
				timestamp2[keyID] = HAL_GetTick();
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
				int velocity = getVelocity(time_elapsed);
				usbmidi_note_off(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
				midi_note_off(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
			}
			keyStatus[keyID] = currentKeyStat;
		}
	}
}


void scan_R_keys(){
	int i,j;

	for(j=0;j<=7;j++){
		for(i=0;i<=5;i++){
			int keyID = 40 + i*8 + j;
			write_K_R_T(j, 1);
			int br = read_K_R_BR(i);
			int mk = read_K_R_MK(i);
			FATAR_KEY_STATUS_t currentKeyStat = 0;
			write_K_R_T(j, 0);

			if(br == 0  && mk == 0) currentKeyStat = UNPRESSED;
			else if(br == 1  && mk == 0) currentKeyStat = BROKEN;
			else if(br == 1  && mk == 1) currentKeyStat = MADE;

			if( keyStatus[keyID] == UNPRESSED && currentKeyStat == BROKEN){
				timestamp1[keyID] = HAL_GetTick();
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == MADE){
				timestamp2[keyID] = HAL_GetTick();
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
				int velocity = getVelocity(time_elapsed);
				usbmidi_note_on(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
				midi_note_on(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
				//printf("pressed at velocity %d and time is %d \r\n",velocity,time_elapsed );
			}
			else if( keyStatus[keyID] == MADE && currentKeyStat == BROKEN){
				timestamp1[keyID] = HAL_GetTick();
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == UNPRESSED){
				timestamp2[keyID] = HAL_GetTick();
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
				int velocity = getVelocity(time_elapsed);
				usbmidi_note_off(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
				midi_note_off(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
				//printf("released at velocity %d and time is %d \r\n",velocity,time_elapsed );
			}
			keyStatus[keyID] = currentKeyStat;
		}
	}
}
