
hoatzin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a160  0800a160  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a160  0800a160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a168  0800a168  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a168  0800a168  0001a168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a16c  0800a16c  0001a16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800a170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002808  2000026c  0800a3dc  0002026c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a74  0800a3dc  00022a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc8d  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000445c  00000000  00000000  0003ff29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc0  00000000  00000000  00044388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  00045f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4da  00000000  00000000  00047930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020155  00000000  00000000  00073e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb19f  00000000  00000000  00093f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018f0fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cb8  00000000  00000000  0018f150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000026c 	.word	0x2000026c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a01c 	.word	0x0800a01c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000270 	.word	0x20000270
 80001cc:	0800a01c 	.word	0x0800a01c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b082      	sub	sp, #8
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 ITM_SendChar(ch);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffd1 	bl	8000574 <ITM_SendChar>
 return(ch);
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbb3 	bl	8000d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f838 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8b8 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ec:	f000 f886 	bl	80006fc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005f0:	f007 feb6 	bl	8008360 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f8:	f000 fbe0 	bl	8000dbc <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  printf("TOCK Tock : %d\r\n", (int) HAL_GetTick() );
 80005fc:	f000 fbd2 	bl	8000da4 <HAL_GetTick>
 8000600:	4603      	mov	r3, r0
 8000602:	4619      	mov	r1, r3
 8000604:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0x70>)
 8000606:	f008 fd7b 	bl	8009100 <iprintf>

	  usbmidi_note_on(&USBMIDI1, CHANNEL_1 , 0x55, 0x72 );
 800060a:	2372      	movs	r3, #114	; 0x72
 800060c:	2255      	movs	r2, #85	; 0x55
 800060e:	2100      	movs	r1, #0
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <main+0x74>)
 8000612:	f005 ffc0 	bl	8006596 <usbmidi_note_on>
	  midi_note_on(&MIDI1, CHANNEL_1 , 0x55, 0x72 );
 8000616:	2372      	movs	r3, #114	; 0x72
 8000618:	2255      	movs	r2, #85	; 0x55
 800061a:	2100      	movs	r1, #0
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <main+0x78>)
 800061e:	f005 ff30 	bl	8006482 <midi_note_on>
	  HAL_Delay(1000);
 8000622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000626:	f000 fbc9 	bl	8000dbc <HAL_Delay>


	  usbmidi_note_off(&USBMIDI1, CHANNEL_1 , 0x55, 0x72 );
 800062a:	2372      	movs	r3, #114	; 0x72
 800062c:	2255      	movs	r2, #85	; 0x55
 800062e:	2100      	movs	r1, #0
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <main+0x74>)
 8000632:	f005 ff8c 	bl	800654e <usbmidi_note_off>
	  midi_note_off(&MIDI1, CHANNEL_1 , 0x55, 0x72 );
 8000636:	2372      	movs	r3, #114	; 0x72
 8000638:	2255      	movs	r2, #85	; 0x55
 800063a:	2100      	movs	r1, #0
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <main+0x78>)
 800063e:	f005 feff 	bl	8006440 <midi_note_off>
	  HAL_Delay(1000);
 8000642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000646:	f000 fbb9 	bl	8000dbc <HAL_Delay>
	  printf("TOCK Tock : %d\r\n", (int) HAL_GetTick() );
 800064a:	e7d7      	b.n	80005fc <main+0x20>
 800064c:	0800a034 	.word	0x0800a034
 8000650:	2000000c 	.word	0x2000000c
 8000654:	20000018 	.word	0x20000018

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2244      	movs	r2, #68	; 0x44
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f008 fd42 	bl	80090f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800067a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067e:	f002 f833 	bl	80026e8 <HAL_PWREx_ControlVoltageScaling>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000688:	f000 f94c 	bl	8000924 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800068c:	2310      	movs	r3, #16
 800068e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006a0:	2301      	movs	r3, #1
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006a8:	2328      	movs	r3, #40	; 0x28
 80006aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ac:	2307      	movs	r3, #7
 80006ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f879 	bl	80027b4 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c8:	f000 f92c 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2303      	movs	r3, #3
 80006d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2104      	movs	r1, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fc41 	bl	8002f6c <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f0:	f000 f918 	bl	8000924 <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3758      	adds	r7, #88	; 0x58
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	f647 2212 	movw	r2, #31250	; 0x7a12
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	f003 fdf8 	bl	8004334 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f8eb 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000288 	.word	0x20000288
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b5f      	ldr	r3, [pc, #380]	; (80008f0 <MX_GPIO_Init+0x194>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a5e      	ldr	r2, [pc, #376]	; (80008f0 <MX_GPIO_Init+0x194>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <MX_GPIO_Init+0x194>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	4b59      	ldr	r3, [pc, #356]	; (80008f0 <MX_GPIO_Init+0x194>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	4a58      	ldr	r2, [pc, #352]	; (80008f0 <MX_GPIO_Init+0x194>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000796:	4b56      	ldr	r3, [pc, #344]	; (80008f0 <MX_GPIO_Init+0x194>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	4a52      	ldr	r2, [pc, #328]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ae:	4b50      	ldr	r3, [pc, #320]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b4d      	ldr	r3, [pc, #308]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a4c      	ldr	r2, [pc, #304]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b4a      	ldr	r3, [pc, #296]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0302 	and.w	r3, r3, #2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b47      	ldr	r3, [pc, #284]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a46      	ldr	r2, [pc, #280]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b44      	ldr	r3, [pc, #272]	; (80008f0 <MX_GPIO_Init+0x194>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	21f0      	movs	r1, #240	; 0xf0
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f000 fd93 	bl	800131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80007fc:	483d      	ldr	r0, [pc, #244]	; (80008f4 <MX_GPIO_Init+0x198>)
 80007fe:	f000 fd8d 	bl	800131c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8000802:	2200      	movs	r2, #0
 8000804:	f64f 0103 	movw	r1, #63491	; 0xf803
 8000808:	483b      	ldr	r0, [pc, #236]	; (80008f8 <MX_GPIO_Init+0x19c>)
 800080a:	f000 fd87 	bl	800131c <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC1
                           PC2 PC3 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 800080e:	f64f 630e 	movw	r3, #65038	; 0xfe0e
 8000812:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4834      	ldr	r0, [pc, #208]	; (80008f4 <MX_GPIO_Init+0x198>)
 8000824:	f000 fbd0 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000828:	2301      	movs	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800082c:	230b      	movs	r3, #11
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	482e      	ldr	r0, [pc, #184]	; (80008f4 <MX_GPIO_Init+0x198>)
 800083c:	f000 fbc4 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9
                           PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9
 8000840:	f248 7303 	movw	r3, #34563	; 0x8703
 8000844:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000858:	f000 fbb6 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800085c:	23f0      	movs	r3, #240	; 0xf0
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f000 fba7 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800087a:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800087e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4818      	ldr	r0, [pc, #96]	; (80008f4 <MX_GPIO_Init+0x198>)
 8000894:	f000 fb98 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 8000898:	f64f 0303 	movw	r3, #63491	; 0xf803
 800089c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4811      	ldr	r0, [pc, #68]	; (80008f8 <MX_GPIO_Init+0x19c>)
 80008b2:	f000 fb89 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5
 80008b6:	f240 73f4 	movw	r3, #2036	; 0x7f4
 80008ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <MX_GPIO_Init+0x19c>)
 80008cc:	f000 fb7c 	bl	8000fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008d0:	2304      	movs	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_GPIO_Init+0x1a0>)
 80008e4:	f000 fb70 	bl	8000fc8 <HAL_GPIO_Init>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40021000 	.word	0x40021000
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48000400 	.word	0x48000400
 80008fc:	48000c00 	.word	0x48000c00

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d101      	bne.n	8000916 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000912:	f000 fa33 	bl	8000d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40012c00 	.word	0x40012c00

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6613      	str	r3, [r2, #96]	; 0x60
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b0ac      	sub	sp, #176	; 0xb0
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2288      	movs	r2, #136	; 0x88
 8000996:	2100      	movs	r1, #0
 8000998:	4618      	mov	r0, r3
 800099a:	f008 fba9 	bl	80090f0 <memset>
  if(huart->Instance==USART2)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <HAL_UART_MspInit+0xb0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d13b      	bne.n	8000a20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4618      	mov	r0, r3
 80009b6:	f002 fd2f 	bl	8003418 <HAL_RCCEx_PeriphCLKConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009c0:	f7ff ffb0 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ce:	6593      	str	r3, [r2, #88]	; 0x58
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e0:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_UART_MspInit+0xb4>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f4:	230c      	movs	r3, #12
 80009f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fad4 	bl	8000fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	37b0      	adds	r7, #176	; 0xb0
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40004400 	.word	0x40004400
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <HAL_InitTick+0xc8>)
 8000a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a42:	4a2d      	ldr	r2, [pc, #180]	; (8000af8 <HAL_InitTick+0xc8>)
 8000a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a48:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <HAL_InitTick+0xc8>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a56:	f107 020c 	add.w	r2, r7, #12
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fc47 	bl	80032f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a66:	f002 fc2f 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 8000a6a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <HAL_InitTick+0xcc>)
 8000a70:	fba2 2303 	umull	r2, r3, r2, r3
 8000a74:	0c9b      	lsrs	r3, r3, #18
 8000a76:	3b01      	subs	r3, #1
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a7c:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <HAL_InitTick+0xd4>)
 8000a7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a88:	4a1d      	ldr	r2, [pc, #116]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000aa0:	4817      	ldr	r0, [pc, #92]	; (8000b00 <HAL_InitTick+0xd0>)
 8000aa2:	f003 f975 	bl	8003d90 <HAL_TIM_Base_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000aac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d11b      	bne.n	8000aec <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ab4:	4812      	ldr	r0, [pc, #72]	; (8000b00 <HAL_InitTick+0xd0>)
 8000ab6:	f003 f9cd 	bl	8003e54 <HAL_TIM_Base_Start_IT>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d111      	bne.n	8000aec <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ac8:	2019      	movs	r0, #25
 8000aca:	f000 fa6f 	bl	8000fac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d808      	bhi.n	8000ae6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2019      	movs	r0, #25
 8000ada:	f000 fa4b 	bl	8000f74 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_InitTick+0xd8>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6013      	str	r3, [r2, #0]
 8000ae4:	e002      	b.n	8000aec <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3730      	adds	r7, #48	; 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000
 8000afc:	431bde83 	.word	0x431bde83
 8000b00:	2000030c 	.word	0x2000030c
 8000b04:	40012c00 	.word	0x40012c00
 8000b08:	20000004 	.word	0x20000004

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b6a:	f003 f9e3 	bl	8003f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000030c 	.word	0x2000030c

08000b78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <OTG_FS_IRQHandler+0x10>)
 8000b7e:	f000 fd38 	bl	80015f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000988 	.word	0x20000988

08000b8c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	e00a      	b.n	8000bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b9e:	f3af 8000 	nop.w
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	1c5a      	adds	r2, r3, #1
 8000ba8:	60ba      	str	r2, [r7, #8]
 8000baa:	b2ca      	uxtb	r2, r1
 8000bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf0      	blt.n	8000b9e <_read+0x12>
	}

return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b086      	sub	sp, #24
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	60f8      	str	r0, [r7, #12]
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e009      	b.n	8000bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	60ba      	str	r2, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fcee 	bl	80005c2 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3301      	adds	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
 8000bec:	697a      	ldr	r2, [r7, #20]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	dbf1      	blt.n	8000bd8 <_write+0x12>
	}
	return len;
 8000bf4:	687b      	ldr	r3, [r7, #4]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3718      	adds	r7, #24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <_close>:

int _close(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return -1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c26:	605a      	str	r2, [r3, #4]
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_isatty>:

int _isatty(int file)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	; (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f008 fa00 	bl	800909c <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20018000 	.word	0x20018000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	20000358 	.word	0x20000358
 8000cd0:	20002a78 	.word	0x20002a78

08000cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cfc:	f7ff ffea 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d02:	490d      	ldr	r1, [pc, #52]	; (8000d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d04:	4a0d      	ldr	r2, [pc, #52]	; (8000d3c <LoopForever+0xe>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d18:	4c0a      	ldr	r4, [pc, #40]	; (8000d44 <LoopForever+0x16>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f008 f9bf 	bl	80090a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2a:	f7ff fc57 	bl	80005dc <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8000d3c:	0800a170 	.word	0x0800a170
  ldr r2, =_sbss
 8000d40:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8000d44:	20002a74 	.word	0x20002a74

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>

08000d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d54:	2003      	movs	r0, #3
 8000d56:	f000 f902 	bl	8000f5e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d5a:	200f      	movs	r0, #15
 8000d5c:	f7ff fe68 	bl	8000a30 <HAL_InitTick>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	e001      	b.n	8000d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d6c:	f7ff fde0 	bl	8000930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	2000035c 	.word	0x2000035c

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000035c 	.word	0x2000035c

08000dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc4:	f7ff ffee 	bl	8000da4 <HAL_GetTick>
 8000dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d005      	beq.n	8000de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_Delay+0x44>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	bf00      	nop
 8000de4:	f7ff ffde 	bl	8000da4 <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d8f7      	bhi.n	8000de4 <HAL_Delay+0x28>
  {
  }
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008

08000e04 <__NVIC_SetPriorityGrouping>:
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff4c 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f86:	f7ff ff61 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f8a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f7ff ffb1 	bl	8000ef8 <NVIC_EncodePriority>
 8000f96:	4602      	mov	r2, r0
 8000f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9c:	4611      	mov	r1, r2
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff80 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fa4:	bf00      	nop
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff54 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd6:	e17f      	b.n	80012d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8171 	beq.w	80012d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d005      	beq.n	8001008 <HAL_GPIO_Init+0x40>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d130      	bne.n	800106a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103e:	2201      	movs	r2, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	4013      	ands	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	f003 0201 	and.w	r2, r3, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b03      	cmp	r3, #3
 8001074:	d118      	bne.n	80010a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	08db      	lsrs	r3, r3, #3
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80ac 	beq.w	80012d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	4b5f      	ldr	r3, [pc, #380]	; (80012f8 <HAL_GPIO_Init+0x330>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	4a5e      	ldr	r2, [pc, #376]	; (80012f8 <HAL_GPIO_Init+0x330>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6613      	str	r3, [r2, #96]	; 0x60
 8001186:	4b5c      	ldr	r3, [pc, #368]	; (80012f8 <HAL_GPIO_Init+0x330>)
 8001188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001192:	4a5a      	ldr	r2, [pc, #360]	; (80012fc <HAL_GPIO_Init+0x334>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011bc:	d025      	beq.n	800120a <HAL_GPIO_Init+0x242>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4f      	ldr	r2, [pc, #316]	; (8001300 <HAL_GPIO_Init+0x338>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01f      	beq.n	8001206 <HAL_GPIO_Init+0x23e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4e      	ldr	r2, [pc, #312]	; (8001304 <HAL_GPIO_Init+0x33c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x23a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4d      	ldr	r2, [pc, #308]	; (8001308 <HAL_GPIO_Init+0x340>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x236>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4c      	ldr	r2, [pc, #304]	; (800130c <HAL_GPIO_Init+0x344>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x232>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <HAL_GPIO_Init+0x348>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x22e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4a      	ldr	r2, [pc, #296]	; (8001314 <HAL_GPIO_Init+0x34c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x22a>
 80011ee:	2306      	movs	r3, #6
 80011f0:	e00c      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e00a      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011f6:	2305      	movs	r3, #5
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011fa:	2304      	movs	r3, #4
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x244>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x244>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x244>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x244>
 800120a:	2300      	movs	r3, #0
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800121c:	4937      	ldr	r1, [pc, #220]	; (80012fc <HAL_GPIO_Init+0x334>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_GPIO_Init+0x350>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800124e:	4a32      	ldr	r2, [pc, #200]	; (8001318 <HAL_GPIO_Init+0x350>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_GPIO_Init+0x350>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001278:	4a27      	ldr	r2, [pc, #156]	; (8001318 <HAL_GPIO_Init+0x350>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_GPIO_Init+0x350>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a2:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <HAL_GPIO_Init+0x350>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <HAL_GPIO_Init+0x350>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_GPIO_Init+0x350>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa22 f303 	lsr.w	r3, r2, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f47f ae78 	bne.w	8000fd8 <HAL_GPIO_Init+0x10>
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00
 800130c:	48001000 	.word	0x48001000
 8001310:	48001400 	.word	0x48001400
 8001314:	48001800 	.word	0x48001800
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	b08f      	sub	sp, #60	; 0x3c
 8001350:	af0a      	add	r7, sp, #40	; 0x28
 8001352:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e116      	b.n	800158c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f007 fa4b 	bl	8008814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2203      	movs	r2, #3
 8001382:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fdec 	bl	8004f7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	687e      	ldr	r6, [r7, #4]
 80013aa:	466d      	mov	r5, sp
 80013ac:	f106 0410 	add.w	r4, r6, #16
 80013b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80013c0:	1d33      	adds	r3, r6, #4
 80013c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f003 fcfe 	bl	8004dc6 <USB_CoreInit>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0d7      	b.n	800158c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 fdda 	bl	8004f9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e04a      	b.n	8001484 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	333d      	adds	r3, #61	; 0x3d
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	333c      	adds	r3, #60	; 0x3c
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	7bfb      	ldrb	r3, [r7, #15]
 800141a:	b298      	uxth	r0, r3
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3344      	adds	r3, #68	; 0x44
 800142a:	4602      	mov	r2, r0
 800142c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3340      	adds	r3, #64	; 0x40
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3348      	adds	r3, #72	; 0x48
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	334c      	adds	r3, #76	; 0x4c
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4413      	add	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	440b      	add	r3, r1
 8001478:	3354      	adds	r3, #84	; 0x54
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	3301      	adds	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3af      	bcc.n	80013ee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e044      	b.n	800151e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4413      	add	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4413      	add	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	3301      	adds	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	7bfa      	ldrb	r2, [r7, #15]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3b5      	bcc.n	8001494 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	687e      	ldr	r6, [r7, #4]
 8001530:	466d      	mov	r5, sp
 8001532:	f106 0410 	add.w	r4, r6, #16
 8001536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800153c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800153e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001542:	e885 0003 	stmia.w	r5, {r0, r1}
 8001546:	1d33      	adds	r3, r6, #4
 8001548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f003 fd72 	bl	8005034 <USB_DevInit>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2202      	movs	r2, #2
 800155a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e014      	b.n	800158c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2b01      	cmp	r3, #1
 8001578:	d102      	bne.n	8001580 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f001 f882 	bl	8002684 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f004 fdfa 	bl	800617e <USB_DevDisconnect>

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001594 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <HAL_PCD_Start+0x1c>
 80015ac:	2302      	movs	r3, #2
 80015ae:	e01c      	b.n	80015ea <HAL_PCD_Start+0x56>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fcc1 	bl	8004f58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 fdae 	bl	800613c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015f2:	b590      	push	{r4, r7, lr}
 80015f4:	b08d      	sub	sp, #52	; 0x34
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fe6c 	bl	80062e6 <USB_GetMode>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	f040 847e 	bne.w	8001f12 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f004 fdd0 	bl	80061c0 <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8474 	beq.w	8001f10 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fdbd 	bl	80061c0 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b02      	cmp	r3, #2
 800164e:	d107      	bne.n	8001660 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f002 0202 	and.w	r2, r2, #2
 800165e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f004 fdab 	bl	80061c0 <USB_ReadInterrupts>
 800166a:	4603      	mov	r3, r0
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b10      	cmp	r3, #16
 8001672:	d161      	bne.n	8001738 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0210 	bic.w	r2, r2, #16
 8001682:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	f003 020f 	and.w	r2, r3, #15
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	4413      	add	r3, r2
 80016a0:	3304      	adds	r3, #4
 80016a2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	0c5b      	lsrs	r3, r3, #17
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d124      	bne.n	80016fa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d035      	beq.n	8001728 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	6a38      	ldr	r0, [r7, #32]
 80016d0:	f004 fbe2 	bl	8005e98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e0:	441a      	add	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	6a1a      	ldr	r2, [r3, #32]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016f2:	441a      	add	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	621a      	str	r2, [r3, #32]
 80016f8:	e016      	b.n	8001728 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	0c5b      	lsrs	r3, r3, #17
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	2b06      	cmp	r3, #6
 8001704:	d110      	bne.n	8001728 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800170c:	2208      	movs	r2, #8
 800170e:	4619      	mov	r1, r3
 8001710:	6a38      	ldr	r0, [r7, #32]
 8001712:	f004 fbc1 	bl	8005e98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	6a1a      	ldr	r2, [r3, #32]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	091b      	lsrs	r3, r3, #4
 800171e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001722:	441a      	add	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0210 	orr.w	r2, r2, #16
 8001736:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fd3f 	bl	80061c0 <USB_ReadInterrupts>
 8001742:	4603      	mov	r3, r0
 8001744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001748:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800174c:	f040 80a7 	bne.w	800189e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fd44 	bl	80061e6 <USB_ReadDevAllOutEpInterrupt>
 800175e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001760:	e099      	b.n	8001896 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 808e 	beq.w	800188a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fd68 	bl	800624e <USB_ReadDevOutEPInterrupt>
 800177e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00c      	beq.n	80017a4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	015a      	lsls	r2, r3, #5
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	4413      	add	r3, r2
 8001792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001796:	461a      	mov	r2, r3
 8001798:	2301      	movs	r3, #1
 800179a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800179c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fe96 	bl	80024d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00c      	beq.n	80017c8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	015a      	lsls	r2, r3, #5
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	4413      	add	r3, r2
 80017b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ba:	461a      	mov	r2, r3
 80017bc:	2308      	movs	r3, #8
 80017be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fed2 	bl	800256c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d008      	beq.n	80017e4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	015a      	lsls	r2, r3, #5
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	4413      	add	r3, r2
 80017da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017de:	461a      	mov	r2, r3
 80017e0:	2310      	movs	r3, #16
 80017e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d030      	beq.n	8001850 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b80      	cmp	r3, #128	; 0x80
 80017f8:	d109      	bne.n	800180e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	3304      	adds	r3, #4
 8001822:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	78db      	ldrb	r3, [r3, #3]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d108      	bne.n	800183e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	2200      	movs	r2, #0
 8001830:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	b2db      	uxtb	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f007 f93f 	bl	8008abc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184a:	461a      	mov	r2, r3
 800184c:	2302      	movs	r3, #2
 800184e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	f003 0320 	and.w	r3, r3, #32
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	015a      	lsls	r2, r3, #5
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	4413      	add	r3, r2
 8001862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001866:	461a      	mov	r2, r3
 8001868:	2320      	movs	r3, #32
 800186a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d009      	beq.n	800188a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	015a      	lsls	r2, r3, #5
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	4413      	add	r3, r2
 800187e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001882:	461a      	mov	r2, r3
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	3301      	adds	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f af62 	bne.w	8001762 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fc8c 	bl	80061c0 <USB_ReadInterrupts>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018b2:	f040 80a4 	bne.w	80019fe <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f004 fcad 	bl	800621a <USB_ReadDevAllInEpInterrupt>
 80018c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018c6:	e096      	b.n	80019f6 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 808b 	beq.w	80019ea <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f004 fcd3 	bl	800628a <USB_ReadDevInEPInterrupt>
 80018e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	2201      	movs	r2, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	69f9      	ldr	r1, [r7, #28]
 800190c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001910:	4013      	ands	r3, r2
 8001912:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	015a      	lsls	r2, r3, #5
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	4413      	add	r3, r2
 800191c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001920:	461a      	mov	r2, r3
 8001922:	2301      	movs	r3, #1
 8001924:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4619      	mov	r1, r3
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f007 f830 	bl	8008992 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	015a      	lsls	r2, r3, #5
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	4413      	add	r3, r2
 8001944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001948:	461a      	mov	r2, r3
 800194a:	2308      	movs	r3, #8
 800194c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	f003 0310 	and.w	r3, r3, #16
 8001954:	2b00      	cmp	r3, #0
 8001956:	d008      	beq.n	800196a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	4413      	add	r3, r2
 8001960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001964:	461a      	mov	r2, r3
 8001966:	2310      	movs	r3, #16
 8001968:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d008      	beq.n	8001986 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	015a      	lsls	r2, r3, #5
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001980:	461a      	mov	r2, r3
 8001982:	2340      	movs	r3, #64	; 0x40
 8001984:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d023      	beq.n	80019d8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001992:	6a38      	ldr	r0, [r7, #32]
 8001994:	f003 fc9a 	bl	80052cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	3338      	adds	r3, #56	; 0x38
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	3304      	adds	r3, #4
 80019aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	78db      	ldrb	r3, [r3, #3]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2200      	movs	r2, #0
 80019b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f007 f88d 	bl	8008ae0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	015a      	lsls	r2, r3, #5
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019d2:	461a      	mov	r2, r3
 80019d4:	2302      	movs	r3, #2
 80019d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fcea 	bl	80023be <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f af65 	bne.w	80018c8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f004 fbdc 	bl	80061c0 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a12:	d122      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	69fa      	ldr	r2, [r7, #28]
 8001a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a22:	f023 0301 	bic.w	r3, r3, #1
 8001a26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d108      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f007 fac1 	bl	8008fc4 <HAL_PCDEx_LPM_Callback>
 8001a42:	e002      	b.n	8001a4a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f007 f811 	bl	8008a6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fbae 	bl	80061c0 <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a6e:	d112      	bne.n	8001a96 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f006 ffcd 	bl	8008a20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695a      	ldr	r2, [r3, #20]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 fb90 	bl	80061c0 <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001aaa:	d121      	bne.n	8001af0 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001aba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d111      	bne.n	8001aea <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	f003 020f 	and.w	r2, r3, #15
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f007 fa6e 	bl	8008fc4 <HAL_PCDEx_LPM_Callback>
 8001ae8:	e002      	b.n	8001af0 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f006 ff98 	bl	8008a20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f004 fb63 	bl	80061c0 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b04:	f040 80b5 	bne.w	8001c72 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2110      	movs	r1, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fbd2 	bl	80052cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b2c:	e046      	b.n	8001bbc <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	015a      	lsls	r2, r3, #5
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b52:	0151      	lsls	r1, r2, #5
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	440a      	add	r2, r1
 8001b58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001b5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	015a      	lsls	r2, r3, #5
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b78:	015a      	lsls	r2, r3, #5
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b86:	0151      	lsls	r1, r2, #5
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	440a      	add	r2, r1
 8001b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b98:	015a      	lsls	r2, r3, #5
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba6:	0151      	lsls	r1, r2, #5
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	440a      	add	r2, r1
 8001bac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001bb4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb8:	3301      	adds	r3, #1
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3b3      	bcc.n	8001b2e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	69fa      	ldr	r2, [r7, #28]
 8001bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bd4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001bd8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d016      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bec:	69fa      	ldr	r2, [r7, #28]
 8001bee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bf2:	f043 030b 	orr.w	r3, r3, #11
 8001bf6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c08:	f043 030b 	orr.w	r3, r3, #11
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	e015      	b.n	8001c3c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c22:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001c26:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c36:	f043 030b 	orr.w	r3, r3, #11
 8001c3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001c4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	f004 fb73 	bl	8006348 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f004 faa2 	bl	80061c0 <USB_ReadInterrupts>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c86:	d124      	bne.n	8001cd2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f004 fb38 	bl	8006302 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 fb95 	bl	80053c6 <USB_GetDevSpeed>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681c      	ldr	r4, [r3, #0]
 8001ca8:	f001 faec 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 8001cac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	f003 f8b2 	bl	8004e20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f006 fe90 	bl	80089e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001cd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fa72 	bl	80061c0 <USB_ReadInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d10a      	bne.n	8001cfc <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f006 fe6d 	bl	80089c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f002 0208 	and.w	r2, r2, #8
 8001cfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 fa5d 	bl	80061c0 <USB_ReadInterrupts>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d122      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d20:	e014      	b.n	8001d4c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d105      	bne.n	8001d46 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fb0b 	bl	800235c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3e5      	bcc.n	8001d22 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 fa30 	bl	80061c0 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d6a:	d13b      	bne.n	8001de4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d70:	e02b      	b.n	8001dca <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	015a      	lsls	r2, r3, #5
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3340      	adds	r3, #64	; 0x40
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d115      	bne.n	8001dc4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da12      	bge.n	8001dc4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001da2:	4613      	mov	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4413      	add	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	440b      	add	r3, r1
 8001dac:	333f      	adds	r3, #63	; 0x3f
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 facc 	bl	800235c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3ce      	bcc.n	8001d72 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001de2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f004 f9e9 	bl	80061c0 <USB_ReadInterrupts>
 8001dee:	4603      	mov	r3, r0
 8001df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001df8:	d155      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	e045      	b.n	8001e8c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	015a      	lsls	r2, r3, #5
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d12e      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e28:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	da2b      	bge.n	8001e86 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001e3a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d121      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e46:	4613      	mov	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10a      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	69fa      	ldr	r2, [r7, #28]
 8001e7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6053      	str	r3, [r2, #4]
            break;
 8001e84:	e007      	b.n	8001e96 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3b4      	bcc.n	8001e00 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f004 f988 	bl	80061c0 <USB_ReadInterrupts>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eba:	d10a      	bne.n	8001ed2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f006 fe21 	bl	8008b04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ed0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 f972 	bl	80061c0 <USB_ReadInterrupts>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d115      	bne.n	8001f12 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f006 fe11 	bl	8008b20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e000      	b.n	8001f12 <HAL_PCD_IRQHandler+0x920>
      return;
 8001f10:	bf00      	nop
    }
  }
}
 8001f12:	3734      	adds	r7, #52	; 0x34
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}

08001f18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_SetAddress+0x1a>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e013      	b.n	8001f5a <HAL_PCD_SetAddress+0x42>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 f8d0 	bl	80060f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	4608      	mov	r0, r1
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4603      	mov	r3, r0
 8001f72:	70fb      	strb	r3, [r7, #3]
 8001f74:	460b      	mov	r3, r1
 8001f76:	803b      	strh	r3, [r7, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da0f      	bge.n	8001fa8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	f003 020f 	and.w	r2, r3, #15
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	3338      	adds	r3, #56	; 0x38
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	705a      	strb	r2, [r3, #1]
 8001fa6:	e00f      	b.n	8001fc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	f003 020f 	and.w	r2, r3, #15
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fd4:	883a      	ldrh	r2, [r7, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	78ba      	ldrb	r2, [r7, #2]
 8001fde:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ff2:	78bb      	ldrb	r3, [r7, #2]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d102      	bne.n	8001ffe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_PCD_EP_Open+0xaa>
 8002008:	2302      	movs	r3, #2
 800200a:	e00e      	b.n	800202a <HAL_PCD_EP_Open+0xc8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68f9      	ldr	r1, [r7, #12]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 f9f2 	bl	8005404 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002028:	7afb      	ldrb	r3, [r7, #11]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800203e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da0f      	bge.n	8002066 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	f003 020f 	and.w	r2, r3, #15
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	3338      	adds	r3, #56	; 0x38
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	3304      	adds	r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2201      	movs	r2, #1
 8002062:	705a      	strb	r2, [r3, #1]
 8002064:	e00f      	b.n	8002086 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_PCD_EP_Close+0x6e>
 800209c:	2302      	movs	r3, #2
 800209e:	e00e      	b.n	80020be <HAL_PCD_EP_Close+0x8c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 fa30 	bl	8005514 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	460b      	mov	r3, r1
 80020d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2200      	movs	r2, #0
 8002100:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2200      	movs	r2, #0
 8002106:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	b2da      	uxtb	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002114:	7afb      	ldrb	r3, [r7, #11]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	2b00      	cmp	r3, #0
 800211c:	d106      	bne.n	800212c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6979      	ldr	r1, [r7, #20]
 8002124:	4618      	mov	r0, r3
 8002126:	f003 fcb1 	bl	8005a8c <USB_EP0StartXfer>
 800212a:	e005      	b.n	8002138 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6979      	ldr	r1, [r7, #20]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 faca 	bl	80056cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	f003 020f 	and.w	r2, r3, #15
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002164:	681b      	ldr	r3, [r3, #0]
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	460b      	mov	r3, r1
 8002180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	f003 020f 	and.w	r2, r3, #15
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	3338      	adds	r3, #56	; 0x38
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4413      	add	r3, r2
 8002196:	3304      	adds	r3, #4
 8002198:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2201      	movs	r2, #1
 80021b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b2:	7afb      	ldrb	r3, [r7, #11]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6979      	ldr	r1, [r7, #20]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 fc5c 	bl	8005a8c <USB_EP0StartXfer>
 80021d4:	e005      	b.n	80021e2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6979      	ldr	r1, [r7, #20]
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fa75 	bl	80056cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	f003 020f 	and.w	r2, r3, #15
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	429a      	cmp	r2, r3
 8002204:	d901      	bls.n	800220a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e04e      	b.n	80022a8 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800220a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220e:	2b00      	cmp	r3, #0
 8002210:	da0f      	bge.n	8002232 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	f003 020f 	and.w	r2, r3, #15
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3338      	adds	r3, #56	; 0x38
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	3304      	adds	r3, #4
 8002228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	705a      	strb	r2, [r3, #1]
 8002230:	e00d      	b.n	800224e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002232:	78fa      	ldrb	r2, [r7, #3]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_PCD_EP_SetStall+0x82>
 800226a:	2302      	movs	r3, #2
 800226c:	e01c      	b.n	80022a8 <HAL_PCD_EP_SetStall+0xbc>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68f9      	ldr	r1, [r7, #12]
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fe63 	bl	8005f48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f004 f855 	bl	8006348 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	f003 020f 	and.w	r2, r3, #15
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d901      	bls.n	80022ce <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e042      	b.n	8002354 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da0f      	bge.n	80022f6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	3338      	adds	r3, #56	; 0x38
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	3304      	adds	r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	705a      	strb	r2, [r3, #1]
 80022f4:	e00f      	b.n	8002316 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	f003 020f 	and.w	r2, r3, #15
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4413      	add	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	4413      	add	r3, r2
 800230c:	3304      	adds	r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_PCD_EP_ClrStall+0x86>
 8002332:	2302      	movs	r3, #2
 8002334:	e00e      	b.n	8002354 <HAL_PCD_EP_ClrStall+0xa4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68f9      	ldr	r1, [r7, #12]
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fe6d 	bl	8006024 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800236c:	2b00      	cmp	r3, #0
 800236e:	da0c      	bge.n	800238a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	3338      	adds	r3, #56	; 0x38
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	3304      	adds	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e00c      	b.n	80023a4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 020f 	and.w	r2, r3, #15
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	3304      	adds	r3, #4
 80023a2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68f9      	ldr	r1, [r7, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fc90 	bl	8005cd0 <USB_EPStopXfer>
 80023b0:	4603      	mov	r3, r0
 80023b2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80023b4:	7afb      	ldrb	r3, [r7, #11]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b088      	sub	sp, #32
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	3338      	adds	r3, #56	; 0x38
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	3304      	adds	r3, #4
 80023e4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d901      	bls.n	80023f6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e067      	b.n	80024c6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	429a      	cmp	r2, r3
 800240a:	d902      	bls.n	8002412 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3303      	adds	r3, #3
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800241a:	e026      	b.n	800246a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	699a      	ldr	r2, [r3, #24]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	429a      	cmp	r2, r3
 8002430:	d902      	bls.n	8002438 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3303      	adds	r3, #3
 800243c:	089b      	lsrs	r3, r3, #2
 800243e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6919      	ldr	r1, [r3, #16]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	b29b      	uxth	r3, r3
 800244c:	6978      	ldr	r0, [r7, #20]
 800244e:	f003 fce9 	bl	8005e24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	441a      	add	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	441a      	add	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	015a      	lsls	r2, r3, #5
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4413      	add	r3, r2
 8002472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	b29b      	uxth	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	429a      	cmp	r2, r3
 800247e:	d809      	bhi.n	8002494 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002488:	429a      	cmp	r2, r3
 800248a:	d203      	bcs.n	8002494 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1c3      	bne.n	800241c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	429a      	cmp	r2, r3
 800249e:	d811      	bhi.n	80024c4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	2201      	movs	r2, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	6939      	ldr	r1, [r7, #16]
 80024bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024c0:	4013      	ands	r3, r2
 80024c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3720      	adds	r7, #32
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	333c      	adds	r3, #60	; 0x3c
 80024e8:	3304      	adds	r3, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <PCD_EP_OutXfrComplete_int+0x98>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d124      	bne.n	8002550 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002522:	6093      	str	r3, [r2, #8]
 8002524:	e01a      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	015a      	lsls	r2, r3, #5
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4413      	add	r3, r2
 8002538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253c:	461a      	mov	r2, r3
 800253e:	2320      	movs	r3, #32
 8002540:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f006 fa07 	bl	800895c <HAL_PCD_DataOutStageCallback>
 800254e:	e005      	b.n	800255c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f006 fa00 	bl	800895c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	4f54310a 	.word	0x4f54310a

0800256c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	333c      	adds	r3, #60	; 0x3c
 8002584:	3304      	adds	r3, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a0c      	ldr	r2, [pc, #48]	; (80025d0 <PCD_EP_OutSetupPacket_int+0x64>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d90e      	bls.n	80025c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d009      	beq.n	80025c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f006 f9b9 	bl	8008938 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	4f54300a 	.word	0x4f54300a

080025d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
 80025e0:	4613      	mov	r3, r2
 80025e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025f2:	883b      	ldrh	r3, [r7, #0]
 80025f4:	0419      	lsls	r1, r3, #16
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002600:	e028      	b.n	8002654 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	0c1b      	lsrs	r3, r3, #16
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4413      	add	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e00d      	b.n	8002632 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	3340      	adds	r3, #64	; 0x40
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4413      	add	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	3301      	adds	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	3b01      	subs	r3, #1
 8002638:	429a      	cmp	r2, r3
 800263a:	d3ec      	bcc.n	8002616 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800263c:	883b      	ldrh	r3, [r7, #0]
 800263e:	0418      	lsls	r0, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	3b01      	subs	r3, #1
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	4302      	orrs	r2, r0
 800264c:	3340      	adds	r3, #64	; 0x40
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
 800266a:	460b      	mov	r3, r1
 800266c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b6:	f043 0303 	orr.w	r3, r3, #3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40007000 	.word	0x40007000

080026e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f6:	d130      	bne.n	800275a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002704:	d038      	beq.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002710:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2232      	movs	r2, #50	; 0x32
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	0c9b      	lsrs	r3, r3, #18
 8002728:	3301      	adds	r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272c:	e002      	b.n	8002734 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	3b01      	subs	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002734:	4b14      	ldr	r3, [pc, #80]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002740:	d102      	bne.n	8002748 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f2      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002754:	d110      	bne.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e00f      	b.n	800277a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002766:	d007      	beq.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002768:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002770:	4a05      	ldr	r2, [pc, #20]	; (8002788 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002776:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40007000 	.word	0x40007000
 800278c:	20000000 	.word	0x20000000
 8002790:	431bde83 	.word	0x431bde83

08002794 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002798:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800279e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a2:	6053      	str	r3, [r2, #4]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000

080027b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e3ca      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	4b97      	ldr	r3, [pc, #604]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d0:	4b94      	ldr	r3, [pc, #592]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80e4 	beq.w	80029b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d007      	beq.n	80027fe <HAL_RCC_OscConfig+0x4a>
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	2b0c      	cmp	r3, #12
 80027f2:	f040 808b 	bne.w	800290c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	f040 8087 	bne.w	800290c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027fe:	4b89      	ldr	r3, [pc, #548]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x62>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e3a2      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_RCC_OscConfig+0x7c>
 8002826:	4b7f      	ldr	r3, [pc, #508]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800282e:	e005      	b.n	800283c <HAL_RCC_OscConfig+0x88>
 8002830:	4b7c      	ldr	r3, [pc, #496]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283c:	4293      	cmp	r3, r2
 800283e:	d223      	bcs.n	8002888 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fd87 	bl	8003358 <RCC_SetFlashLatencyFromMSIRange>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e383      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002854:	4b73      	ldr	r3, [pc, #460]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a72      	ldr	r2, [pc, #456]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	496d      	ldr	r1, [pc, #436]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002872:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4968      	ldr	r1, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
 8002886:	e025      	b.n	80028d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800288e:	f043 0308 	orr.w	r3, r3, #8
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4960      	ldr	r1, [pc, #384]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a6:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	495b      	ldr	r1, [pc, #364]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d109      	bne.n	80028d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fd47 	bl	8003358 <RCC_SetFlashLatencyFromMSIRange>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e343      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028d4:	f000 fc4a 	bl	800316c <HAL_RCC_GetSysClockFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b52      	ldr	r3, [pc, #328]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 030f 	and.w	r3, r3, #15
 80028e4:	4950      	ldr	r1, [pc, #320]	; (8002a28 <HAL_RCC_OscConfig+0x274>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
 80028f0:	4a4e      	ldr	r2, [pc, #312]	; (8002a2c <HAL_RCC_OscConfig+0x278>)
 80028f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028f4:	4b4e      	ldr	r3, [pc, #312]	; (8002a30 <HAL_RCC_OscConfig+0x27c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f899 	bl	8000a30 <HAL_InitTick>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d052      	beq.n	80029ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	e327      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d032      	beq.n	800297a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002914:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002920:	f7fe fa40 	bl	8000da4 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002928:	f7fe fa3c 	bl	8000da4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e310      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800293a:	4b3a      	ldr	r3, [pc, #232]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a36      	ldr	r2, [pc, #216]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800294c:	f043 0308 	orr.w	r3, r3, #8
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4931      	ldr	r1, [pc, #196]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002960:	4313      	orrs	r3, r2
 8002962:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	492c      	ldr	r1, [pc, #176]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
 8002978:	e01a      	b.n	80029b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800297a:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002986:	f7fe fa0d 	bl	8000da4 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800298c:	e008      	b.n	80029a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800298e:	f7fe fa09 	bl	8000da4 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d901      	bls.n	80029a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e2dd      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029a0:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1f0      	bne.n	800298e <HAL_RCC_OscConfig+0x1da>
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d074      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d005      	beq.n	80029ce <HAL_RCC_OscConfig+0x21a>
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d10e      	bne.n	80029e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d10b      	bne.n	80029e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d064      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d160      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e2ba      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x24a>
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0b      	ldr	r2, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	e026      	b.n	8002a4c <HAL_RCC_OscConfig+0x298>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a06:	d115      	bne.n	8002a34 <HAL_RCC_OscConfig+0x280>
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a05      	ldr	r2, [pc, #20]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a02      	ldr	r2, [pc, #8]	; (8002a24 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e014      	b.n	8002a4c <HAL_RCC_OscConfig+0x298>
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	0800a080 	.word	0x0800a080
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004
 8002a34:	4ba0      	ldr	r3, [pc, #640]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a9f      	ldr	r2, [pc, #636]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b9d      	ldr	r3, [pc, #628]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a9c      	ldr	r2, [pc, #624]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe f9a6 	bl	8000da4 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a5c:	f7fe f9a2 	bl	8000da4 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	; 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e276      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6e:	4b92      	ldr	r3, [pc, #584]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2a8>
 8002a7a:	e014      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f992 	bl	8000da4 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe f98e 	bl	8000da4 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e262      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a96:	4b88      	ldr	r3, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x2d0>
 8002aa2:	e000      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d060      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x310>
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d119      	bne.n	8002af2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d116      	bne.n	8002af2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ac4:	4b7c      	ldr	r3, [pc, #496]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_OscConfig+0x328>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e23f      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002adc:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	4973      	ldr	r1, [pc, #460]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002af0:	e040      	b.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d023      	beq.n	8002b42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afa:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a6e      	ldr	r2, [pc, #440]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe f94d 	bl	8000da4 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe f949 	bl	8000da4 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e21d      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b20:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0f0      	beq.n	8002b0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	495f      	ldr	r1, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
 8002b40:	e018      	b.n	8002b74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b42:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5c      	ldr	r2, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4e:	f7fe f929 	bl	8000da4 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b56:	f7fe f925 	bl	8000da4 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e1f9      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b68:	4b53      	ldr	r3, [pc, #332]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f0      	bne.n	8002b56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0308 	and.w	r3, r3, #8
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d03c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01c      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe f904 	bl	8000da4 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe f900 	bl	8000da4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e1d4      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bb2:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x3ec>
 8002bc0:	e01b      	b.n	8002bfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd2:	f7fe f8e7 	bl	8000da4 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bda:	f7fe f8e3 	bl	8000da4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e1b7      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ef      	bne.n	8002bda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80a6 	beq.w	8002d54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c18:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	4a26      	ldr	r2, [pc, #152]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c22:	6593      	str	r3, [r2, #88]	; 0x58
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d118      	bne.n	8002c72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c40:	4b1e      	ldr	r3, [pc, #120]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1d      	ldr	r2, [pc, #116]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4c:	f7fe f8aa 	bl	8000da4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c54:	f7fe f8a6 	bl	8000da4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e17a      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <HAL_RCC_OscConfig+0x508>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d108      	bne.n	8002c8c <HAL_RCC_OscConfig+0x4d8>
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8a:	e029      	b.n	8002ce0 <HAL_RCC_OscConfig+0x52c>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d115      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x50c>
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_RCC_OscConfig+0x504>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCC_OscConfig+0x52c>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	4b9c      	ldr	r3, [pc, #624]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	4a9b      	ldr	r2, [pc, #620]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd0:	4b98      	ldr	r3, [pc, #608]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	4a97      	ldr	r2, [pc, #604]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002cd8:	f023 0304 	bic.w	r3, r3, #4
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d016      	beq.n	8002d16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce8:	f7fe f85c 	bl	8000da4 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe f858 	bl	8000da4 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e12a      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0ed      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x53c>
 8002d14:	e015      	b.n	8002d42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d16:	f7fe f845 	bl	8000da4 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1e:	f7fe f841 	bl	8000da4 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e113      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d34:	4b7f      	ldr	r3, [pc, #508]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1ed      	bne.n	8002d1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d42:	7ffb      	ldrb	r3, [r7, #31]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d105      	bne.n	8002d54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d48:	4b7a      	ldr	r3, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4c:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80fe 	beq.w	8002f5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	f040 80d0 	bne.w	8002f08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d68:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d130      	bne.n	8002dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	3b01      	subs	r3, #1
 8002d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d127      	bne.n	8002dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d11f      	bne.n	8002dde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da8:	2a07      	cmp	r2, #7
 8002daa:	bf14      	ite	ne
 8002dac:	2201      	movne	r2, #1
 8002dae:	2200      	moveq	r2, #0
 8002db0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d113      	bne.n	8002dde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d109      	bne.n	8002dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d06e      	beq.n	8002ebc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b0c      	cmp	r3, #12
 8002de2:	d069      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0ad      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e0c:	f7fd ffca 	bl	8000da4 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fd ffc6 	bl	8000da4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e09a      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e32:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e34:	68da      	ldr	r2, [r3, #12]
 8002e36:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <HAL_RCC_OscConfig+0x784>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e42:	3a01      	subs	r2, #1
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4c:	0212      	lsls	r2, r2, #8
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e54:	0852      	lsrs	r2, r2, #1
 8002e56:	3a01      	subs	r2, #1
 8002e58:	0552      	lsls	r2, r2, #21
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e60:	0852      	lsrs	r2, r2, #1
 8002e62:	3a01      	subs	r2, #1
 8002e64:	0652      	lsls	r2, r2, #25
 8002e66:	4311      	orrs	r1, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e6c:	0912      	lsrs	r2, r2, #4
 8002e6e:	0452      	lsls	r2, r2, #17
 8002e70:	430a      	orrs	r2, r1
 8002e72:	4930      	ldr	r1, [pc, #192]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e84:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a2a      	ldr	r2, [pc, #168]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e90:	f7fd ff88 	bl	8000da4 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fd ff84 	bl	8000da4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e058      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb6:	e050      	b.n	8002f5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e04f      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d148      	bne.n	8002f5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ec8:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a19      	ldr	r2, [pc, #100]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ed2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a16      	ldr	r2, [pc, #88]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ede:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee0:	f7fd ff60 	bl	8000da4 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fd ff5c 	bl	8000da4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e030      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x734>
 8002f06:	e028      	b.n	8002f5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d023      	beq.n	8002f56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <HAL_RCC_OscConfig+0x780>)
 8002f14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7fd ff43 	bl	8000da4 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f20:	e00c      	b.n	8002f3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fd ff3f 	bl	8000da4 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d905      	bls.n	8002f3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e013      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_OscConfig+0x7b0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ec      	bne.n	8002f22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_OscConfig+0x7b0>)
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	4905      	ldr	r1, [pc, #20]	; (8002f64 <HAL_RCC_OscConfig+0x7b0>)
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <HAL_RCC_OscConfig+0x7b4>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
 8002f54:	e001      	b.n	8002f5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e000      	b.n	8002f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	feeefffc 	.word	0xfeeefffc

08002f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0e7      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b75      	ldr	r3, [pc, #468]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d910      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 0207 	bic.w	r2, r3, #7
 8002f96:	4970      	ldr	r1, [pc, #448]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9e:	4b6e      	ldr	r3, [pc, #440]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d001      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0cf      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b66      	ldr	r3, [pc, #408]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d908      	bls.n	8002fde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fcc:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4960      	ldr	r1, [pc, #384]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d04c      	beq.n	8003084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d107      	bne.n	8003002 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff2:	4b5a      	ldr	r3, [pc, #360]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d121      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0a6      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d115      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e09a      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003022:	4b4e      	ldr	r3, [pc, #312]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e08e      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003032:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e086      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003042:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 0203 	bic.w	r2, r3, #3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4943      	ldr	r1, [pc, #268]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003054:	f7fd fea6 	bl	8000da4 <HAL_GetTick>
 8003058:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	e00a      	b.n	8003072 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800305c:	f7fd fea2 	bl	8000da4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e06e      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 020c 	and.w	r2, r3, #12
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	429a      	cmp	r2, r3
 8003082:	d1eb      	bne.n	800305c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d010      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309c:	429a      	cmp	r2, r3
 800309e:	d208      	bcs.n	80030b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b2e      	ldr	r3, [pc, #184]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	492b      	ldr	r1, [pc, #172]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b2:	4b29      	ldr	r3, [pc, #164]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d210      	bcs.n	80030e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c0:	4b25      	ldr	r3, [pc, #148]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 0207 	bic.w	r2, r3, #7
 80030c8:	4923      	ldr	r1, [pc, #140]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_RCC_ClockConfig+0x1ec>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d001      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e036      	b.n	8003150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4918      	ldr	r1, [pc, #96]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800310c:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4910      	ldr	r1, [pc, #64]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003120:	f000 f824 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	490b      	ldr	r1, [pc, #44]	; (8003160 <HAL_RCC_ClockConfig+0x1f4>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
 800313c:	4a09      	ldr	r2, [pc, #36]	; (8003164 <HAL_RCC_ClockConfig+0x1f8>)
 800313e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_RCC_ClockConfig+0x1fc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd fc73 	bl	8000a30 <HAL_InitTick>
 800314a:	4603      	mov	r3, r0
 800314c:	72fb      	strb	r3, [r7, #11]

  return status;
 800314e:	7afb      	ldrb	r3, [r7, #11]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40022000 	.word	0x40022000
 800315c:	40021000 	.word	0x40021000
 8003160:	0800a080 	.word	0x0800a080
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004

0800316c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800316c:	b480      	push	{r7}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317a:	4b3e      	ldr	r3, [pc, #248]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003184:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b0c      	cmp	r3, #12
 8003198:	d121      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d11e      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a0:	4b34      	ldr	r3, [pc, #208]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031ac:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031c8:	4a2b      	ldr	r2, [pc, #172]	; (8003278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d102      	bne.n	80031ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 80031e6:	61bb      	str	r3, [r7, #24]
 80031e8:	e004      	b.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_RCC_GetSysClockFreq+0x114>)
 80031f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0c      	cmp	r3, #12
 80031f8:	d134      	bne.n	8003264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d003      	beq.n	8003212 <HAL_RCC_GetSysClockFreq+0xa6>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d003      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0xac>
 8003210:	e005      	b.n	800321e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCC_GetSysClockFreq+0x110>)
 8003214:	617b      	str	r3, [r7, #20]
      break;
 8003216:	e005      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_GetSysClockFreq+0x114>)
 800321a:	617b      	str	r3, [r7, #20]
      break;
 800321c:	e002      	b.n	8003224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	617b      	str	r3, [r7, #20]
      break;
 8003222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	3301      	adds	r3, #1
 8003230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	fb03 f202 	mul.w	r2, r3, r2
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	fbb2 f3f3 	udiv	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_RCC_GetSysClockFreq+0x108>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	0e5b      	lsrs	r3, r3, #25
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	3301      	adds	r3, #1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003264:	69bb      	ldr	r3, [r7, #24]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	0800a098 	.word	0x0800a098
 800327c:	00f42400 	.word	0x00f42400
 8003280:	007a1200 	.word	0x007a1200

08003284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_GetHCLKFreq+0x14>)
 800328a:	681b      	ldr	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20000000 	.word	0x20000000

0800329c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032a0:	f7ff fff0 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0a1b      	lsrs	r3, r3, #8
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4904      	ldr	r1, [pc, #16]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	0800a090 	.word	0x0800a090

080032c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032cc:	f7ff ffda 	bl	8003284 <HAL_RCC_GetHCLKFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	0adb      	lsrs	r3, r3, #11
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	4904      	ldr	r1, [pc, #16]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	0800a090 	.word	0x0800a090

080032f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	220f      	movs	r2, #15
 8003302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCC_GetClockConfig+0x60>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0207 	and.w	r2, r3, #7
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	40022000 	.word	0x40022000

08003358 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003364:	4b2a      	ldr	r3, [pc, #168]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003370:	f7ff f9ac 	bl	80026cc <HAL_PWREx_GetVoltageRange>
 8003374:	6178      	str	r0, [r7, #20]
 8003376:	e014      	b.n	80033a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b25      	ldr	r3, [pc, #148]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	4a24      	ldr	r2, [pc, #144]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	6593      	str	r3, [r2, #88]	; 0x58
 8003384:	4b22      	ldr	r3, [pc, #136]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003390:	f7ff f99c 	bl	80026cc <HAL_PWREx_GetVoltageRange>
 8003394:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	4a1d      	ldr	r2, [pc, #116]	; (8003410 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a8:	d10b      	bne.n	80033c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d919      	bls.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2ba0      	cmp	r3, #160	; 0xa0
 80033b4:	d902      	bls.n	80033bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b6:	2302      	movs	r3, #2
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	e013      	b.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033bc:	2301      	movs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	e010      	b.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b80      	cmp	r3, #128	; 0x80
 80033c6:	d902      	bls.n	80033ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033c8:	2303      	movs	r3, #3
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	e00a      	b.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2b80      	cmp	r3, #128	; 0x80
 80033d2:	d102      	bne.n	80033da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033d4:	2302      	movs	r3, #2
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	e004      	b.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b70      	cmp	r3, #112	; 0x70
 80033de:	d101      	bne.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033e0:	2301      	movs	r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 0207 	bic.w	r2, r3, #7
 80033ec:	4909      	ldr	r1, [pc, #36]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033f4:	4b07      	ldr	r3, [pc, #28]	; (8003414 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d001      	beq.n	8003406 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	40022000 	.word	0x40022000

08003418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003420:	2300      	movs	r3, #0
 8003422:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003424:	2300      	movs	r3, #0
 8003426:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003430:	2b00      	cmp	r3, #0
 8003432:	d041      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003438:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800343c:	d02a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800343e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003442:	d824      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003444:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800344a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800344e:	d81e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003458:	d010      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800345a:	e018      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800345c:	4b86      	ldr	r3, [pc, #536]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	4a85      	ldr	r2, [pc, #532]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003466:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003468:	e015      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fabb 	bl	80039ec <RCCEx_PLLSAI1_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800347a:	e00c      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3320      	adds	r3, #32
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fba6 	bl	8003bd4 <RCCEx_PLLSAI2_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800348c:	e003      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	74fb      	strb	r3, [r7, #19]
      break;
 8003492:	e000      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003494:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003496:	7cfb      	ldrb	r3, [r7, #19]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10b      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800349c:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034aa:	4973      	ldr	r1, [pc, #460]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80034b2:	e001      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d041      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034cc:	d02a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80034ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034d2:	d824      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d8:	d008      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80034da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034de:	d81e      	bhi.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e8:	d010      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034ea:	e018      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a61      	ldr	r2, [pc, #388]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034f8:	e015      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2100      	movs	r1, #0
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fa73 	bl	80039ec <RCCEx_PLLSAI1_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800350a:	e00c      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3320      	adds	r3, #32
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fb5e 	bl	8003bd4 <RCCEx_PLLSAI2_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800351c:	e003      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	74fb      	strb	r3, [r7, #19]
      break;
 8003522:	e000      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003524:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800353a:	494f      	ldr	r1, [pc, #316]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003542:	e001      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a0 	beq.w	8003696 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003556:	2300      	movs	r3, #0
 8003558:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800355a:	4b47      	ldr	r3, [pc, #284]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800356a:	2300      	movs	r3, #0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00d      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003570:	4b41      	ldr	r3, [pc, #260]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	4a40      	ldr	r2, [pc, #256]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357a:	6593      	str	r3, [r2, #88]	; 0x58
 800357c:	4b3e      	ldr	r3, [pc, #248]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003588:	2301      	movs	r3, #1
 800358a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800358c:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3a      	ldr	r2, [pc, #232]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003596:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003598:	f7fd fc04 	bl	8000da4 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800359e:	e009      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a0:	f7fd fc00 	bl	8000da4 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d902      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	74fb      	strb	r3, [r7, #19]
        break;
 80035b2:	e005      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ef      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d15c      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01f      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d019      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f0:	4b21      	ldr	r3, [pc, #132]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	4a20      	ldr	r2, [pc, #128]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003610:	4a19      	ldr	r2, [pc, #100]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd fbbf 	bl	8000da4 <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003628:	e00b      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362a:	f7fd fbbb 	bl	8000da4 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	f241 3288 	movw	r2, #5000	; 0x1388
 8003638:	4293      	cmp	r3, r2
 800363a:	d902      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	74fb      	strb	r3, [r7, #19]
            break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003642:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ec      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10c      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003656:	4b08      	ldr	r3, [pc, #32]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003666:	4904      	ldr	r1, [pc, #16]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003668:	4313      	orrs	r3, r2
 800366a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800366e:	e009      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	74bb      	strb	r3, [r7, #18]
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003684:	7c7b      	ldrb	r3, [r7, #17]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368a:	4b9e      	ldr	r3, [pc, #632]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	4a9d      	ldr	r2, [pc, #628]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003694:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a2:	4b98      	ldr	r3, [pc, #608]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f023 0203 	bic.w	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	4994      	ldr	r1, [pc, #592]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036c4:	4b8f      	ldr	r3, [pc, #572]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 020c 	bic.w	r2, r3, #12
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	498c      	ldr	r1, [pc, #560]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036e6:	4b87      	ldr	r3, [pc, #540]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4983      	ldr	r1, [pc, #524]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003708:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003716:	497b      	ldr	r1, [pc, #492]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0310 	and.w	r3, r3, #16
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800372a:	4b76      	ldr	r3, [pc, #472]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	4972      	ldr	r1, [pc, #456]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800374c:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	496a      	ldr	r1, [pc, #424]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800376e:	4b65      	ldr	r3, [pc, #404]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	4961      	ldr	r1, [pc, #388]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003790:	4b5c      	ldr	r3, [pc, #368]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379e:	4959      	ldr	r1, [pc, #356]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c0:	4950      	ldr	r1, [pc, #320]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037d4:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	4948      	ldr	r1, [pc, #288]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037f6:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	493f      	ldr	r1, [pc, #252]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d028      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003818:	4b3a      	ldr	r3, [pc, #232]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003826:	4937      	ldr	r1, [pc, #220]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003836:	d106      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003838:	4b32      	ldr	r3, [pc, #200]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4a31      	ldr	r2, [pc, #196]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003842:	60d3      	str	r3, [r2, #12]
 8003844:	e011      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800384e:	d10c      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f8c8 	bl	80039ec <RCCEx_PLLSAI1_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003860:	7cfb      	ldrb	r3, [r7, #19]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d028      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003876:	4b23      	ldr	r3, [pc, #140]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	491f      	ldr	r1, [pc, #124]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003894:	d106      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a0:	60d3      	str	r3, [r2, #12]
 80038a2:	e011      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2101      	movs	r1, #1
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f899 	bl	80039ec <RCCEx_PLLSAI1_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d02b      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f2:	d109      	bne.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	4a02      	ldr	r2, [pc, #8]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fe:	60d3      	str	r3, [r2, #12]
 8003900:	e014      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003902:	bf00      	nop
 8003904:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800390c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003910:	d10c      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3304      	adds	r3, #4
 8003916:	2101      	movs	r1, #1
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f867 	bl	80039ec <RCCEx_PLLSAI1_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003922:	7cfb      	ldrb	r3, [r7, #19]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02f      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003946:	4928      	ldr	r1, [pc, #160]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003956:	d10d      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	2102      	movs	r1, #2
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f844 	bl	80039ec <RCCEx_PLLSAI1_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003968:	7cfb      	ldrb	r3, [r7, #19]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d014      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	74bb      	strb	r3, [r7, #18]
 8003972:	e011      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800397c:	d10c      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3320      	adds	r3, #32
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 f925 	bl	8003bd4 <RCCEx_PLLSAI2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800398e:	7cfb      	ldrb	r3, [r7, #19]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003994:	7cfb      	ldrb	r3, [r7, #19]
 8003996:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039b2:	490d      	ldr	r1, [pc, #52]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039c6:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d6:	4904      	ldr	r1, [pc, #16]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80039de:	7cbb      	ldrb	r3, [r7, #18]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000

080039ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039fa:	4b75      	ldr	r3, [pc, #468]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a06:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0203 	and.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d10d      	bne.n	8003a32 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
       ||
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a1e:	4b6c      	ldr	r3, [pc, #432]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d047      	beq.n	8003ac2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e044      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d018      	beq.n	8003a72 <RCCEx_PLLSAI1_Config+0x86>
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d825      	bhi.n	8003a90 <RCCEx_PLLSAI1_Config+0xa4>
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d002      	beq.n	8003a4e <RCCEx_PLLSAI1_Config+0x62>
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d009      	beq.n	8003a60 <RCCEx_PLLSAI1_Config+0x74>
 8003a4c:	e020      	b.n	8003a90 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a4e:	4b60      	ldr	r3, [pc, #384]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d11d      	bne.n	8003a96 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5e:	e01a      	b.n	8003a96 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a60:	4b5b      	ldr	r3, [pc, #364]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d116      	bne.n	8003a9a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a70:	e013      	b.n	8003a9a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a72:	4b57      	ldr	r3, [pc, #348]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a7e:	4b54      	ldr	r3, [pc, #336]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a8e:	e006      	b.n	8003a9e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      break;
 8003a94:	e004      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10d      	bne.n	8003ac2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6819      	ldr	r1, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	430b      	orrs	r3, r1
 8003abc:	4944      	ldr	r1, [pc, #272]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d17d      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ac8:	4b41      	ldr	r3, [pc, #260]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a40      	ldr	r2, [pc, #256]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ace:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ad4:	f7fd f966 	bl	8000da4 <HAL_GetTick>
 8003ad8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ada:	e009      	b.n	8003af0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003adc:	f7fd f962 	bl	8000da4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d902      	bls.n	8003af0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	73fb      	strb	r3, [r7, #15]
        break;
 8003aee:	e005      	b.n	8003afc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003af0:	4b37      	ldr	r3, [pc, #220]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1ef      	bne.n	8003adc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d160      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d111      	bne.n	8003b2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b08:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6892      	ldr	r2, [r2, #8]
 8003b18:	0211      	lsls	r1, r2, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68d2      	ldr	r2, [r2, #12]
 8003b1e:	0912      	lsrs	r2, r2, #4
 8003b20:	0452      	lsls	r2, r2, #17
 8003b22:	430a      	orrs	r2, r1
 8003b24:	492a      	ldr	r1, [pc, #168]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	610b      	str	r3, [r1, #16]
 8003b2a:	e027      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d112      	bne.n	8003b58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b32:	4b27      	ldr	r3, [pc, #156]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6892      	ldr	r2, [r2, #8]
 8003b42:	0211      	lsls	r1, r2, #8
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6912      	ldr	r2, [r2, #16]
 8003b48:	0852      	lsrs	r2, r2, #1
 8003b4a:	3a01      	subs	r2, #1
 8003b4c:	0552      	lsls	r2, r2, #21
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	491f      	ldr	r1, [pc, #124]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	610b      	str	r3, [r1, #16]
 8003b56:	e011      	b.n	8003b7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6892      	ldr	r2, [r2, #8]
 8003b68:	0211      	lsls	r1, r2, #8
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6952      	ldr	r2, [r2, #20]
 8003b6e:	0852      	lsrs	r2, r2, #1
 8003b70:	3a01      	subs	r2, #1
 8003b72:	0652      	lsls	r2, r2, #25
 8003b74:	430a      	orrs	r2, r1
 8003b76:	4916      	ldr	r1, [pc, #88]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd f90c 	bl	8000da4 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b8e:	e009      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b90:	f7fd f908 	bl	8000da4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d902      	bls.n	8003ba4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	73fb      	strb	r3, [r7, #15]
          break;
 8003ba2:	e005      	b.n	8003bb0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ef      	beq.n	8003b90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003be2:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d018      	beq.n	8003c20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0203 	and.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d10d      	bne.n	8003c1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
       ||
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c06:	4b61      	ldr	r3, [pc, #388]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
       ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d047      	beq.n	8003caa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e044      	b.n	8003caa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d018      	beq.n	8003c5a <RCCEx_PLLSAI2_Config+0x86>
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d825      	bhi.n	8003c78 <RCCEx_PLLSAI2_Config+0xa4>
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d002      	beq.n	8003c36 <RCCEx_PLLSAI2_Config+0x62>
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d009      	beq.n	8003c48 <RCCEx_PLLSAI2_Config+0x74>
 8003c34:	e020      	b.n	8003c78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c36:	4b55      	ldr	r3, [pc, #340]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d11d      	bne.n	8003c7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c46:	e01a      	b.n	8003c7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c48:	4b50      	ldr	r3, [pc, #320]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d116      	bne.n	8003c82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e013      	b.n	8003c82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c5a:	4b4c      	ldr	r3, [pc, #304]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10f      	bne.n	8003c86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c66:	4b49      	ldr	r3, [pc, #292]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c76:	e006      	b.n	8003c86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e004      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c86:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c8e:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	4939      	ldr	r1, [pc, #228]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d167      	bne.n	8003d80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003cb0:	4b36      	ldr	r3, [pc, #216]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a35      	ldr	r2, [pc, #212]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fd f872 	bl	8000da4 <HAL_GetTick>
 8003cc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cc2:	e009      	b.n	8003cd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cc4:	f7fd f86e 	bl	8000da4 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d902      	bls.n	8003cd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd6:	e005      	b.n	8003ce4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003cd8:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ef      	bne.n	8003cc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d14a      	bne.n	8003d80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d111      	bne.n	8003d14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cf0:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6892      	ldr	r2, [r2, #8]
 8003d00:	0211      	lsls	r1, r2, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	68d2      	ldr	r2, [r2, #12]
 8003d06:	0912      	lsrs	r2, r2, #4
 8003d08:	0452      	lsls	r2, r2, #17
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	491f      	ldr	r1, [pc, #124]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	614b      	str	r3, [r1, #20]
 8003d12:	e011      	b.n	8003d38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6892      	ldr	r2, [r2, #8]
 8003d24:	0211      	lsls	r1, r2, #8
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	6912      	ldr	r2, [r2, #16]
 8003d2a:	0852      	lsrs	r2, r2, #1
 8003d2c:	3a01      	subs	r2, #1
 8003d2e:	0652      	lsls	r2, r2, #25
 8003d30:	430a      	orrs	r2, r1
 8003d32:	4916      	ldr	r1, [pc, #88]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d38:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fd f82e 	bl	8000da4 <HAL_GetTick>
 8003d48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d4a:	e009      	b.n	8003d60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d4c:	f7fd f82a 	bl	8000da4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d902      	bls.n	8003d60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d5e:	e005      	b.n	8003d6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ef      	beq.n	8003d4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4904      	ldr	r1, [pc, #16]	; (8003d8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000

08003d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e049      	b.n	8003e36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f841 	bl	8003e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f000 f9f8 	bl	80041c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
	...

08003e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d001      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e04f      	b.n	8003f0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a23      	ldr	r2, [pc, #140]	; (8003f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01d      	beq.n	8003eca <HAL_TIM_Base_Start_IT+0x76>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d018      	beq.n	8003eca <HAL_TIM_Base_Start_IT+0x76>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_TIM_Base_Start_IT+0x76>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIM_Base_Start_IT+0x76>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d009      	beq.n	8003eca <HAL_TIM_Base_Start_IT+0x76>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIM_Base_Start_IT+0x76>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	; (8003f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d115      	bne.n	8003ef6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	4b17      	ldr	r3, [pc, #92]	; (8003f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d015      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0xb4>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee2:	d011      	beq.n	8003f08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0201 	orr.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef4:	e008      	b.n	8003f08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 0201 	orr.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	e000      	b.n	8003f0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40012c00 	.word	0x40012c00
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	40013400 	.word	0x40013400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	00010007 	.word	0x00010007

08003f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0202 	mvn.w	r2, #2
 8003f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f905 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8f7 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f908 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d122      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11b      	bne.n	8003fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0204 	mvn.w	r2, #4
 8003fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8db 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003fd0:	e005      	b.n	8003fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8cd 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f8de 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d122      	bne.n	8004038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d11b      	bne.n	8004038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0208 	mvn.w	r2, #8
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2204      	movs	r2, #4
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8b1 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f8a3 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f8b4 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	2b10      	cmp	r3, #16
 8004044:	d122      	bne.n	800408c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b10      	cmp	r3, #16
 8004052:	d11b      	bne.n	800408c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0210 	mvn.w	r2, #16
 800405c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2208      	movs	r2, #8
 8004062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f887 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f879 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f88a 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10e      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d107      	bne.n	80040b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0201 	mvn.w	r2, #1
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc fc24 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c2:	2b80      	cmp	r3, #128	; 0x80
 80040c4:	d10e      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d0:	2b80      	cmp	r3, #128	; 0x80
 80040d2:	d107      	bne.n	80040e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f914 	bl	800430c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f907 	bl	8004320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b40      	cmp	r3, #64	; 0x40
 800411e:	d10e      	bne.n	800413e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b40      	cmp	r3, #64	; 0x40
 800412c:	d107      	bne.n	800413e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f838 	bl	80041ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b20      	cmp	r3, #32
 800414a:	d10e      	bne.n	800416a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b20      	cmp	r3, #32
 8004158:	d107      	bne.n	800416a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f06f 0220 	mvn.w	r2, #32
 8004162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f8c7 	bl	80042f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <TIM_Base_SetConfig+0x114>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3d      	ldr	r2, [pc, #244]	; (80042dc <TIM_Base_SetConfig+0x118>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3c      	ldr	r2, [pc, #240]	; (80042e0 <TIM_Base_SetConfig+0x11c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3b      	ldr	r2, [pc, #236]	; (80042e4 <TIM_Base_SetConfig+0x120>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0x40>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a3a      	ldr	r2, [pc, #232]	; (80042e8 <TIM_Base_SetConfig+0x124>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2f      	ldr	r2, [pc, #188]	; (80042d8 <TIM_Base_SetConfig+0x114>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01f      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004224:	d01b      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <TIM_Base_SetConfig+0x118>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d017      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2b      	ldr	r2, [pc, #172]	; (80042e0 <TIM_Base_SetConfig+0x11c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <TIM_Base_SetConfig+0x120>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a29      	ldr	r2, [pc, #164]	; (80042e8 <TIM_Base_SetConfig+0x124>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00b      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a28      	ldr	r2, [pc, #160]	; (80042ec <TIM_Base_SetConfig+0x128>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a27      	ldr	r2, [pc, #156]	; (80042f0 <TIM_Base_SetConfig+0x12c>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_Base_SetConfig+0x9a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a26      	ldr	r2, [pc, #152]	; (80042f4 <TIM_Base_SetConfig+0x130>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <TIM_Base_SetConfig+0x114>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <TIM_Base_SetConfig+0x124>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <TIM_Base_SetConfig+0x128>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <TIM_Base_SetConfig+0x12c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_Base_SetConfig+0xf8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a0f      	ldr	r2, [pc, #60]	; (80042f4 <TIM_Base_SetConfig+0x130>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d103      	bne.n	80042c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	615a      	str	r2, [r3, #20]
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40013400 	.word	0x40013400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800

080042f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e040      	b.n	80043c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fc fb0e 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f8c0 	bl	80044f8 <UART_SetConfig>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e022      	b.n	80043c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb6c 	bl	8004a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fbf3 	bl	8004bac <UART_CheckIdleState>
 80043c6:	4603      	mov	r3, r0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	f040 8082 	bne.w	80044ee <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_UART_Transmit+0x26>
 80043f0:	88fb      	ldrh	r3, [r7, #6]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e07a      	b.n	80044f0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_UART_Transmit+0x38>
 8004404:	2302      	movs	r3, #2
 8004406:	e073      	b.n	80044f0 <HAL_UART_Transmit+0x120>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2221      	movs	r2, #33	; 0x21
 800441c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800441e:	f7fc fcc1 	bl	8000da4 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443c:	d108      	bne.n	8004450 <HAL_UART_Transmit+0x80>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e003      	b.n	8004458 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004460:	e02d      	b.n	80044be <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	; 0x80
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fbe6 	bl	8004c3e <UART_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e039      	b.n	80044f0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	881a      	ldrh	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448e:	b292      	uxth	r2, r2
 8004490:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	3302      	adds	r3, #2
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e008      	b.n	80044ac <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	b292      	uxth	r2, r2
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	3301      	adds	r3, #1
 80044aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1cb      	bne.n	8004462 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	; 0x40
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbb2 	bl	8004c3e <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e005      	b.n	80044f0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e000      	b.n	80044f0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80044ee:	2302      	movs	r3, #2
  }
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3720      	adds	r7, #32
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b08a      	sub	sp, #40	; 0x28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	431a      	orrs	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	431a      	orrs	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	4313      	orrs	r3, r2
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4ba4      	ldr	r3, [pc, #656]	; (80047b8 <UART_SetConfig+0x2c0>)
 8004528:	4013      	ands	r3, r2
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004530:	430b      	orrs	r3, r1
 8004532:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a99      	ldr	r2, [pc, #612]	; (80047bc <UART_SetConfig+0x2c4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	4313      	orrs	r3, r2
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	430a      	orrs	r2, r1
 8004576:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a90      	ldr	r2, [pc, #576]	; (80047c0 <UART_SetConfig+0x2c8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d126      	bne.n	80045d0 <UART_SetConfig+0xd8>
 8004582:	4b90      	ldr	r3, [pc, #576]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	2b03      	cmp	r3, #3
 800458e:	d81b      	bhi.n	80045c8 <UART_SetConfig+0xd0>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <UART_SetConfig+0xa0>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045c1 	.word	0x080045c1
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ae:	e116      	b.n	80047de <UART_SetConfig+0x2e6>
 80045b0:	2302      	movs	r3, #2
 80045b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b6:	e112      	b.n	80047de <UART_SetConfig+0x2e6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045be:	e10e      	b.n	80047de <UART_SetConfig+0x2e6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c6:	e10a      	b.n	80047de <UART_SetConfig+0x2e6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ce:	e106      	b.n	80047de <UART_SetConfig+0x2e6>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <UART_SetConfig+0x2d0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d138      	bne.n	800464c <UART_SetConfig+0x154>
 80045da:	4b7a      	ldr	r3, [pc, #488]	; (80047c4 <UART_SetConfig+0x2cc>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d82d      	bhi.n	8004644 <UART_SetConfig+0x14c>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <UART_SetConfig+0xf8>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004625 	.word	0x08004625
 80045f4:	08004645 	.word	0x08004645
 80045f8:	08004645 	.word	0x08004645
 80045fc:	08004645 	.word	0x08004645
 8004600:	08004635 	.word	0x08004635
 8004604:	08004645 	.word	0x08004645
 8004608:	08004645 	.word	0x08004645
 800460c:	08004645 	.word	0x08004645
 8004610:	0800462d 	.word	0x0800462d
 8004614:	08004645 	.word	0x08004645
 8004618:	08004645 	.word	0x08004645
 800461c:	08004645 	.word	0x08004645
 8004620:	0800463d 	.word	0x0800463d
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462a:	e0d8      	b.n	80047de <UART_SetConfig+0x2e6>
 800462c:	2302      	movs	r3, #2
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004632:	e0d4      	b.n	80047de <UART_SetConfig+0x2e6>
 8004634:	2304      	movs	r3, #4
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e0d0      	b.n	80047de <UART_SetConfig+0x2e6>
 800463c:	2308      	movs	r3, #8
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e0cc      	b.n	80047de <UART_SetConfig+0x2e6>
 8004644:	2310      	movs	r3, #16
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e0c8      	b.n	80047de <UART_SetConfig+0x2e6>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5e      	ldr	r2, [pc, #376]	; (80047cc <UART_SetConfig+0x2d4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d125      	bne.n	80046a2 <UART_SetConfig+0x1aa>
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004660:	2b30      	cmp	r3, #48	; 0x30
 8004662:	d016      	beq.n	8004692 <UART_SetConfig+0x19a>
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d818      	bhi.n	800469a <UART_SetConfig+0x1a2>
 8004668:	2b20      	cmp	r3, #32
 800466a:	d00a      	beq.n	8004682 <UART_SetConfig+0x18a>
 800466c:	2b20      	cmp	r3, #32
 800466e:	d814      	bhi.n	800469a <UART_SetConfig+0x1a2>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <UART_SetConfig+0x182>
 8004674:	2b10      	cmp	r3, #16
 8004676:	d008      	beq.n	800468a <UART_SetConfig+0x192>
 8004678:	e00f      	b.n	800469a <UART_SetConfig+0x1a2>
 800467a:	2300      	movs	r3, #0
 800467c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004680:	e0ad      	b.n	80047de <UART_SetConfig+0x2e6>
 8004682:	2302      	movs	r3, #2
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004688:	e0a9      	b.n	80047de <UART_SetConfig+0x2e6>
 800468a:	2304      	movs	r3, #4
 800468c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004690:	e0a5      	b.n	80047de <UART_SetConfig+0x2e6>
 8004692:	2308      	movs	r3, #8
 8004694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004698:	e0a1      	b.n	80047de <UART_SetConfig+0x2e6>
 800469a:	2310      	movs	r3, #16
 800469c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a0:	e09d      	b.n	80047de <UART_SetConfig+0x2e6>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a4a      	ldr	r2, [pc, #296]	; (80047d0 <UART_SetConfig+0x2d8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d125      	bne.n	80046f8 <UART_SetConfig+0x200>
 80046ac:	4b45      	ldr	r3, [pc, #276]	; (80047c4 <UART_SetConfig+0x2cc>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046b6:	2bc0      	cmp	r3, #192	; 0xc0
 80046b8:	d016      	beq.n	80046e8 <UART_SetConfig+0x1f0>
 80046ba:	2bc0      	cmp	r3, #192	; 0xc0
 80046bc:	d818      	bhi.n	80046f0 <UART_SetConfig+0x1f8>
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d00a      	beq.n	80046d8 <UART_SetConfig+0x1e0>
 80046c2:	2b80      	cmp	r3, #128	; 0x80
 80046c4:	d814      	bhi.n	80046f0 <UART_SetConfig+0x1f8>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <UART_SetConfig+0x1d8>
 80046ca:	2b40      	cmp	r3, #64	; 0x40
 80046cc:	d008      	beq.n	80046e0 <UART_SetConfig+0x1e8>
 80046ce:	e00f      	b.n	80046f0 <UART_SetConfig+0x1f8>
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e082      	b.n	80047de <UART_SetConfig+0x2e6>
 80046d8:	2302      	movs	r3, #2
 80046da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046de:	e07e      	b.n	80047de <UART_SetConfig+0x2e6>
 80046e0:	2304      	movs	r3, #4
 80046e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e6:	e07a      	b.n	80047de <UART_SetConfig+0x2e6>
 80046e8:	2308      	movs	r3, #8
 80046ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ee:	e076      	b.n	80047de <UART_SetConfig+0x2e6>
 80046f0:	2310      	movs	r3, #16
 80046f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f6:	e072      	b.n	80047de <UART_SetConfig+0x2e6>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a35      	ldr	r2, [pc, #212]	; (80047d4 <UART_SetConfig+0x2dc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d12a      	bne.n	8004758 <UART_SetConfig+0x260>
 8004702:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004710:	d01a      	beq.n	8004748 <UART_SetConfig+0x250>
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d81b      	bhi.n	8004750 <UART_SetConfig+0x258>
 8004718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800471c:	d00c      	beq.n	8004738 <UART_SetConfig+0x240>
 800471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004722:	d815      	bhi.n	8004750 <UART_SetConfig+0x258>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <UART_SetConfig+0x238>
 8004728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472c:	d008      	beq.n	8004740 <UART_SetConfig+0x248>
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x258>
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004736:	e052      	b.n	80047de <UART_SetConfig+0x2e6>
 8004738:	2302      	movs	r3, #2
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473e:	e04e      	b.n	80047de <UART_SetConfig+0x2e6>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004746:	e04a      	b.n	80047de <UART_SetConfig+0x2e6>
 8004748:	2308      	movs	r3, #8
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800474e:	e046      	b.n	80047de <UART_SetConfig+0x2e6>
 8004750:	2310      	movs	r3, #16
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004756:	e042      	b.n	80047de <UART_SetConfig+0x2e6>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <UART_SetConfig+0x2c4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d13a      	bne.n	80047d8 <UART_SetConfig+0x2e0>
 8004762:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <UART_SetConfig+0x2cc>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004768:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800476c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004770:	d01a      	beq.n	80047a8 <UART_SetConfig+0x2b0>
 8004772:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004776:	d81b      	bhi.n	80047b0 <UART_SetConfig+0x2b8>
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d00c      	beq.n	8004798 <UART_SetConfig+0x2a0>
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004782:	d815      	bhi.n	80047b0 <UART_SetConfig+0x2b8>
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <UART_SetConfig+0x298>
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d008      	beq.n	80047a0 <UART_SetConfig+0x2a8>
 800478e:	e00f      	b.n	80047b0 <UART_SetConfig+0x2b8>
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e022      	b.n	80047de <UART_SetConfig+0x2e6>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e01e      	b.n	80047de <UART_SetConfig+0x2e6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e01a      	b.n	80047de <UART_SetConfig+0x2e6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e016      	b.n	80047de <UART_SetConfig+0x2e6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e012      	b.n	80047de <UART_SetConfig+0x2e6>
 80047b8:	efff69f3 	.word	0xefff69f3
 80047bc:	40008000 	.word	0x40008000
 80047c0:	40013800 	.word	0x40013800
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40004400 	.word	0x40004400
 80047cc:	40004800 	.word	0x40004800
 80047d0:	40004c00 	.word	0x40004c00
 80047d4:	40005000 	.word	0x40005000
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a9f      	ldr	r2, [pc, #636]	; (8004a60 <UART_SetConfig+0x568>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d17a      	bne.n	80048de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047ec:	2b08      	cmp	r3, #8
 80047ee:	d824      	bhi.n	800483a <UART_SetConfig+0x342>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x300>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800483b 	.word	0x0800483b
 8004800:	08004825 	.word	0x08004825
 8004804:	0800483b 	.word	0x0800483b
 8004808:	0800482b 	.word	0x0800482b
 800480c:	0800483b 	.word	0x0800483b
 8004810:	0800483b 	.word	0x0800483b
 8004814:	0800483b 	.word	0x0800483b
 8004818:	08004833 	.word	0x08004833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fe fd3e 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8004820:	61f8      	str	r0, [r7, #28]
        break;
 8004822:	e010      	b.n	8004846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004824:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <UART_SetConfig+0x56c>)
 8004826:	61fb      	str	r3, [r7, #28]
        break;
 8004828:	e00d      	b.n	8004846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800482a:	f7fe fc9f 	bl	800316c <HAL_RCC_GetSysClockFreq>
 800482e:	61f8      	str	r0, [r7, #28]
        break;
 8004830:	e009      	b.n	8004846 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004836:	61fb      	str	r3, [r7, #28]
        break;
 8004838:	e005      	b.n	8004846 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004844:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80fb 	beq.w	8004a44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	4413      	add	r3, r2
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	429a      	cmp	r2, r3
 800485c:	d305      	bcc.n	800486a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	429a      	cmp	r2, r3
 8004868:	d903      	bls.n	8004872 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004870:	e0e8      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2200      	movs	r2, #0
 8004876:	461c      	mov	r4, r3
 8004878:	4615      	mov	r5, r2
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	022b      	lsls	r3, r5, #8
 8004884:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004888:	0222      	lsls	r2, r4, #8
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	6849      	ldr	r1, [r1, #4]
 800488e:	0849      	lsrs	r1, r1, #1
 8004890:	2000      	movs	r0, #0
 8004892:	4688      	mov	r8, r1
 8004894:	4681      	mov	r9, r0
 8004896:	eb12 0a08 	adds.w	sl, r2, r8
 800489a:	eb43 0b09 	adc.w	fp, r3, r9
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ac:	4650      	mov	r0, sl
 80048ae:	4659      	mov	r1, fp
 80048b0:	f7fb fcde 	bl	8000270 <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4613      	mov	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048c2:	d308      	bcc.n	80048d6 <UART_SetConfig+0x3de>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048ca:	d204      	bcs.n	80048d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	e0b6      	b.n	8004a44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048dc:	e0b2      	b.n	8004a44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	69db      	ldr	r3, [r3, #28]
 80048e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048e6:	d15e      	bne.n	80049a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80048e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d828      	bhi.n	8004942 <UART_SetConfig+0x44a>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <UART_SetConfig+0x400>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004925 	.word	0x08004925
 8004900:	0800492d 	.word	0x0800492d
 8004904:	08004943 	.word	0x08004943
 8004908:	08004933 	.word	0x08004933
 800490c:	08004943 	.word	0x08004943
 8004910:	08004943 	.word	0x08004943
 8004914:	08004943 	.word	0x08004943
 8004918:	0800493b 	.word	0x0800493b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800491c:	f7fe fcbe 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 8004920:	61f8      	str	r0, [r7, #28]
        break;
 8004922:	e014      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004924:	f7fe fcd0 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 8004928:	61f8      	str	r0, [r7, #28]
        break;
 800492a:	e010      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4b4d      	ldr	r3, [pc, #308]	; (8004a64 <UART_SetConfig+0x56c>)
 800492e:	61fb      	str	r3, [r7, #28]
        break;
 8004930:	e00d      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fe fc1b 	bl	800316c <HAL_RCC_GetSysClockFreq>
 8004936:	61f8      	str	r0, [r7, #28]
        break;
 8004938:	e009      	b.n	800494e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493e:	61fb      	str	r3, [r7, #28]
        break;
 8004940:	e005      	b.n	800494e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800494c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d077      	beq.n	8004a44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005a      	lsls	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0f      	cmp	r3, #15
 800496e:	d916      	bls.n	800499e <UART_SetConfig+0x4a6>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004976:	d212      	bcs.n	800499e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f023 030f 	bic.w	r3, r3, #15
 8004980:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	b29b      	uxth	r3, r3
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	b29a      	uxth	r2, r3
 800498e:	8afb      	ldrh	r3, [r7, #22]
 8004990:	4313      	orrs	r3, r2
 8004992:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	8afa      	ldrh	r2, [r7, #22]
 800499a:	60da      	str	r2, [r3, #12]
 800499c:	e052      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049a4:	e04e      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d827      	bhi.n	80049fe <UART_SetConfig+0x506>
 80049ae:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <UART_SetConfig+0x4bc>)
 80049b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	080049e9 	.word	0x080049e9
 80049c0:	080049ff 	.word	0x080049ff
 80049c4:	080049ef 	.word	0x080049ef
 80049c8:	080049ff 	.word	0x080049ff
 80049cc:	080049ff 	.word	0x080049ff
 80049d0:	080049ff 	.word	0x080049ff
 80049d4:	080049f7 	.word	0x080049f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049d8:	f7fe fc60 	bl	800329c <HAL_RCC_GetPCLK1Freq>
 80049dc:	61f8      	str	r0, [r7, #28]
        break;
 80049de:	e014      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7fe fc72 	bl	80032c8 <HAL_RCC_GetPCLK2Freq>
 80049e4:	61f8      	str	r0, [r7, #28]
        break;
 80049e6:	e010      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049e8:	4b1e      	ldr	r3, [pc, #120]	; (8004a64 <UART_SetConfig+0x56c>)
 80049ea:	61fb      	str	r3, [r7, #28]
        break;
 80049ec:	e00d      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ee:	f7fe fbbd 	bl	800316c <HAL_RCC_GetSysClockFreq>
 80049f2:	61f8      	str	r0, [r7, #28]
        break;
 80049f4:	e009      	b.n	8004a0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fa:	61fb      	str	r3, [r7, #28]
        break;
 80049fc:	e005      	b.n	8004a0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a08:	bf00      	nop
    }

    if (pclk != 0U)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d019      	beq.n	8004a44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	085a      	lsrs	r2, r3, #1
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	441a      	add	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	d909      	bls.n	8004a3e <UART_SetConfig+0x546>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d205      	bcs.n	8004a3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	e002      	b.n	8004a44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3728      	adds	r7, #40	; 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5e:	bf00      	nop
 8004a60:	40008000 	.word	0x40008000
 8004a64:	00f42400 	.word	0x00f42400

08004a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	f003 0310 	and.w	r3, r3, #16
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b66:	d10a      	bne.n	8004b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bbc:	f7fc f8f2 	bl	8000da4 <HAL_GetTick>
 8004bc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d10e      	bne.n	8004bee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f82d 	bl	8004c3e <UART_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e023      	b.n	8004c36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d10e      	bne.n	8004c1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f817 	bl	8004c3e <UART_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e00d      	b.n	8004c36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b09c      	sub	sp, #112	; 0x70
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	603b      	str	r3, [r7, #0]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4e:	e0a5      	b.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	f000 80a1 	beq.w	8004d9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5a:	f7fc f8a3 	bl	8000da4 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d13e      	bne.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c84:	667b      	str	r3, [r7, #100]	; 0x64
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e6      	bne.n	8004c70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	f023 0301 	bic.w	r3, r3, #1
 8004cb8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e5      	bne.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e067      	b.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d04f      	beq.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d0a:	d147      	bne.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	461a      	mov	r2, r3
 8004d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
 8004d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e6      	bne.n	8004d16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	613b      	str	r3, [r7, #16]
   return(result);
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d68:	623a      	str	r2, [r7, #32]
 8004d6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	69f9      	ldr	r1, [r7, #28]
 8004d6e:	6a3a      	ldr	r2, [r7, #32]
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e010      	b.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	69da      	ldr	r2, [r3, #28]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	f43f af4a 	beq.w	8004c50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3770      	adds	r7, #112	; 0x70
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	f107 001c 	add.w	r0, r7, #28
 8004dd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f001 faf7 	bl	80063d8 <USB_CoreReset>
 8004dea:	4603      	mov	r3, r0
 8004dec:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d106      	bne.n	8004e02 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
 8004e00:	e005      	b.n	8004e0e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1a:	b004      	add	sp, #16
 8004e1c:	4770      	bx	lr
	...

08004e20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e2e:	79fb      	ldrb	r3, [r7, #7]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d165      	bne.n	8004f00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4a3e      	ldr	r2, [pc, #248]	; (8004f30 <USB_SetTurnaroundTime+0x110>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d906      	bls.n	8004e4a <USB_SetTurnaroundTime+0x2a>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a3d      	ldr	r2, [pc, #244]	; (8004f34 <USB_SetTurnaroundTime+0x114>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d202      	bcs.n	8004e4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e44:	230f      	movs	r3, #15
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	e05c      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a39      	ldr	r2, [pc, #228]	; (8004f34 <USB_SetTurnaroundTime+0x114>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d306      	bcc.n	8004e60 <USB_SetTurnaroundTime+0x40>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a38      	ldr	r2, [pc, #224]	; (8004f38 <USB_SetTurnaroundTime+0x118>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d202      	bcs.n	8004e60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e5a:	230e      	movs	r3, #14
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e051      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4a35      	ldr	r2, [pc, #212]	; (8004f38 <USB_SetTurnaroundTime+0x118>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d306      	bcc.n	8004e76 <USB_SetTurnaroundTime+0x56>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a34      	ldr	r2, [pc, #208]	; (8004f3c <USB_SetTurnaroundTime+0x11c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d202      	bcs.n	8004e76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e70:	230d      	movs	r3, #13
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e046      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <USB_SetTurnaroundTime+0x11c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d306      	bcc.n	8004e8c <USB_SetTurnaroundTime+0x6c>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <USB_SetTurnaroundTime+0x120>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d802      	bhi.n	8004e8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e86:	230c      	movs	r3, #12
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e03b      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	4a2c      	ldr	r2, [pc, #176]	; (8004f40 <USB_SetTurnaroundTime+0x120>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d906      	bls.n	8004ea2 <USB_SetTurnaroundTime+0x82>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a2b      	ldr	r2, [pc, #172]	; (8004f44 <USB_SetTurnaroundTime+0x124>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d802      	bhi.n	8004ea2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e9c:	230b      	movs	r3, #11
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e030      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4a27      	ldr	r2, [pc, #156]	; (8004f44 <USB_SetTurnaroundTime+0x124>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d906      	bls.n	8004eb8 <USB_SetTurnaroundTime+0x98>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a26      	ldr	r2, [pc, #152]	; (8004f48 <USB_SetTurnaroundTime+0x128>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d802      	bhi.n	8004eb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e025      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <USB_SetTurnaroundTime+0x128>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d906      	bls.n	8004ece <USB_SetTurnaroundTime+0xae>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <USB_SetTurnaroundTime+0x12c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d202      	bcs.n	8004ece <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ec8:	2309      	movs	r3, #9
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	e01a      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <USB_SetTurnaroundTime+0x12c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d306      	bcc.n	8004ee4 <USB_SetTurnaroundTime+0xc4>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <USB_SetTurnaroundTime+0x130>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d802      	bhi.n	8004ee4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004ede:	2308      	movs	r3, #8
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e00f      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4a1a      	ldr	r2, [pc, #104]	; (8004f50 <USB_SetTurnaroundTime+0x130>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d906      	bls.n	8004efa <USB_SetTurnaroundTime+0xda>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <USB_SetTurnaroundTime+0x134>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d202      	bcs.n	8004efa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ef4:	2307      	movs	r3, #7
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e004      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004efa:	2306      	movs	r3, #6
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e001      	b.n	8004f04 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f00:	2309      	movs	r3, #9
 8004f02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	371c      	adds	r7, #28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	00d8acbf 	.word	0x00d8acbf
 8004f34:	00e4e1c0 	.word	0x00e4e1c0
 8004f38:	00f42400 	.word	0x00f42400
 8004f3c:	01067380 	.word	0x01067380
 8004f40:	011a499f 	.word	0x011a499f
 8004f44:	01312cff 	.word	0x01312cff
 8004f48:	014ca43f 	.word	0x014ca43f
 8004f4c:	016e3600 	.word	0x016e3600
 8004f50:	01a6ab1f 	.word	0x01a6ab1f
 8004f54:	01e84800 	.word	0x01e84800

08004f58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d115      	bne.n	8004fea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004fca:	2001      	movs	r0, #1
 8004fcc:	f7fb fef6 	bl	8000dbc <HAL_Delay>
      ms++;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 f985 	bl	80062e6 <USB_GetMode>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d01e      	beq.n	8005020 <USB_SetCurrentMode+0x84>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b31      	cmp	r3, #49	; 0x31
 8004fe6:	d9f0      	bls.n	8004fca <USB_SetCurrentMode+0x2e>
 8004fe8:	e01a      	b.n	8005020 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d115      	bne.n	800501c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ffc:	2001      	movs	r0, #1
 8004ffe:	f7fb fedd 	bl	8000dbc <HAL_Delay>
      ms++;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f001 f96c 	bl	80062e6 <USB_GetMode>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <USB_SetCurrentMode+0x84>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b31      	cmp	r3, #49	; 0x31
 8005018:	d9f0      	bls.n	8004ffc <USB_SetCurrentMode+0x60>
 800501a:	e001      	b.n	8005020 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e005      	b.n	800502c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b32      	cmp	r3, #50	; 0x32
 8005024:	d101      	bne.n	800502a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005034:	b084      	sub	sp, #16
 8005036:	b580      	push	{r7, lr}
 8005038:	b086      	sub	sp, #24
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800504e:	2300      	movs	r3, #0
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	e009      	b.n	8005068 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	3340      	adds	r3, #64	; 0x40
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	2200      	movs	r2, #0
 8005060:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3301      	adds	r3, #1
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0e      	cmp	r3, #14
 800506c:	d9f2      	bls.n	8005054 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11c      	bne.n	80050ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005082:	f043 0302 	orr.w	r3, r3, #2
 8005086:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e005      	b.n	80050ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050c0:	461a      	mov	r2, r3
 80050c2:	2300      	movs	r3, #0
 80050c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050cc:	4619      	mov	r1, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	461a      	mov	r2, r3
 80050d6:	680b      	ldr	r3, [r1, #0]
 80050d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050da:	2103      	movs	r1, #3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f959 	bl	8005394 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050e2:	2110      	movs	r1, #16
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f8f1 	bl	80052cc <USB_FlushTxFifo>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f91d 	bl	8005334 <USB_FlushRxFifo>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	461a      	mov	r2, r3
 8005118:	2300      	movs	r3, #0
 800511a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005122:	461a      	mov	r2, r3
 8005124:	2300      	movs	r3, #0
 8005126:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e043      	b.n	80051b6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005144:	d118      	bne.n	8005178 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	461a      	mov	r2, r3
 800515a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e013      	b.n	800518a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516e:	461a      	mov	r2, r3
 8005170:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	e008      	b.n	800518a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	461a      	mov	r2, r3
 8005186:	2300      	movs	r3, #0
 8005188:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005196:	461a      	mov	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	461a      	mov	r2, r3
 80051aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	3301      	adds	r3, #1
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d3b7      	bcc.n	800512e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051be:	2300      	movs	r3, #0
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	e043      	b.n	800524c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051da:	d118      	bne.n	800520e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10a      	bne.n	80051f8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ee:	461a      	mov	r2, r3
 80051f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e013      	b.n	8005220 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	461a      	mov	r2, r3
 8005206:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800520a:	6013      	str	r3, [r2, #0]
 800520c:	e008      	b.n	8005220 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	461a      	mov	r2, r3
 800522e:	2300      	movs	r3, #0
 8005230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523e:	461a      	mov	r2, r3
 8005240:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005244:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	3301      	adds	r3, #1
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	429a      	cmp	r2, r3
 8005252:	d3b7      	bcc.n	80051c4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005266:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005274:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f043 0210 	orr.w	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <USB_DevInit+0x294>)
 8005288:	4313      	orrs	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800528e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f043 0208 	orr.w	r2, r3, #8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d107      	bne.n	80052b6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ae:	f043 0304 	orr.w	r3, r3, #4
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c2:	b004      	add	sp, #16
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	803c3800 	.word	0x803c3800

080052cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a13      	ldr	r2, [pc, #76]	; (8005330 <USB_FlushTxFifo+0x64>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d901      	bls.n	80052ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e01b      	b.n	8005324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	daf2      	bge.n	80052da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	019b      	lsls	r3, r3, #6
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <USB_FlushTxFifo+0x64>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e006      	b.n	8005324 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b20      	cmp	r3, #32
 8005320:	d0f0      	beq.n	8005304 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	00030d40 	.word	0x00030d40

08005334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3301      	adds	r3, #1
 8005344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4a11      	ldr	r2, [pc, #68]	; (8005390 <USB_FlushRxFifo+0x5c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e018      	b.n	8005384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	daf2      	bge.n	8005340 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2210      	movs	r2, #16
 8005362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3301      	adds	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4a08      	ldr	r2, [pc, #32]	; (8005390 <USB_FlushRxFifo+0x5c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e006      	b.n	8005384 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b10      	cmp	r3, #16
 8005380:	d0f0      	beq.n	8005364 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	00030d40 	.word	0x00030d40

08005394 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b4:	4313      	orrs	r3, r2
 80053b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b087      	sub	sp, #28
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0306 	and.w	r3, r3, #6
 80053de:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d002      	beq.n	80053ec <USB_GetDevSpeed+0x26>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2b06      	cmp	r3, #6
 80053ea:	d102      	bne.n	80053f2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80053ec:	2302      	movs	r3, #2
 80053ee:	75fb      	strb	r3, [r7, #23]
 80053f0:	e001      	b.n	80053f6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80053f2:	230f      	movs	r3, #15
 80053f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d13a      	bne.n	8005496 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	f003 030f 	and.w	r3, r3, #15
 8005430:	2101      	movs	r1, #1
 8005432:	fa01 f303 	lsl.w	r3, r1, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800543e:	4313      	orrs	r3, r2
 8005440:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d155      	bne.n	8005504 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	791b      	ldrb	r3, [r3, #4]
 8005472:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005474:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	059b      	lsls	r3, r3, #22
 800547a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800547c:	4313      	orrs	r3, r2
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	e036      	b.n	8005504 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	2101      	movs	r1, #1
 80054a8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d11a      	bne.n	8005504 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	791b      	ldrb	r3, [r3, #4]
 80054e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054ea:	430b      	orrs	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005502:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d161      	bne.n	80055f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005546:	d11f      	bne.n	8005588 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005562:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005566:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005586:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	2101      	movs	r1, #1
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	b29b      	uxth	r3, r3
 80055a0:	43db      	mvns	r3, r3
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a8:	4013      	ands	r3, r2
 80055aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b2:	69da      	ldr	r2, [r3, #28]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055cc:	4013      	ands	r3, r2
 80055ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	0159      	lsls	r1, r3, #5
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	440b      	add	r3, r1
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	4619      	mov	r1, r3
 80055ec:	4b35      	ldr	r3, [pc, #212]	; (80056c4 <USB_DeactivateEndpoint+0x1b0>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
 80055f2:	e060      	b.n	80056b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800560a:	d11f      	bne.n	800564c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800562a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	041b      	lsls	r3, r3, #16
 8005664:	43db      	mvns	r3, r3
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566c:	4013      	ands	r3, r2
 800566e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	2101      	movs	r1, #1
 8005682:	fa01 f303 	lsl.w	r3, r1, r3
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	43db      	mvns	r3, r3
 800568a:	68f9      	ldr	r1, [r7, #12]
 800568c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005690:	4013      	ands	r3, r2
 8005692:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	0159      	lsls	r1, r3, #5
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	440b      	add	r3, r1
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	4619      	mov	r1, r3
 80056b0:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <USB_DeactivateEndpoint+0x1b4>)
 80056b2:	4013      	ands	r3, r2
 80056b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	ec337800 	.word	0xec337800
 80056c8:	eff37800 	.word	0xeff37800

080056cc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b086      	sub	sp, #24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	f040 810a 	bne.w	80058fe <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d132      	bne.n	8005758 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005710:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005750:	0cdb      	lsrs	r3, r3, #19
 8005752:	04db      	lsls	r3, r3, #19
 8005754:	6113      	str	r3, [r2, #16]
 8005756:	e074      	b.n	8005842 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	0cdb      	lsrs	r3, r3, #19
 8005774:	04db      	lsls	r3, r3, #19
 8005776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005796:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800579a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6999      	ldr	r1, [r3, #24]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	440b      	add	r3, r1
 80057b4:	1e59      	subs	r1, r3, #1
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80057be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057c0:	4b9e      	ldr	r3, [pc, #632]	; (8005a3c <USB_EPStartXfer+0x370>)
 80057c2:	400b      	ands	r3, r1
 80057c4:	6939      	ldr	r1, [r7, #16]
 80057c6:	0148      	lsls	r0, r1, #5
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	4401      	add	r1, r0
 80057cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057d0:	4313      	orrs	r3, r2
 80057d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ea:	6939      	ldr	r1, [r7, #16]
 80057ec:	0148      	lsls	r0, r1, #5
 80057ee:	6979      	ldr	r1, [r7, #20]
 80057f0:	4401      	add	r1, r0
 80057f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057f6:	4313      	orrs	r3, r2
 80057f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	791b      	ldrb	r3, [r3, #4]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d11f      	bne.n	8005842 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005820:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005840:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005860:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	791b      	ldrb	r3, [r3, #4]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d015      	beq.n	8005896 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 8106 	beq.w	8005a80 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	f003 030f 	and.w	r3, r3, #15
 8005884:	2101      	movs	r1, #1
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	6979      	ldr	r1, [r7, #20]
 800588c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005890:	4313      	orrs	r3, r2
 8005892:	634b      	str	r3, [r1, #52]	; 0x34
 8005894:	e0f4      	b.n	8005a80 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d110      	bne.n	80058c8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e00f      	b.n	80058e8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058e6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	6919      	ldr	r1, [r3, #16]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fa94 	bl	8005e24 <USB_WritePacket>
 80058fc:	e0c0      	b.n	8005a80 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	440a      	add	r2, r1
 8005914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005918:	0cdb      	lsrs	r3, r3, #19
 800591a:	04db      	lsls	r3, r3, #19
 800591c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	015a      	lsls	r2, r3, #5
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4413      	add	r3, r2
 8005926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	0151      	lsls	r1, r2, #5
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	440a      	add	r2, r1
 8005934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800593c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005940:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d123      	bne.n	8005992 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005960:	6939      	ldr	r1, [r7, #16]
 8005962:	0148      	lsls	r0, r1, #5
 8005964:	6979      	ldr	r1, [r7, #20]
 8005966:	4401      	add	r1, r0
 8005968:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800596c:	4313      	orrs	r3, r2
 800596e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	0151      	lsls	r1, r2, #5
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	440a      	add	r2, r1
 8005986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800598a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800598e:	6113      	str	r3, [r2, #16]
 8005990:	e037      	b.n	8005a02 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	4413      	add	r3, r2
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	89fa      	ldrh	r2, [r7, #14]
 80059ae:	fb03 f202 	mul.w	r2, r3, r2
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	89fb      	ldrh	r3, [r7, #14]
 80059c6:	04d9      	lsls	r1, r3, #19
 80059c8:	4b1c      	ldr	r3, [pc, #112]	; (8005a3c <USB_EPStartXfer+0x370>)
 80059ca:	400b      	ands	r3, r1
 80059cc:	6939      	ldr	r1, [r7, #16]
 80059ce:	0148      	lsls	r0, r1, #5
 80059d0:	6979      	ldr	r1, [r7, #20]
 80059d2:	4401      	add	r1, r0
 80059d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059d8:	4313      	orrs	r3, r2
 80059da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	0148      	lsls	r0, r1, #5
 80059f6:	6979      	ldr	r1, [r7, #20]
 80059f8:	4401      	add	r1, r0
 80059fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059fe:	4313      	orrs	r3, r2
 8005a00:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	791b      	ldrb	r3, [r3, #4]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d12a      	bne.n	8005a60 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d112      	bne.n	8005a40 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	e011      	b.n	8005a60 <USB_EPStartXfer+0x394>
 8005a3c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	0151      	lsls	r1, r2, #5
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	440a      	add	r2, r1
 8005a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	0151      	lsls	r1, r2, #5
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	440a      	add	r2, r1
 8005a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop

08005a8c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	785b      	ldrb	r3, [r3, #1]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	f040 80ab 	bne.w	8005c00 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d132      	bne.n	8005b18 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ad0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b10:	0cdb      	lsrs	r3, r3, #19
 8005b12:	04db      	lsls	r3, r3, #19
 8005b14:	6113      	str	r3, [r2, #16]
 8005b16:	e04e      	b.n	8005bb6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	0cdb      	lsrs	r3, r3, #19
 8005b34:	04db      	lsls	r3, r3, #19
 8005b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	699a      	ldr	r2, [r3, #24]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d903      	bls.n	8005b70 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	0148      	lsls	r0, r1, #5
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	4401      	add	r1, r0
 8005bae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	0151      	lsls	r1, r2, #5
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	440a      	add	r2, r1
 8005bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d071      	beq.n	8005cc2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	2101      	movs	r1, #1
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	634b      	str	r3, [r1, #52]	; 0x34
 8005bfe:	e060      	b.n	8005cc2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1a:	0cdb      	lsrs	r3, r3, #19
 8005c1c:	04db      	lsls	r3, r3, #19
 8005c1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	0151      	lsls	r1, r2, #5
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	440a      	add	r2, r1
 8005c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c42:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d003      	beq.n	8005c54 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	0151      	lsls	r1, r2, #5
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	440a      	add	r2, r1
 8005c72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c88:	691a      	ldr	r2, [r3, #16]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c92:	68b9      	ldr	r1, [r7, #8]
 8005c94:	0148      	lsls	r0, r1, #5
 8005c96:	68f9      	ldr	r1, [r7, #12]
 8005c98:	4401      	add	r1, r0
 8005c9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d14a      	bne.n	8005d84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d06:	f040 8086 	bne.w	8005e16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	0151      	lsls	r1, r2, #5
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	440a      	add	r2, r1
 8005d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d902      	bls.n	8005d68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	75fb      	strb	r3, [r7, #23]
          break;
 8005d66:	e056      	b.n	8005e16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d80:	d0e7      	beq.n	8005d52 <USB_EPStopXfer+0x82>
 8005d82:	e048      	b.n	8005e16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d9c:	d13b      	bne.n	8005e16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005de4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f242 7210 	movw	r2, #10000	; 0x2710
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d902      	bls.n	8005dfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	75fb      	strb	r3, [r7, #23]
          break;
 8005dfa:	e00c      	b.n	8005e16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e14:	d0e7      	beq.n	8005de6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b089      	sub	sp, #36	; 0x24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	460b      	mov	r3, r1
 8005e34:	71fb      	strb	r3, [r7, #7]
 8005e36:	4613      	mov	r3, r2
 8005e38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005e42:	88bb      	ldrh	r3, [r7, #4]
 8005e44:	3303      	adds	r3, #3
 8005e46:	089b      	lsrs	r3, r3, #2
 8005e48:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	e018      	b.n	8005e82 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	031a      	lsls	r2, r3, #12
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	3301      	adds	r3, #1
 8005e68:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	3301      	adds	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d3e2      	bcc.n	8005e50 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3724      	adds	r7, #36	; 0x24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b08b      	sub	sp, #44	; 0x2c
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	e014      	b.n	8005eee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	3301      	adds	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	3301      	adds	r3, #1
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	3301      	adds	r3, #1
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	6a3a      	ldr	r2, [r7, #32]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d3e6      	bcc.n	8005ec4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ef6:	8bfb      	ldrh	r3, [r7, #30]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01e      	beq.n	8005f3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f06:	461a      	mov	r2, r3
 8005f08:	f107 0310 	add.w	r3, r7, #16
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	701a      	strb	r2, [r3, #0]
      i++;
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	3301      	adds	r3, #1
 8005f26:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f2e:	8bfb      	ldrh	r3, [r7, #30]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f34:	8bfb      	ldrh	r3, [r7, #30]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1ea      	bne.n	8005f10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	372c      	adds	r7, #44	; 0x2c
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d12c      	bne.n	8005fbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	db12      	blt.n	8005f9c <USB_EPSetStall+0x54>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00f      	beq.n	8005f9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	015a      	lsls	r2, r3, #5
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4413      	add	r3, r2
 8005fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	0151      	lsls	r1, r2, #5
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	440a      	add	r2, r1
 8005fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	e02b      	b.n	8006016 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	db12      	blt.n	8005ff6 <USB_EPSetStall+0xae>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00f      	beq.n	8005ff6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ff4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006010:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006014:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d128      	bne.n	8006092 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	0151      	lsls	r1, r2, #5
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	440a      	add	r2, r1
 8006056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800605a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800605e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	791b      	ldrb	r3, [r3, #4]
 8006064:	2b03      	cmp	r3, #3
 8006066:	d003      	beq.n	8006070 <USB_EPClearStall+0x4c>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	791b      	ldrb	r3, [r3, #4]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d138      	bne.n	80060e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800608a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	e027      	b.n	80060e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	791b      	ldrb	r3, [r3, #4]
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d003      	beq.n	80060c2 <USB_EPClearStall+0x9e>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	791b      	ldrb	r3, [r3, #4]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d10f      	bne.n	80060e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800610e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006112:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800612a:	4313      	orrs	r3, r2
 800612c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800616a:	f023 0302 	bic.w	r3, r3, #2
 800616e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006198:	f023 0303 	bic.w	r3, r3, #3
 800619c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ac:	f043 0302 	orr.w	r3, r3, #2
 80061b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4013      	ands	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061d8:	68fb      	ldr	r3, [r7, #12]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b085      	sub	sp, #20
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	4013      	ands	r3, r2
 8006208:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	0c1b      	lsrs	r3, r3, #16
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	b29b      	uxth	r3, r3
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	4013      	ands	r3, r2
 800627a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800627c:	68bb      	ldr	r3, [r7, #8]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800628a:	b480      	push	{r7}
 800628c:	b087      	sub	sp, #28
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062ae:	78fb      	ldrb	r3, [r7, #3]
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ba:	01db      	lsls	r3, r3, #7
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4013      	ands	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062d8:	68bb      	ldr	r3, [r7, #8]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0301 	and.w	r3, r3, #1
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800631c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006320:	f023 0307 	bic.w	r3, r3, #7
 8006324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	333c      	adds	r3, #60	; 0x3c
 800635a:	3304      	adds	r3, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <USB_EP0_OutStart+0x8c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d90a      	bls.n	800637e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006374:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006378:	d101      	bne.n	800637e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e024      	b.n	80063c8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006384:	461a      	mov	r2, r3
 8006386:	2300      	movs	r3, #0
 8006388:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800639c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ac:	f043 0318 	orr.w	r3, r3, #24
 80063b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80063c4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	4f54300a 	.word	0x4f54300a

080063d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3301      	adds	r3, #1
 80063e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	4a13      	ldr	r2, [pc, #76]	; (800643c <USB_CoreReset+0x64>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d901      	bls.n	80063f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e01b      	b.n	800642e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	daf2      	bge.n	80063e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f043 0201 	orr.w	r2, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3301      	adds	r3, #1
 8006412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a09      	ldr	r2, [pc, #36]	; (800643c <USB_CoreReset+0x64>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e006      	b.n	800642e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	2b01      	cmp	r3, #1
 800642a:	d0f0      	beq.n	800640e <USB_CoreReset+0x36>

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	00030d40 	.word	0x00030d40

08006440 <midi_note_off>:
 */

#include <midi.h>


uint16_t midi_note_off(MIDI_t *MIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	4603      	mov	r3, r0
 8006450:	70fb      	strb	r3, [r7, #3]
 8006452:	460b      	mov	r3, r1
 8006454:	70bb      	strb	r3, [r7, #2]
 8006456:	4613      	mov	r3, r2
 8006458:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];
	midiData[0] = NOTE_OFF + channel;
 800645a:	78fb      	ldrb	r3, [r7, #3]
 800645c:	3b80      	subs	r3, #128	; 0x80
 800645e:	b2db      	uxtb	r3, r3
 8006460:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 8006462:	78bb      	ldrb	r3, [r7, #2]
 8006464:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 8006466:	787b      	ldrb	r3, [r7, #1]
 8006468:	73bb      	strb	r3, [r7, #14]
	return MIDI->tx_bytes(midiData, 3);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f107 020c 	add.w	r2, r7, #12
 8006472:	2103      	movs	r1, #3
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	4603      	mov	r3, r0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <midi_note_on>:
uint16_t midi_note_on(MIDI_t *MIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	4608      	mov	r0, r1
 800648c:	4611      	mov	r1, r2
 800648e:	461a      	mov	r2, r3
 8006490:	4603      	mov	r3, r0
 8006492:	70fb      	strb	r3, [r7, #3]
 8006494:	460b      	mov	r3, r1
 8006496:	70bb      	strb	r3, [r7, #2]
 8006498:	4613      	mov	r3, r2
 800649a:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];
	midiData[0] = NOTE_ON + channel;
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	3b70      	subs	r3, #112	; 0x70
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 80064a4:	78bb      	ldrb	r3, [r7, #2]
 80064a6:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 80064a8:	787b      	ldrb	r3, [r7, #1]
 80064aa:	73bb      	strb	r3, [r7, #14]
	return MIDI->tx_bytes(midiData, 3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f107 020c 	add.w	r2, r7, #12
 80064b4:	2103      	movs	r1, #3
 80064b6:	4610      	mov	r0, r2
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <_usbmidi_port_tx_bytes>:
};

extern UART_HandleTypeDef huart2;


uint16_t _usbmidi_port_tx_bytes(uint8_t *data, uint16_t len){
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	807b      	strh	r3, [r7, #2]
	MIDI_DataTx(data, len);
 80064d0:	887b      	ldrh	r3, [r7, #2]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f002 f96d 	bl	80087b4 <MIDI_DataTx>
	HAL_Delay(0); // for some reason this is needed. Will investigate later.
 80064da:	2000      	movs	r0, #0
 80064dc:	f7fa fc6e 	bl	8000dbc <HAL_Delay>
	// Maybe problem with time-stamping.
	//can also use a FIFO and send multiple packets at once.
	//This will also ensure time-stamp is same for all packets sent at once.

	return 0;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <_usbmidi_port_rx_bytes>:
uint16_t _usbmidi_port_rx_bytes(uint8_t *data, uint16_t len){
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	807b      	strh	r3, [r7, #2]
	MIDI_DataRx(data, len);
 80064f6:	887b      	ldrh	r3, [r7, #2]
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 f8fa 	bl	80086f4 <MIDI_DataRx>
	return 0;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <_uartmidi_port_tx_bytes>:


uint16_t _uartmidi_port_tx_bytes(uint8_t *data, uint16_t len){
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, data, len, 100);
 8006518:	887a      	ldrh	r2, [r7, #2]
 800651a:	2364      	movs	r3, #100	; 0x64
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4804      	ldr	r0, [pc, #16]	; (8006530 <_uartmidi_port_tx_bytes+0x24>)
 8006520:	f7fd ff56 	bl	80043d0 <HAL_UART_Transmit>
	return 0;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000288 	.word	0x20000288

08006534 <_uartmidi_port_rx_bytes>:
uint16_t _uartmidi_port_rx_bytes(uint8_t *data, uint16_t len){
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	807b      	strh	r3, [r7, #2]
	return 0;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <usbmidi_note_off>:
#include "usbmidi.h"




uint16_t usbmidi_note_off(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 800654e:	b580      	push	{r7, lr}
 8006550:	b086      	sub	sp, #24
 8006552:	af02      	add	r7, sp, #8
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	4608      	mov	r0, r1
 8006558:	4611      	mov	r1, r2
 800655a:	461a      	mov	r2, r3
 800655c:	4603      	mov	r3, r0
 800655e:	70fb      	strb	r3, [r7, #3]
 8006560:	460b      	mov	r3, r1
 8006562:	70bb      	strb	r3, [r7, #2]
 8006564:	4613      	mov	r3, r2
 8006566:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];

	midiData[0] = NOTE_OFF + channel;
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	3b80      	subs	r3, #128	; 0x80
 800656c:	b2db      	uxtb	r3, r3
 800656e:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 8006570:	78bb      	ldrb	r3, [r7, #2]
 8006572:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 8006574:	787b      	ldrb	r3, [r7, #1]
 8006576:	73bb      	strb	r3, [r7, #14]

	usbmidi_tx(USBMIDI, USBMIDI->CN, CIN_NOTE_OFF, midiData, 3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7a19      	ldrb	r1, [r3, #8]
 800657c:	f107 030c 	add.w	r3, r7, #12
 8006580:	2203      	movs	r2, #3
 8006582:	9200      	str	r2, [sp, #0]
 8006584:	2208      	movs	r2, #8
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f83c 	bl	8006604 <usbmidi_tx>

}
 800658c:	bf00      	nop
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <usbmidi_note_on>:
uint16_t usbmidi_note_on(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 8006596:	b580      	push	{r7, lr}
 8006598:	b086      	sub	sp, #24
 800659a:	af02      	add	r7, sp, #8
 800659c:	6078      	str	r0, [r7, #4]
 800659e:	4608      	mov	r0, r1
 80065a0:	4611      	mov	r1, r2
 80065a2:	461a      	mov	r2, r3
 80065a4:	4603      	mov	r3, r0
 80065a6:	70fb      	strb	r3, [r7, #3]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70bb      	strb	r3, [r7, #2]
 80065ac:	4613      	mov	r3, r2
 80065ae:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];

	midiData[0] = NOTE_ON + channel;
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	3b70      	subs	r3, #112	; 0x70
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 80065b8:	78bb      	ldrb	r3, [r7, #2]
 80065ba:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 80065bc:	787b      	ldrb	r3, [r7, #1]
 80065be:	73bb      	strb	r3, [r7, #14]

	usbmidi_tx(USBMIDI, USBMIDI->CN, CIN_NOTE_ON, midiData, 3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7a19      	ldrb	r1, [r3, #8]
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	2203      	movs	r2, #3
 80065ca:	9200      	str	r2, [sp, #0]
 80065cc:	2209      	movs	r2, #9
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f818 	bl	8006604 <usbmidi_tx>
}
 80065d4:	bf00      	nop
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <usbmidi_tx_bytes>:
/*-----------------------------------------------------------------------------*/




uint16_t usbmidi_tx_bytes(USBMIDI_t *USBMIDI,uint8_t *data, uint16_t len ){
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	4613      	mov	r3, r2
 80065ea:	80fb      	strh	r3, [r7, #6]
	return USBMIDI->tx_bytes(data,len);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	88fa      	ldrh	r2, [r7, #6]
 80065f2:	4611      	mov	r1, r2
 80065f4:	68b8      	ldr	r0, [r7, #8]
 80065f6:	4798      	blx	r3
 80065f8:	4603      	mov	r3, r0


}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <usbmidi_tx>:
uint16_t usbmidi_rx_bytes(USBMIDI_t *USBMIDI,uint8_t *data, uint16_t len ){
	return USBMIDI->rx_bytes(data,len);
}

uint16_t usbmidi_tx(USBMIDI_t *USBMIDI, uint8_t CN, USBMIDI_CIN_t CIN, uint8_t *midiData, uint16_t len){
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	460b      	mov	r3, r1
 8006610:	72fb      	strb	r3, [r7, #11]
 8006612:	4613      	mov	r3, r2
 8006614:	72bb      	strb	r3, [r7, #10]
	uint8_t data[4];

	data[0] = (CN << 4 | CIN);
 8006616:	7afb      	ldrb	r3, [r7, #11]
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	b25a      	sxtb	r2, r3
 800661c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006620:	4313      	orrs	r3, r2
 8006622:	b25b      	sxtb	r3, r3
 8006624:	b2db      	uxtb	r3, r3
 8006626:	753b      	strb	r3, [r7, #20]

	switch (CIN){
 8006628:	7abb      	ldrb	r3, [r7, #10]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	f200 810a 	bhi.w	8006844 <usbmidi_tx+0x240>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <usbmidi_tx+0x34>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	08006845 	.word	0x08006845
 800663c:	08006845 	.word	0x08006845
 8006640:	08006679 	.word	0x08006679
 8006644:	08006699 	.word	0x08006699
 8006648:	080066bb 	.word	0x080066bb
 800664c:	080066dd 	.word	0x080066dd
 8006650:	080066fb 	.word	0x080066fb
 8006654:	0800671b 	.word	0x0800671b
 8006658:	0800673d 	.word	0x0800673d
 800665c:	0800675f 	.word	0x0800675f
 8006660:	08006781 	.word	0x08006781
 8006664:	080067a3 	.word	0x080067a3
 8006668:	080067c5 	.word	0x080067c5
 800666c:	080067e5 	.word	0x080067e5
 8006670:	08006805 	.word	0x08006805
 8006674:	08006827 	.word	0x08006827
	case	CIN_MISC_FUNC_CODES: break;
	case	CIN_CABLE_EVENTS: break;
	case	CIN_TWO_BYTE_SYS_COMMON_MSG:
		data[1] = midiData[0];
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	785b      	ldrb	r3, [r3, #1]
 8006682:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006684:	2300      	movs	r3, #0
 8006686:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006688:	f107 0314 	add.w	r3, r7, #20
 800668c:	2204      	movs	r2, #4
 800668e:	4619      	mov	r1, r3
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff ffa4 	bl	80065de <usbmidi_tx_bytes>
		break;
 8006696:	e0d6      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_THREE_BYTE_SYS_COMMON_MSG:
		data[1] = midiData[0];
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	785b      	ldrb	r3, [r3, #1]
 80066a2:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	789b      	ldrb	r3, [r3, #2]
 80066a8:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 80066aa:	f107 0314 	add.w	r3, r7, #20
 80066ae:	2204      	movs	r2, #4
 80066b0:	4619      	mov	r1, r3
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff ff93 	bl	80065de <usbmidi_tx_bytes>
		break;
 80066b8:	e0c5      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_SYSEX_STARTS_OR_CONT:
		data[1] = midiData[0];
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	789b      	ldrb	r3, [r3, #2]
 80066ca:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 80066cc:	f107 0314 	add.w	r3, r7, #20
 80066d0:	2204      	movs	r2, #4
 80066d2:	4619      	mov	r1, r3
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f7ff ff82 	bl	80065de <usbmidi_tx_bytes>
		break;
 80066da:	e0b4      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_SINGLE_BYTE_SYS_COMMON_MSG:
		data[1] = midiData[0];
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	757b      	strb	r3, [r7, #21]
		data[2] = 0x00;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 80066e6:	2300      	movs	r3, #0
 80066e8:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	2204      	movs	r2, #4
 80066f0:	4619      	mov	r1, r3
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff73 	bl	80065de <usbmidi_tx_bytes>
		break;
 80066f8:	e0a5      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_SYSEX_ENDS_FOLLOWING_TWO_BYTES:
		data[1] = midiData[0];
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006706:	2300      	movs	r3, #0
 8006708:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 800670a:	f107 0314 	add.w	r3, r7, #20
 800670e:	2204      	movs	r2, #4
 8006710:	4619      	mov	r1, r3
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f7ff ff63 	bl	80065de <usbmidi_tx_bytes>
		break;
 8006718:	e095      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_SYSEX_ENDS_FOLLOWING_THREE_BYTES:
		data[1] = midiData[0];
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	789b      	ldrb	r3, [r3, #2]
 800672a:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 800672c:	f107 0314 	add.w	r3, r7, #20
 8006730:	2204      	movs	r2, #4
 8006732:	4619      	mov	r1, r3
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff ff52 	bl	80065de <usbmidi_tx_bytes>
		break;
 800673a:	e084      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_NOTE_OFF:
		data[1] = midiData[0];
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	785b      	ldrb	r3, [r3, #1]
 8006746:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	789b      	ldrb	r3, [r3, #2]
 800674c:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 800674e:	f107 0314 	add.w	r3, r7, #20
 8006752:	2204      	movs	r2, #4
 8006754:	4619      	mov	r1, r3
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f7ff ff41 	bl	80065de <usbmidi_tx_bytes>
		break;
 800675c:	e073      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_NOTE_ON:
		data[1] = midiData[0];
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	789b      	ldrb	r3, [r3, #2]
 800676e:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006770:	f107 0314 	add.w	r3, r7, #20
 8006774:	2204      	movs	r2, #4
 8006776:	4619      	mov	r1, r3
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff ff30 	bl	80065de <usbmidi_tx_bytes>
		break;
 800677e:	e062      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_POLY_KEY_PRESS:
		data[1] = midiData[0];
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	789b      	ldrb	r3, [r3, #2]
 8006790:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006792:	f107 0314 	add.w	r3, r7, #20
 8006796:	2204      	movs	r2, #4
 8006798:	4619      	mov	r1, r3
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff ff1f 	bl	80065de <usbmidi_tx_bytes>
		break;
 80067a0:	e051      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_CONTROL_CHANGE:
		data[1] = midiData[0];
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	785b      	ldrb	r3, [r3, #1]
 80067ac:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	789b      	ldrb	r3, [r3, #2]
 80067b2:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 80067b4:	f107 0314 	add.w	r3, r7, #20
 80067b8:	2204      	movs	r2, #4
 80067ba:	4619      	mov	r1, r3
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff ff0e 	bl	80065de <usbmidi_tx_bytes>
		break;
 80067c2:	e040      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_PROGRAM_CHANGE:
		data[1] = midiData[0];
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 80067d4:	f107 0314 	add.w	r3, r7, #20
 80067d8:	2204      	movs	r2, #4
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7ff fefe 	bl	80065de <usbmidi_tx_bytes>
		break;
 80067e2:	e030      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_CHANNEL_PRESSURE:
		data[1] = midiData[0];
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 80067f0:	2300      	movs	r3, #0
 80067f2:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	2204      	movs	r2, #4
 80067fa:	4619      	mov	r1, r3
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff feee 	bl	80065de <usbmidi_tx_bytes>
		break;
 8006802:	e020      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_PITCHBEND_CHANGE:
		data[1] = midiData[0];
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	789b      	ldrb	r3, [r3, #2]
 8006814:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006816:	f107 0314 	add.w	r3, r7, #20
 800681a:	2204      	movs	r2, #4
 800681c:	4619      	mov	r1, r3
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff fedd 	bl	80065de <usbmidi_tx_bytes>
		break;
 8006824:	e00f      	b.n	8006846 <usbmidi_tx+0x242>
	case	CIN_SINGLE_BYTE:
		data[1] = midiData[0];
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	757b      	strb	r3, [r7, #21]
		data[2] = 0x00;
 800682c:	2300      	movs	r3, #0
 800682e:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006830:	2300      	movs	r3, #0
 8006832:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006834:	f107 0314 	add.w	r3, r7, #20
 8006838:	2204      	movs	r2, #4
 800683a:	4619      	mov	r1, r3
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f7ff fece 	bl	80065de <usbmidi_tx_bytes>
		break;
 8006842:	e000      	b.n	8006846 <usbmidi_tx+0x242>
	default: break;
 8006844:	bf00      	nop

	}

}
 8006846:	bf00      	nop
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 800685c:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8006860:	f002 fbfe 	bl	8009060 <USBD_static_malloc>
 8006864:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <USBD_AUDIO_Init+0x28>
  {
    pdev->pClassData = NULL;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006874:	2302      	movs	r3, #2
 8006876:	e04b      	b.n	8006910 <USBD_AUDIO_Init+0xc0>
  }

  pdev->pClassData = (void *)haudio;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7c1b      	ldrb	r3, [r3, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d104      	bne.n	8006892 <USBD_AUDIO_Init+0x42>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8006890:	e003      	b.n	800689a <USBD_AUDIO_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800689a:	2358      	movs	r3, #88	; 0x58
 800689c:	2201      	movs	r2, #1
 800689e:	2101      	movs	r1, #1
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f002 f9c9 	bl	8008c38 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ba:	2203      	movs	r2, #3
 80068bc:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
  haudio->wr_ptr = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88
  haudio->rd_ptr = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8a3 2b86 	strh.w	r2, [r3, #2950]	; 0xb86
  haudio->rd_enable = 0U;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2200      	movs	r2, #0
 80068ee:	2146      	movs	r1, #70	; 0x46
 80068f0:	f245 6054 	movw	r0, #22100	; 0x5654
 80068f4:	4798      	blx	r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <USBD_AUDIO_Init+0xb0>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e007      	b.n	8006910 <USBD_AUDIO_Init+0xc0>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	1d1a      	adds	r2, r3, #4
 8006904:	2358      	movs	r3, #88	; 0x58
 8006906:	2101      	movs	r1, #1
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 fb0f 	bl	8008f2c <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	460b      	mov	r3, r1
 8006922:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8006924:	2101      	movs	r1, #1
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f002 f9c4 	bl	8008cb4 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00f      	beq.n	8006966 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2000      	movs	r0, #0
 8006950:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006958:	4618      	mov	r0, r3
 800695a:	f002 fb8f 	bl	800907c <USBD_static_free>
    pdev->pClassData = NULL;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006988:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <USBD_AUDIO_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006990:	2303      	movs	r3, #3
 8006992:	e0b0      	b.n	8006af6 <USBD_AUDIO_Setup+0x186>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01a      	beq.n	80069d6 <USBD_AUDIO_Setup+0x66>
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	f040 80a0 	bne.w	8006ae6 <USBD_AUDIO_Setup+0x176>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	785b      	ldrb	r3, [r3, #1]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d006      	beq.n	80069bc <USBD_AUDIO_Setup+0x4c>
 80069ae:	2b81      	cmp	r3, #129	; 0x81
 80069b0:	d109      	bne.n	80069c6 <USBD_AUDIO_Setup+0x56>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f9ac 	bl	8006d12 <AUDIO_REQ_GetCurrent>
          break;
 80069ba:	e00b      	b.n	80069d4 <USBD_AUDIO_Setup+0x64>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f9cb 	bl	8006d5a <AUDIO_REQ_SetCurrent>
          break;
 80069c4:	e006      	b.n	80069d4 <USBD_AUDIO_Setup+0x64>

        default:
          USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fbd7 	bl	800817c <USBD_CtlError>
          ret = USBD_FAIL;
 80069ce:	2303      	movs	r3, #3
 80069d0:	75fb      	strb	r3, [r7, #23]
          break;
 80069d2:	bf00      	nop
      }
      break;
 80069d4:	e08e      	b.n	8006af4 <USBD_AUDIO_Setup+0x184>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b0b      	cmp	r3, #11
 80069dc:	d878      	bhi.n	8006ad0 <USBD_AUDIO_Setup+0x160>
 80069de:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <USBD_AUDIO_Setup+0x74>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	08006a15 	.word	0x08006a15
 80069e8:	08006adf 	.word	0x08006adf
 80069ec:	08006ad1 	.word	0x08006ad1
 80069f0:	08006ad1 	.word	0x08006ad1
 80069f4:	08006ad1 	.word	0x08006ad1
 80069f8:	08006ad1 	.word	0x08006ad1
 80069fc:	08006a3f 	.word	0x08006a3f
 8006a00:	08006ad1 	.word	0x08006ad1
 8006a04:	08006ad1 	.word	0x08006ad1
 8006a08:	08006ad1 	.word	0x08006ad1
 8006a0c:	08006a69 	.word	0x08006a69
 8006a10:	08006a91 	.word	0x08006a91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d107      	bne.n	8006a30 <USBD_AUDIO_Setup+0xc0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a20:	f107 0308 	add.w	r3, r7, #8
 8006a24:	2202      	movs	r2, #2
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f001 fc18 	bl	800825e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a2e:	e059      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006a30:	6839      	ldr	r1, [r7, #0]
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fba2 	bl	800817c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006a3c:	e052      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	885b      	ldrh	r3, [r3, #2]
 8006a42:	0a1b      	lsrs	r3, r3, #8
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b21      	cmp	r3, #33	; 0x21
 8006a48:	d14b      	bne.n	8006ae2 <USBD_AUDIO_Setup+0x172>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8006a4a:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <USBD_AUDIO_Setup+0x190>)
 8006a4c:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	88db      	ldrh	r3, [r3, #6]
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	bf28      	it	cs
 8006a56:	2309      	movcs	r3, #9
 8006a58:	817b      	strh	r3, [r7, #10]

            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a5a:	897b      	ldrh	r3, [r7, #10]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fbfc 	bl	800825e <USBD_CtlSendData>
          }
          break;
 8006a66:	e03c      	b.n	8006ae2 <USBD_AUDIO_Setup+0x172>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b03      	cmp	r3, #3
 8006a72:	d106      	bne.n	8006a82 <USBD_AUDIO_Setup+0x112>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2201      	movs	r2, #1
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 fbef 	bl	800825e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a80:	e030      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fb79 	bl	800817c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a8e:	e029      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d112      	bne.n	8006ac2 <USBD_AUDIO_Setup+0x152>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	885b      	ldrh	r3, [r3, #2]
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d806      	bhi.n	8006ab4 <USBD_AUDIO_Setup+0x144>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ab2:	e017      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>
              USBD_CtlError(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 fb60 	bl	800817c <USBD_CtlError>
              ret = USBD_FAIL;
 8006abc:	2303      	movs	r3, #3
 8006abe:	75fb      	strb	r3, [r7, #23]
          break;
 8006ac0:	e010      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fb59 	bl	800817c <USBD_CtlError>
            ret = USBD_FAIL;
 8006aca:	2303      	movs	r3, #3
 8006acc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ace:	e009      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 fb52 	bl	800817c <USBD_CtlError>
          ret = USBD_FAIL;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	75fb      	strb	r3, [r7, #23]
          break;
 8006adc:	e002      	b.n	8006ae4 <USBD_AUDIO_Setup+0x174>
          break;
 8006ade:	bf00      	nop
 8006ae0:	e008      	b.n	8006af4 <USBD_AUDIO_Setup+0x184>
          break;
 8006ae2:	bf00      	nop
      }
      break;
 8006ae4:	e006      	b.n	8006af4 <USBD_AUDIO_Setup+0x184>
    default:
      USBD_CtlError(pdev, req);
 8006ae6:	6839      	ldr	r1, [r7, #0]
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fb47 	bl	800817c <USBD_CtlError>
      ret = USBD_FAIL;
 8006aee:	2303      	movs	r3, #3
 8006af0:	75fb      	strb	r3, [r7, #23]
      break;
 8006af2:	bf00      	nop
  }

  return (uint8_t)ret;
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	2000006a 	.word	0x2000006a

08006b04 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	226d      	movs	r2, #109	; 0x6d
 8006b10:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8006b12:	4b03      	ldr	r3, [pc, #12]	; (8006b20 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000058 	.word	0x20000058

08006b24 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b4c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <USBD_AUDIO_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e025      	b.n	8006ba4 <USBD_AUDIO_EP0_RxReady+0x66>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5e:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	; 0xb8a
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d11d      	bne.n	8006ba2 <USBD_AUDIO_EP0_RxReady+0x64>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6c:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	; 0xbcc
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d116      	bne.n	8006ba2 <USBD_AUDIO_EP0_RxReady+0x64>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b82:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	; 0xb8b
 8006b86:	4610      	mov	r0, r2
 8006b88:	4798      	blx	r3
      haudio->control.cmd = 0U;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
      haudio->control.len = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    }
  }

  return (uint8_t)USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b083      	sub	sp, #12
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c1e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <USBD_AUDIO_DataOut+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e06f      	b.n	8006d0a <USBD_AUDIO_DataOut+0xfe>
  }

  if (epnum == AUDIO_OUT_EP)
 8006c2a:	78fb      	ldrb	r3, [r7, #3]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d16b      	bne.n	8006d08 <USBD_AUDIO_DataOut+0xfc>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f002 f9b1 	bl	8008f9c <USBD_LL_GetRxDataSize>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c4c:	f8b2 2b88 	ldrh.w	r2, [r2, #2952]	; 0xb88
 8006c50:	4611      	mov	r1, r2
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	440a      	add	r2, r1
 8006c56:	1d10      	adds	r0, r2, #4
 8006c58:	8979      	ldrh	r1, [r7, #10]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	4798      	blx	r3
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c64:	f8b3 2b88 	ldrh.w	r2, [r3, #2952]	; 0xb88
 8006c68:	897b      	ldrh	r3, [r7, #10]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c74:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c7e:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8006c82:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8006c86:	d11c      	bne.n	8006cc2 <USBD_AUDIO_DataOut+0xb6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9a:	f893 3b84 	ldrb.w	r3, [r3, #2948]	; 0xb84
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d10f      	bne.n	8006cc2 <USBD_AUDIO_DataOut+0xb6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	1d10      	adds	r0, r2, #4
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8006cb4:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cc8:	f893 3b85 	ldrb.w	r3, [r3, #2949]	; 0xb85
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <USBD_AUDIO_DataOut+0xe0>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cd6:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8006cda:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8006cde:	d105      	bne.n	8006cec <USBD_AUDIO_DataOut+0xe0>
      {
        haudio->rd_enable = 1U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cf2:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8006cf6:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	1d1a      	adds	r2, r3, #4
 8006cfe:	2358      	movs	r3, #88	; 0x58
 8006d00:	2101      	movs	r1, #1
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f002 f912 	bl	8008f2c <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d22:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d013      	beq.n	8006d52 <AUDIO_REQ_GetCurrent+0x40>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006d30:	330b      	adds	r3, #11
 8006d32:	2240      	movs	r2, #64	; 0x40
 8006d34:	2100      	movs	r1, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f002 f9da 	bl	80090f0 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006d42:	330b      	adds	r3, #11
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	88d2      	ldrh	r2, [r2, #6]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f001 fa87 	bl	800825e <USBD_CtlSendData>
 8006d50:	e000      	b.n	8006d54 <AUDIO_REQ_GetCurrent+0x42>
    return;
 8006d52:	bf00      	nop
}
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d026      	beq.n	8006dc0 <AUDIO_REQ_SetCurrent+0x66>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	88db      	ldrh	r3, [r3, #6]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d023      	beq.n	8006dc2 <AUDIO_REQ_SetCurrent+0x68>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8006d80:	330b      	adds	r3, #11
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	88d2      	ldrh	r2, [r2, #6]
 8006d86:	4619      	mov	r1, r3
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 fa94 	bl	80082b6 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	88db      	ldrh	r3, [r3, #6]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da6:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	889b      	ldrh	r3, [r3, #4]
 8006dae:	0a1b      	lsrs	r3, r3, #8
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dba:	f883 2bcc 	strb.w	r2, [r3, #3020]	; 0xbcc
 8006dbe:	e000      	b.n	8006dc2 <AUDIO_REQ_SetCurrent+0x68>
    return;
 8006dc0:	bf00      	nop
  }
}
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	220a      	movs	r2, #10
 8006dd4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8006dd6:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	200000c8 	.word	0x200000c8

08006de8 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e004      	b.n	8006e06 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8006e20:	4a0c      	ldr	r2, [pc, #48]	; (8006e54 <USBD_MIDI_Init+0x40>)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 8006e26:	2340      	movs	r3, #64	; 0x40
 8006e28:	2202      	movs	r2, #2
 8006e2a:	2181      	movs	r1, #129	; 0x81
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f001 ff03 	bl	8008c38 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8006e32:	2340      	movs	r3, #64	; 0x40
 8006e34:	2202      	movs	r2, #2
 8006e36:	2101      	movs	r1, #1
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fefd 	bl	8008c38 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8006e3e:	2340      	movs	r3, #64	; 0x40
 8006e40:	4a05      	ldr	r2, [pc, #20]	; (8006e58 <USBD_MIDI_Init+0x44>)
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f002 f871 	bl	8008f2c <USBD_LL_PrepareReceive>
  return 0;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	20000360 	.word	0x20000360
 8006e58:	20000374 	.word	0x20000374

08006e5c <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <USBD_MIDI_DeInit+0x2c>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8006e6e:	2181      	movs	r1, #129	; 0x81
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 ff1f 	bl	8008cb4 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 8006e76:	2101      	movs	r1, #1
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 ff1b 	bl	8008cb4 <USBD_LL_CloseEP>
  return 0;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000360 	.word	0x20000360

08006e8c <USBD_MIDI_DataIn>:

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 8006e98:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <USBD_MIDI_DataIn+0x28>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d102      	bne.n	8006ea6 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <USBD_MIDI_DataIn+0x28>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
  }
  return USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	20000370 	.word	0x20000370

08006eb8 <USBD_MIDI_DataOut>:

static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eca:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 8006ed2:	78fa      	ldrb	r2, [r7, #3]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4413      	add	r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	440b      	add	r3, r1
 8006ede:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	897a      	ldrh	r2, [r7, #10]
 8006eec:	4611      	mov	r1, r2
 8006eee:	4806      	ldr	r0, [pc, #24]	; (8006f08 <USBD_MIDI_DataOut+0x50>)
 8006ef0:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <USBD_MIDI_DataOut+0x50>)
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f002 f817 	bl	8008f2c <USBD_LL_PrepareReceive>
  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000374 	.word	0x20000374

08006f0c <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 8006f12:	4b30      	ldr	r3, [pc, #192]	; (8006fd4 <USBD_MIDI_SendPacket+0xc8>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d059      	beq.n	8006fce <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f22:	d102      	bne.n	8006f2a <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 8006f24:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 8006f2a:	4b2b      	ldr	r3, [pc, #172]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b2b      	ldr	r3, [pc, #172]	; (8006fdc <USBD_MIDI_SendPacket+0xd0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d103      	bne.n	8006f3e <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 8006f36:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <USBD_MIDI_SendPacket+0xc8>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
      return;
 8006f3c:	e047      	b.n	8006fce <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 8006f3e:	4b26      	ldr	r3, [pc, #152]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <USBD_MIDI_SendPacket+0xd0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d906      	bls.n	8006f58 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8006f4a:	4b23      	ldr	r3, [pc, #140]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006f52:	4a23      	ldr	r2, [pc, #140]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	e006      	b.n	8006f66 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <USBD_MIDI_SendPacket+0xd0>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006f64:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 8006f66:	4b1e      	ldr	r3, [pc, #120]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b40      	cmp	r3, #64	; 0x40
 8006f6c:	d90f      	bls.n	8006f8e <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 8006f6e:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8006f74:	2340      	movs	r3, #64	; 0x40
 8006f76:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8006f78:	4b17      	ldr	r3, [pc, #92]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3340      	adds	r3, #64	; 0x40
 8006f7e:	4a16      	ldr	r2, [pc, #88]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f80:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8006f82:	4b17      	ldr	r3, [pc, #92]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3b40      	subs	r3, #64	; 0x40
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e00f      	b.n	8006fae <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 8006f8e:	4b12      	ldr	r3, [pc, #72]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 8006f94:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4b10      	ldr	r3, [pc, #64]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <USBD_MIDI_SendPacket+0xcc>)
 8006fa6:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 8006fa8:	4b0d      	ldr	r3, [pc, #52]	; (8006fe0 <USBD_MIDI_SendPacket+0xd4>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 8006fae:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <USBD_MIDI_SendPacket+0xc8>)
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 8006fb4:	bf00      	nop
 8006fb6:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <USBD_MIDI_SendPacket+0xd8>)
 8006fb8:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 8006fba:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 8006fbc:	4a0a      	ldr	r2, [pc, #40]	; (8006fe8 <USBD_MIDI_SendPacket+0xdc>)
 8006fbe:	441a      	add	r2, r3
 8006fc0:	88bb      	ldrh	r3, [r7, #4]
 8006fc2:	2181      	movs	r1, #129	; 0x81
 8006fc4:	f001 ff7a 	bl	8008ebc <USBD_LL_Transmit>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1f3      	bne.n	8006fb6 <USBD_MIDI_SendPacket+0xaa>
  }
}
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20000370 	.word	0x20000370
 8006fd8:	20000368 	.word	0x20000368
 8006fdc:	20000364 	.word	0x20000364
 8006fe0:	2000036c 	.word	0x2000036c
 8006fe4:	20000360 	.word	0x20000360
 8006fe8:	200003b4 	.word	0x200003b4

08006fec <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2265      	movs	r2, #101	; 0x65
 8006ff8:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8006ffa:	4b03      	ldr	r3, [pc, #12]	; (8007008 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	2000010c 	.word	0x2000010c

0800700c <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 8007016:	2303      	movs	r3, #3
 8007018:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 8007028:	2300      	movs	r3, #0
 800702a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b086      	sub	sp, #24
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	4613      	mov	r3, r2
 8007046:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800704e:	2303      	movs	r3, #3
 8007050:	e01f      	b.n	8007092 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	79fa      	ldrb	r2, [r7, #7]
 8007084:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f001 fd58 	bl	8008b3c <USBD_LL_Init>
 800708c:	4603      	mov	r3, r0
 800708e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007090:	7dfb      	ldrb	r3, [r7, #23]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e016      	b.n	80070e0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00b      	beq.n	80070de <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	f107 020e 	add.w	r2, r7, #14
 80070d2:	4610      	mov	r0, r2
 80070d4:	4798      	blx	r3
 80070d6:	4602      	mov	r2, r0
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fd6f 	bl	8008bd4 <USBD_LL_Start>
 80070f6:	4603      	mov	r3, r0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	460b      	mov	r3, r1
 8007120:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712c:	2b00      	cmp	r3, #0
 800712e:	d009      	beq.n	8007144 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	78fa      	ldrb	r2, [r7, #3]
 800713a:	4611      	mov	r1, r2
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	460b      	mov	r3, r1
 8007158:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	4611      	mov	r1, r2
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
  }

  return USBD_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3708      	adds	r7, #8
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	4618      	mov	r0, r3
 8007192:	f000 ffb9 	bl	8008108 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80071a4:	461a      	mov	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d01a      	beq.n	80071f0 <USBD_LL_SetupStage+0x72>
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d822      	bhi.n	8007204 <USBD_LL_SetupStage+0x86>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <USBD_LL_SetupStage+0x4a>
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d00a      	beq.n	80071dc <USBD_LL_SetupStage+0x5e>
 80071c6:	e01d      	b.n	8007204 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa61 	bl	8007698 <USBD_StdDevReq>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
      break;
 80071da:	e020      	b.n	800721e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fac5 	bl	8007774 <USBD_StdItfReq>
 80071ea:	4603      	mov	r3, r0
 80071ec:	73fb      	strb	r3, [r7, #15]
      break;
 80071ee:	e016      	b.n	800721e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fb04 	bl	8007806 <USBD_StdEPReq>
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
      break;
 8007202:	e00c      	b.n	800721e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800720a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800720e:	b2db      	uxtb	r3, r3
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fd84 	bl	8008d20 <USBD_LL_StallEP>
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]
      break;
 800721c:	bf00      	nop
  }

  return ret;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	460b      	mov	r3, r1
 8007232:	607a      	str	r2, [r7, #4]
 8007234:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d138      	bne.n	80072ae <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007242:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800724a:	2b03      	cmp	r3, #3
 800724c:	d14a      	bne.n	80072e4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	429a      	cmp	r2, r3
 8007258:	d913      	bls.n	8007282 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	1ad2      	subs	r2, r2, r3
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	4293      	cmp	r3, r2
 8007272:	bf28      	it	cs
 8007274:	4613      	movcs	r3, r2
 8007276:	461a      	mov	r2, r3
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f001 f838 	bl	80082f0 <USBD_CtlContinueRx>
 8007280:	e030      	b.n	80072e4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b03      	cmp	r3, #3
 800728c:	d10b      	bne.n	80072a6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f001 f833 	bl	8008312 <USBD_CtlSendStatus>
 80072ac:	e01a      	b.n	80072e4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d114      	bne.n	80072e4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00e      	beq.n	80072e4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	7afa      	ldrb	r2, [r7, #11]
 80072d0:	4611      	mov	r1, r2
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	4798      	blx	r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80072e0:	7dfb      	ldrb	r3, [r7, #23]
 80072e2:	e000      	b.n	80072e6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	460b      	mov	r3, r1
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072fc:	7afb      	ldrb	r3, [r7, #11]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d16b      	bne.n	80073da <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3314      	adds	r3, #20
 8007306:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800730e:	2b02      	cmp	r3, #2
 8007310:	d156      	bne.n	80073c0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	689a      	ldr	r2, [r3, #8]
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	429a      	cmp	r2, r3
 800731c:	d914      	bls.n	8007348 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	1ad2      	subs	r2, r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	461a      	mov	r2, r3
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 ffad 	bl	8008294 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800733a:	2300      	movs	r3, #0
 800733c:	2200      	movs	r2, #0
 800733e:	2100      	movs	r1, #0
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f001 fdf3 	bl	8008f2c <USBD_LL_PrepareReceive>
 8007346:	e03b      	b.n	80073c0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	68da      	ldr	r2, [r3, #12]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	429a      	cmp	r2, r3
 8007352:	d11c      	bne.n	800738e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800735c:	429a      	cmp	r2, r3
 800735e:	d316      	bcc.n	800738e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800736a:	429a      	cmp	r2, r3
 800736c:	d20f      	bcs.n	800738e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800736e:	2200      	movs	r2, #0
 8007370:	2100      	movs	r1, #0
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 ff8e 	bl	8008294 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007380:	2300      	movs	r3, #0
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 fdd0 	bl	8008f2c <USBD_LL_PrepareReceive>
 800738c:	e018      	b.n	80073c0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b03      	cmp	r3, #3
 8007398:	d10b      	bne.n	80073b2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d005      	beq.n	80073b2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f001 fcb3 	bl	8008d20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 ffbc 	bl	8008338 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d122      	bne.n	8007410 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f7ff fe98 	bl	8007100 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073d8:	e01a      	b.n	8007410 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b03      	cmp	r3, #3
 80073e4:	d114      	bne.n	8007410 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00e      	beq.n	8007410 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	7afa      	ldrb	r2, [r7, #11]
 80073fc:	4611      	mov	r1, r2
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	4798      	blx	r3
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d001      	beq.n	8007410 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	e000      	b.n	8007412 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800744a:	2303      	movs	r3, #3
 800744c:	e02f      	b.n	80074ae <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00f      	beq.n	8007478 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d009      	beq.n	8007478 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6852      	ldr	r2, [r2, #4]
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	4611      	mov	r1, r2
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007478:	2340      	movs	r3, #64	; 0x40
 800747a:	2200      	movs	r2, #0
 800747c:	2100      	movs	r1, #0
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fbda 	bl	8008c38 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2240      	movs	r2, #64	; 0x40
 8007490:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	2200      	movs	r2, #0
 8007498:	2180      	movs	r1, #128	; 0x80
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f001 fbcc 	bl	8008c38 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	460b      	mov	r3, r1
 80074c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2204      	movs	r2, #4
 80074f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b04      	cmp	r3, #4
 8007514:	d106      	bne.n	8007524 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800751c:	b2da      	uxtb	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007544:	2303      	movs	r3, #3
 8007546:	e012      	b.n	800756e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b03      	cmp	r3, #3
 8007552:	d10b      	bne.n	800756c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800758c:	2303      	movs	r3, #3
 800758e:	e014      	b.n	80075ba <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b03      	cmp	r3, #3
 800759a:	d10d      	bne.n	80075b8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	4611      	mov	r1, r2
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	460b      	mov	r3, r1
 80075cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e014      	b.n	8007606 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d10d      	bne.n	8007604 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	78fa      	ldrb	r2, [r7, #3]
 80075fe:	4611      	mov	r1, r2
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6852      	ldr	r2, [r2, #4]
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	4611      	mov	r1, r2
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	4798      	blx	r3
  }

  return USBD_OK;
 8007652:	2300      	movs	r3, #0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	3301      	adds	r3, #1
 8007672:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800767a:	8a3b      	ldrh	r3, [r7, #16]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	b21a      	sxth	r2, r3
 8007680:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007684:	4313      	orrs	r3, r2
 8007686:	b21b      	sxth	r3, r3
 8007688:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800768a:	89fb      	ldrh	r3, [r7, #14]
}
 800768c:	4618      	mov	r0, r3
 800768e:	371c      	adds	r7, #28
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ae:	2b40      	cmp	r3, #64	; 0x40
 80076b0:	d005      	beq.n	80076be <USBD_StdDevReq+0x26>
 80076b2:	2b40      	cmp	r3, #64	; 0x40
 80076b4:	d853      	bhi.n	800775e <USBD_StdDevReq+0xc6>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00b      	beq.n	80076d2 <USBD_StdDevReq+0x3a>
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d14f      	bne.n	800775e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]
      break;
 80076d0:	e04a      	b.n	8007768 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d83b      	bhi.n	8007752 <USBD_StdDevReq+0xba>
 80076da:	a201      	add	r2, pc, #4	; (adr r2, 80076e0 <USBD_StdDevReq+0x48>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	08007735 	.word	0x08007735
 80076e4:	08007749 	.word	0x08007749
 80076e8:	08007753 	.word	0x08007753
 80076ec:	0800773f 	.word	0x0800773f
 80076f0:	08007753 	.word	0x08007753
 80076f4:	08007713 	.word	0x08007713
 80076f8:	08007709 	.word	0x08007709
 80076fc:	08007753 	.word	0x08007753
 8007700:	0800772b 	.word	0x0800772b
 8007704:	0800771d 	.word	0x0800771d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f9de 	bl	8007acc <USBD_GetDescriptor>
          break;
 8007710:	e024      	b.n	800775c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fb6d 	bl	8007df4 <USBD_SetAddress>
          break;
 800771a:	e01f      	b.n	800775c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fbac 	bl	8007e7c <USBD_SetConfig>
 8007724:	4603      	mov	r3, r0
 8007726:	73fb      	strb	r3, [r7, #15]
          break;
 8007728:	e018      	b.n	800775c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fc4b 	bl	8007fc8 <USBD_GetConfig>
          break;
 8007732:	e013      	b.n	800775c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fc7c 	bl	8008034 <USBD_GetStatus>
          break;
 800773c:	e00e      	b.n	800775c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fcab 	bl	800809c <USBD_SetFeature>
          break;
 8007746:	e009      	b.n	800775c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fcba 	bl	80080c4 <USBD_ClrFeature>
          break;
 8007750:	e004      	b.n	800775c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fd11 	bl	800817c <USBD_CtlError>
          break;
 800775a:	bf00      	nop
      }
      break;
 800775c:	e004      	b.n	8007768 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fd0b 	bl	800817c <USBD_CtlError>
      break;
 8007766:	bf00      	nop
  }

  return ret;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop

08007774 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800778a:	2b40      	cmp	r3, #64	; 0x40
 800778c:	d005      	beq.n	800779a <USBD_StdItfReq+0x26>
 800778e:	2b40      	cmp	r3, #64	; 0x40
 8007790:	d82f      	bhi.n	80077f2 <USBD_StdItfReq+0x7e>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <USBD_StdItfReq+0x26>
 8007796:	2b20      	cmp	r3, #32
 8007798:	d12b      	bne.n	80077f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d81d      	bhi.n	80077e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	889b      	ldrh	r3, [r3, #4]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d813      	bhi.n	80077da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	4798      	blx	r3
 80077c0:	4603      	mov	r3, r0
 80077c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	88db      	ldrh	r3, [r3, #6]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d110      	bne.n	80077ee <USBD_StdItfReq+0x7a>
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10d      	bne.n	80077ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fd9d 	bl	8008312 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80077d8:	e009      	b.n	80077ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fccd 	bl	800817c <USBD_CtlError>
          break;
 80077e2:	e004      	b.n	80077ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fcc8 	bl	800817c <USBD_CtlError>
          break;
 80077ec:	e000      	b.n	80077f0 <USBD_StdItfReq+0x7c>
          break;
 80077ee:	bf00      	nop
      }
      break;
 80077f0:	e004      	b.n	80077fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fcc1 	bl	800817c <USBD_CtlError>
      break;
 80077fa:	bf00      	nop
  }

  return ret;
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
 800780e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	889b      	ldrh	r3, [r3, #4]
 8007818:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007822:	2b40      	cmp	r3, #64	; 0x40
 8007824:	d007      	beq.n	8007836 <USBD_StdEPReq+0x30>
 8007826:	2b40      	cmp	r3, #64	; 0x40
 8007828:	f200 8145 	bhi.w	8007ab6 <USBD_StdEPReq+0x2b0>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00c      	beq.n	800784a <USBD_StdEPReq+0x44>
 8007830:	2b20      	cmp	r3, #32
 8007832:	f040 8140 	bne.w	8007ab6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	4798      	blx	r3
 8007844:	4603      	mov	r3, r0
 8007846:	73fb      	strb	r3, [r7, #15]
      break;
 8007848:	e13a      	b.n	8007ac0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b03      	cmp	r3, #3
 8007850:	d007      	beq.n	8007862 <USBD_StdEPReq+0x5c>
 8007852:	2b03      	cmp	r3, #3
 8007854:	f300 8129 	bgt.w	8007aaa <USBD_StdEPReq+0x2a4>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d07f      	beq.n	800795c <USBD_StdEPReq+0x156>
 800785c:	2b01      	cmp	r3, #1
 800785e:	d03c      	beq.n	80078da <USBD_StdEPReq+0xd4>
 8007860:	e123      	b.n	8007aaa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d002      	beq.n	8007874 <USBD_StdEPReq+0x6e>
 800786e:	2b03      	cmp	r3, #3
 8007870:	d016      	beq.n	80078a0 <USBD_StdEPReq+0x9a>
 8007872:	e02c      	b.n	80078ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00d      	beq.n	8007896 <USBD_StdEPReq+0x90>
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d00a      	beq.n	8007896 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fa4b 	bl	8008d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 fa47 	bl	8008d20 <USBD_LL_StallEP>
 8007892:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007894:	e020      	b.n	80078d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc6f 	bl	800817c <USBD_CtlError>
              break;
 800789e:	e01b      	b.n	80078d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	885b      	ldrh	r3, [r3, #2]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10e      	bne.n	80078c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00b      	beq.n	80078c6 <USBD_StdEPReq+0xc0>
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b80      	cmp	r3, #128	; 0x80
 80078b2:	d008      	beq.n	80078c6 <USBD_StdEPReq+0xc0>
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	88db      	ldrh	r3, [r3, #6]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d104      	bne.n	80078c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 fa2d 	bl	8008d20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fd23 	bl	8008312 <USBD_CtlSendStatus>

              break;
 80078cc:	e004      	b.n	80078d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fc53 	bl	800817c <USBD_CtlError>
              break;
 80078d6:	bf00      	nop
          }
          break;
 80078d8:	e0ec      	b.n	8007ab4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d002      	beq.n	80078ec <USBD_StdEPReq+0xe6>
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d016      	beq.n	8007918 <USBD_StdEPReq+0x112>
 80078ea:	e030      	b.n	800794e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00d      	beq.n	800790e <USBD_StdEPReq+0x108>
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d00a      	beq.n	800790e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 fa0f 	bl	8008d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007902:	2180      	movs	r1, #128	; 0x80
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 fa0b 	bl	8008d20 <USBD_LL_StallEP>
 800790a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800790c:	e025      	b.n	800795a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc33 	bl	800817c <USBD_CtlError>
              break;
 8007916:	e020      	b.n	800795a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d11b      	bne.n	8007958 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007920:	7bbb      	ldrb	r3, [r7, #14]
 8007922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007926:	2b00      	cmp	r3, #0
 8007928:	d004      	beq.n	8007934 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f001 fa2c 	bl	8008d8c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fcec 	bl	8008312 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800794c:	e004      	b.n	8007958 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc13 	bl	800817c <USBD_CtlError>
              break;
 8007956:	e000      	b.n	800795a <USBD_StdEPReq+0x154>
              break;
 8007958:	bf00      	nop
          }
          break;
 800795a:	e0ab      	b.n	8007ab4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d002      	beq.n	800796e <USBD_StdEPReq+0x168>
 8007968:	2b03      	cmp	r3, #3
 800796a:	d032      	beq.n	80079d2 <USBD_StdEPReq+0x1cc>
 800796c:	e097      	b.n	8007a9e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d007      	beq.n	8007984 <USBD_StdEPReq+0x17e>
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d004      	beq.n	8007984 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbfd 	bl	800817c <USBD_CtlError>
                break;
 8007982:	e091      	b.n	8007aa8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007984:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007988:	2b00      	cmp	r3, #0
 800798a:	da0b      	bge.n	80079a4 <USBD_StdEPReq+0x19e>
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	3310      	adds	r3, #16
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	3304      	adds	r3, #4
 80079a2:	e00b      	b.n	80079bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079aa:	4613      	mov	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	3304      	adds	r3, #4
 80079bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2200      	movs	r2, #0
 80079c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2202      	movs	r2, #2
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc47 	bl	800825e <USBD_CtlSendData>
              break;
 80079d0:	e06a      	b.n	8007aa8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	da11      	bge.n	80079fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	f003 020f 	and.w	r2, r3, #15
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3324      	adds	r3, #36	; 0x24
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d117      	bne.n	8007a24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fbc0 	bl	800817c <USBD_CtlError>
                  break;
 80079fc:	e054      	b.n	8007aa8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a14:	881b      	ldrh	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d104      	bne.n	8007a24 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fbad 	bl	800817c <USBD_CtlError>
                  break;
 8007a22:	e041      	b.n	8007aa8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	da0b      	bge.n	8007a44 <USBD_StdEPReq+0x23e>
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a32:	4613      	mov	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	4413      	add	r3, r2
 8007a40:	3304      	adds	r3, #4
 8007a42:	e00b      	b.n	8007a5c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d002      	beq.n	8007a6a <USBD_StdEPReq+0x264>
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	2b80      	cmp	r3, #128	; 0x80
 8007a68:	d103      	bne.n	8007a72 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e00e      	b.n	8007a90 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 f9be 	bl	8008df8 <USBD_LL_IsStallEP>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	e002      	b.n	8007a90 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2202      	movs	r2, #2
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fbe1 	bl	800825e <USBD_CtlSendData>
              break;
 8007a9c:	e004      	b.n	8007aa8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fb6b 	bl	800817c <USBD_CtlError>
              break;
 8007aa6:	bf00      	nop
          }
          break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fb65 	bl	800817c <USBD_CtlError>
          break;
 8007ab2:	bf00      	nop
      }
      break;
 8007ab4:	e004      	b.n	8007ac0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007ab6:	6839      	ldr	r1, [r7, #0]
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fb5f 	bl	800817c <USBD_CtlError>
      break;
 8007abe:	bf00      	nop
  }

  return ret;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
	...

08007acc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	885b      	ldrh	r3, [r3, #2]
 8007ae6:	0a1b      	lsrs	r3, r3, #8
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	2b0e      	cmp	r3, #14
 8007aee:	f200 8152 	bhi.w	8007d96 <USBD_GetDescriptor+0x2ca>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBD_GetDescriptor+0x2c>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b69 	.word	0x08007b69
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007bc1 	.word	0x08007bc1
 8007b04:	08007d97 	.word	0x08007d97
 8007b08:	08007d97 	.word	0x08007d97
 8007b0c:	08007d37 	.word	0x08007d37
 8007b10:	08007d63 	.word	0x08007d63
 8007b14:	08007d97 	.word	0x08007d97
 8007b18:	08007d97 	.word	0x08007d97
 8007b1c:	08007d97 	.word	0x08007d97
 8007b20:	08007d97 	.word	0x08007d97
 8007b24:	08007d97 	.word	0x08007d97
 8007b28:	08007d97 	.word	0x08007d97
 8007b2c:	08007d97 	.word	0x08007d97
 8007b30:	08007b35 	.word	0x08007b35
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00b      	beq.n	8007b58 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
 8007b4c:	f107 0108 	add.w	r1, r7, #8
 8007b50:	4610      	mov	r0, r2
 8007b52:	4798      	blx	r3
 8007b54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b56:	e126      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fb0e 	bl	800817c <USBD_CtlError>
        err++;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3301      	adds	r3, #1
 8007b64:	72fb      	strb	r3, [r7, #11]
      break;
 8007b66:	e11e      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
      break;
 8007b7e:	e112      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7c1b      	ldrb	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10d      	bne.n	8007ba4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	f107 0208 	add.w	r2, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ba2:	e100      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	f107 0208 	add.w	r2, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	2202      	movs	r2, #2
 8007bbc:	701a      	strb	r2, [r3, #0]
      break;
 8007bbe:	e0f2      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	885b      	ldrh	r3, [r3, #2]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	f200 80ac 	bhi.w	8007d24 <USBD_GetDescriptor+0x258>
 8007bcc:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <USBD_GetDescriptor+0x108>)
 8007bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd2:	bf00      	nop
 8007bd4:	08007bed 	.word	0x08007bed
 8007bd8:	08007c21 	.word	0x08007c21
 8007bdc:	08007c55 	.word	0x08007c55
 8007be0:	08007c89 	.word	0x08007c89
 8007be4:	08007cbd 	.word	0x08007cbd
 8007be8:	08007cf1 	.word	0x08007cf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	7c12      	ldrb	r2, [r2, #16]
 8007c04:	f107 0108 	add.w	r1, r7, #8
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4798      	blx	r3
 8007c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0e:	e091      	b.n	8007d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fab2 	bl	800817c <USBD_CtlError>
            err++;
 8007c18:	7afb      	ldrb	r3, [r7, #11]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1e:	e089      	b.n	8007d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c42:	e077      	b.n	8007d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c44:	6839      	ldr	r1, [r7, #0]
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa98 	bl	800817c <USBD_CtlError>
            err++;
 8007c4c:	7afb      	ldrb	r3, [r7, #11]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	72fb      	strb	r3, [r7, #11]
          break;
 8007c52:	e06f      	b.n	8007d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	7c12      	ldrb	r2, [r2, #16]
 8007c6c:	f107 0108 	add.w	r1, r7, #8
 8007c70:	4610      	mov	r0, r2
 8007c72:	4798      	blx	r3
 8007c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c76:	e05d      	b.n	8007d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fa7e 	bl	800817c <USBD_CtlError>
            err++;
 8007c80:	7afb      	ldrb	r3, [r7, #11]
 8007c82:	3301      	adds	r3, #1
 8007c84:	72fb      	strb	r3, [r7, #11]
          break;
 8007c86:	e055      	b.n	8007d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00b      	beq.n	8007cac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	7c12      	ldrb	r2, [r2, #16]
 8007ca0:	f107 0108 	add.w	r1, r7, #8
 8007ca4:	4610      	mov	r0, r2
 8007ca6:	4798      	blx	r3
 8007ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007caa:	e043      	b.n	8007d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007cac:	6839      	ldr	r1, [r7, #0]
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 fa64 	bl	800817c <USBD_CtlError>
            err++;
 8007cb4:	7afb      	ldrb	r3, [r7, #11]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cba:	e03b      	b.n	8007d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00b      	beq.n	8007ce0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cce:	695b      	ldr	r3, [r3, #20]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7c12      	ldrb	r2, [r2, #16]
 8007cd4:	f107 0108 	add.w	r1, r7, #8
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
 8007cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cde:	e029      	b.n	8007d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa4a 	bl	800817c <USBD_CtlError>
            err++;
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	3301      	adds	r3, #1
 8007cec:	72fb      	strb	r3, [r7, #11]
          break;
 8007cee:	e021      	b.n	8007d34 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00b      	beq.n	8007d14 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	7c12      	ldrb	r2, [r2, #16]
 8007d08:	f107 0108 	add.w	r1, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d12:	e00f      	b.n	8007d34 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa30 	bl	800817c <USBD_CtlError>
            err++;
 8007d1c:	7afb      	ldrb	r3, [r7, #11]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	72fb      	strb	r3, [r7, #11]
          break;
 8007d22:	e007      	b.n	8007d34 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa28 	bl	800817c <USBD_CtlError>
          err++;
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007d32:	bf00      	nop
      }
      break;
 8007d34:	e037      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	7c1b      	ldrb	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	f107 0208 	add.w	r2, r7, #8
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d50:	e029      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 fa11 	bl	800817c <USBD_CtlError>
        err++;
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	72fb      	strb	r3, [r7, #11]
      break;
 8007d60:	e021      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7c1b      	ldrb	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10d      	bne.n	8007d86 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f107 0208 	add.w	r2, r7, #8
 8007d76:	4610      	mov	r0, r2
 8007d78:	4798      	blx	r3
 8007d7a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	2207      	movs	r2, #7
 8007d82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d84:	e00f      	b.n	8007da6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f9f7 	bl	800817c <USBD_CtlError>
        err++;
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
 8007d90:	3301      	adds	r3, #1
 8007d92:	72fb      	strb	r3, [r7, #11]
      break;
 8007d94:	e007      	b.n	8007da6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007d96:	6839      	ldr	r1, [r7, #0]
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f9ef 	bl	800817c <USBD_CtlError>
      err++;
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	3301      	adds	r3, #1
 8007da2:	72fb      	strb	r3, [r7, #11]
      break;
 8007da4:	bf00      	nop
  }

  if (err != 0U)
 8007da6:	7afb      	ldrb	r3, [r7, #11]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d11e      	bne.n	8007dea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	88db      	ldrh	r3, [r3, #6]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d016      	beq.n	8007de2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007db4:	893b      	ldrh	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	88da      	ldrh	r2, [r3, #6]
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	bf28      	it	cs
 8007dc4:	4613      	movcs	r3, r2
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dca:	893b      	ldrh	r3, [r7, #8]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fa44 	bl	800825e <USBD_CtlSendData>
 8007dd6:	e009      	b.n	8007dec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9ce 	bl	800817c <USBD_CtlError>
 8007de0:	e004      	b.n	8007dec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa95 	bl	8008312 <USBD_CtlSendStatus>
 8007de8:	e000      	b.n	8007dec <USBD_GetDescriptor+0x320>
    return;
 8007dea:	bf00      	nop
  }
}
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop

08007df4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	889b      	ldrh	r3, [r3, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d131      	bne.n	8007e6a <USBD_SetAddress+0x76>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d12d      	bne.n	8007e6a <USBD_SetAddress+0x76>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	885b      	ldrh	r3, [r3, #2]
 8007e12:	2b7f      	cmp	r3, #127	; 0x7f
 8007e14:	d829      	bhi.n	8007e6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b03      	cmp	r3, #3
 8007e2c:	d104      	bne.n	8007e38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f9a3 	bl	800817c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e36:	e01d      	b.n	8007e74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	7bfa      	ldrb	r2, [r7, #15]
 8007e3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f803 	bl	8008e50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa61 	bl	8008312 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d004      	beq.n	8007e60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e5e:	e009      	b.n	8007e74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	e004      	b.n	8007e74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f985 	bl	800817c <USBD_CtlError>
  }
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	885b      	ldrh	r3, [r3, #2]
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	4b4c      	ldr	r3, [pc, #304]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007e92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e94:	4b4b      	ldr	r3, [pc, #300]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d905      	bls.n	8007ea8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f96c 	bl	800817c <USBD_CtlError>
    return USBD_FAIL;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e088      	b.n	8007fba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d002      	beq.n	8007eba <USBD_SetConfig+0x3e>
 8007eb4:	2b03      	cmp	r3, #3
 8007eb6:	d025      	beq.n	8007f04 <USBD_SetConfig+0x88>
 8007eb8:	e071      	b.n	8007f9e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007eba:	4b42      	ldr	r3, [pc, #264]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d01c      	beq.n	8007efc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007ec2:	4b40      	ldr	r3, [pc, #256]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ecc:	4b3d      	ldr	r3, [pc, #244]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7ff f91f 	bl	8007116 <USBD_SetClassConfig>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f949 	bl	800817c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eea:	e065      	b.n	8007fb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fa10 	bl	8008312 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2203      	movs	r2, #3
 8007ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007efa:	e05d      	b.n	8007fb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fa08 	bl	8008312 <USBD_CtlSendStatus>
      break;
 8007f02:	e059      	b.n	8007fb8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007f04:	4b2f      	ldr	r3, [pc, #188]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d112      	bne.n	8007f32 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007f14:	4b2b      	ldr	r3, [pc, #172]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f1e:	4b29      	ldr	r3, [pc, #164]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff f912 	bl	800714e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f9f1 	bl	8008312 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f30:	e042      	b.n	8007fb8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007f32:	4b24      	ldr	r3, [pc, #144]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d02a      	beq.n	8007f96 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff f900 	bl	800714e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f4e:	4b1d      	ldr	r3, [pc, #116]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f58:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7ff f8d9 	bl	8007116 <USBD_SetClassConfig>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00f      	beq.n	8007f8e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f903 	bl	800817c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7ff f8e5 	bl	800714e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2202      	movs	r2, #2
 8007f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007f8c:	e014      	b.n	8007fb8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f9bf 	bl	8008312 <USBD_CtlSendStatus>
      break;
 8007f94:	e010      	b.n	8007fb8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f9bb 	bl	8008312 <USBD_CtlSendStatus>
      break;
 8007f9c:	e00c      	b.n	8007fb8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f8eb 	bl	800817c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fa6:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <USBD_SetConfig+0x148>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff f8ce 	bl	800714e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb6:	bf00      	nop
  }

  return ret;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	200004b4 	.word	0x200004b4

08007fc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	88db      	ldrh	r3, [r3, #6]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d004      	beq.n	8007fe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8cd 	bl	800817c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fe2:	e023      	b.n	800802c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	dc02      	bgt.n	8007ff6 <USBD_GetConfig+0x2e>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	dc03      	bgt.n	8007ffc <USBD_GetConfig+0x34>
 8007ff4:	e015      	b.n	8008022 <USBD_GetConfig+0x5a>
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d00b      	beq.n	8008012 <USBD_GetConfig+0x4a>
 8007ffa:	e012      	b.n	8008022 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3308      	adds	r3, #8
 8008006:	2201      	movs	r2, #1
 8008008:	4619      	mov	r1, r3
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f927 	bl	800825e <USBD_CtlSendData>
        break;
 8008010:	e00c      	b.n	800802c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	2201      	movs	r2, #1
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f91f 	bl	800825e <USBD_CtlSendData>
        break;
 8008020:	e004      	b.n	800802c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f8a9 	bl	800817c <USBD_CtlError>
        break;
 800802a:	bf00      	nop
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008044:	b2db      	uxtb	r3, r3
 8008046:	3b01      	subs	r3, #1
 8008048:	2b02      	cmp	r3, #2
 800804a:	d81e      	bhi.n	800808a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	88db      	ldrh	r3, [r3, #6]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d004      	beq.n	800805e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f890 	bl	800817c <USBD_CtlError>
        break;
 800805c:	e01a      	b.n	8008094 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d005      	beq.n	800807a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f043 0202 	orr.w	r2, r3, #2
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	330c      	adds	r3, #12
 800807e:	2202      	movs	r2, #2
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f8eb 	bl	800825e <USBD_CtlSendData>
      break;
 8008088:	e004      	b.n	8008094 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f875 	bl	800817c <USBD_CtlError>
      break;
 8008092:	bf00      	nop
  }
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	885b      	ldrh	r3, [r3, #2]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d106      	bne.n	80080bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f92b 	bl	8008312 <USBD_CtlSendStatus>
  }
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d80b      	bhi.n	80080f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	885b      	ldrh	r3, [r3, #2]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d10c      	bne.n	80080fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f910 	bl	8008312 <USBD_CtlSendStatus>
      }
      break;
 80080f2:	e004      	b.n	80080fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f840 	bl	800817c <USBD_CtlError>
      break;
 80080fc:	e000      	b.n	8008100 <USBD_ClrFeature+0x3c>
      break;
 80080fe:	bf00      	nop
  }
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3301      	adds	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	781a      	ldrb	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff fa92 	bl	800765c <SWAPBYTE>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	3301      	adds	r3, #1
 8008144:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3301      	adds	r3, #1
 800814a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f7ff fa85 	bl	800765c <SWAPBYTE>
 8008152:	4603      	mov	r3, r0
 8008154:	461a      	mov	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	3301      	adds	r3, #1
 800815e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3301      	adds	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f7ff fa78 	bl	800765c <SWAPBYTE>
 800816c:	4603      	mov	r3, r0
 800816e:	461a      	mov	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	80da      	strh	r2, [r3, #6]
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008186:	2180      	movs	r1, #128	; 0x80
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fdc9 	bl	8008d20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800818e:	2100      	movs	r1, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fdc5 	bl	8008d20 <USBD_LL_StallEP>
}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b086      	sub	sp, #24
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	60f8      	str	r0, [r7, #12]
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d036      	beq.n	8008222 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80081b8:	6938      	ldr	r0, [r7, #16]
 80081ba:	f000 f836 	bl	800822a <USBD_GetLen>
 80081be:	4603      	mov	r3, r0
 80081c0:	3301      	adds	r3, #1
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	005b      	lsls	r3, r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	7812      	ldrb	r2, [r2, #0]
 80081d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	3301      	adds	r3, #1
 80081dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	4413      	add	r3, r2
 80081e4:	2203      	movs	r2, #3
 80081e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	3301      	adds	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081ee:	e013      	b.n	8008218 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	4413      	add	r3, r2
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	7812      	ldrb	r2, [r2, #0]
 80081fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3301      	adds	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
    idx++;
 8008202:	7dfb      	ldrb	r3, [r7, #23]
 8008204:	3301      	adds	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	68ba      	ldr	r2, [r7, #8]
 800820c:	4413      	add	r3, r2
 800820e:	2200      	movs	r2, #0
 8008210:	701a      	strb	r2, [r3, #0]
    idx++;
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	3301      	adds	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e7      	bne.n	80081f0 <USBD_GetString+0x52>
 8008220:	e000      	b.n	8008224 <USBD_GetString+0x86>
    return;
 8008222:	bf00      	nop
  }
}
 8008224:	3718      	adds	r7, #24
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800822a:	b480      	push	{r7}
 800822c:	b085      	sub	sp, #20
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800823a:	e005      	b.n	8008248 <USBD_GetLen+0x1e>
  {
    len++;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
 800823e:	3301      	adds	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	3301      	adds	r3, #1
 8008246:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1f5      	bne.n	800823c <USBD_GetLen+0x12>
  }

  return len;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2202      	movs	r2, #2
 800826e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	2100      	movs	r1, #0
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 fe19 	bl	8008ebc <USBD_LL_Transmit>

  return USBD_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	2100      	movs	r1, #0
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f000 fe08 	bl	8008ebc <USBD_LL_Transmit>

  return USBD_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2203      	movs	r2, #3
 80082c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	2100      	movs	r1, #0
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fe23 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	2100      	movs	r1, #0
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 fe12 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b082      	sub	sp, #8
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2204      	movs	r2, #4
 800831e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008322:	2300      	movs	r3, #0
 8008324:	2200      	movs	r2, #0
 8008326:	2100      	movs	r1, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fdc7 	bl	8008ebc <USBD_LL_Transmit>

  return USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2205      	movs	r2, #5
 8008344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008348:	2300      	movs	r3, #0
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fdec 	bl	8008f2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008364:	2200      	movs	r2, #0
 8008366:	491f      	ldr	r1, [pc, #124]	; (80083e4 <MX_USB_DEVICE_Init+0x84>)
 8008368:	481f      	ldr	r0, [pc, #124]	; (80083e8 <MX_USB_DEVICE_Init+0x88>)
 800836a:	f7fe fe66 	bl	800703a <USBD_Init>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008374:	f7f8 fad6 	bl	8000924 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008378:	491c      	ldr	r1, [pc, #112]	; (80083ec <MX_USB_DEVICE_Init+0x8c>)
 800837a:	481b      	ldr	r0, [pc, #108]	; (80083e8 <MX_USB_DEVICE_Init+0x88>)
 800837c:	f7fe fe8d 	bl	800709a <USBD_RegisterClass>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008386:	f7f8 facd 	bl	8000924 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800838a:	4919      	ldr	r1, [pc, #100]	; (80083f0 <MX_USB_DEVICE_Init+0x90>)
 800838c:	4816      	ldr	r0, [pc, #88]	; (80083e8 <MX_USB_DEVICE_Init+0x88>)
 800838e:	f7fe fd2b 	bl	8006de8 <USBD_AUDIO_RegisterInterface>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008398:	f7f8 fac4 	bl	8000924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800839c:	4812      	ldr	r0, [pc, #72]	; (80083e8 <MX_USB_DEVICE_Init+0x88>)
 800839e:	f7fe fea3 	bl	80070e8 <USBD_Start>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083a8:	f7f8 fabc 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 80083ac:	4911      	ldr	r1, [pc, #68]	; (80083f4 <MX_USB_DEVICE_Init+0x94>)
 80083ae:	480e      	ldr	r0, [pc, #56]	; (80083e8 <MX_USB_DEVICE_Init+0x88>)
 80083b0:	f7fe fe73 	bl	800709a <USBD_RegisterClass>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <MX_USB_DEVICE_Init+0x5e>
  {
	  Error_Handler();
 80083ba:	f7f8 fab3 	bl	8000924 <Error_Handler>
  }
  if (USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083be:	490e      	ldr	r1, [pc, #56]	; (80083f8 <MX_USB_DEVICE_Init+0x98>)
 80083c0:	4809      	ldr	r0, [pc, #36]	; (80083e8 <MX_USB_DEVICE_Init+0x88>)
 80083c2:	f7fe fe23 	bl	800700c <USBD_MIDI_RegisterInterface>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <MX_USB_DEVICE_Init+0x70>
  {
	  Error_Handler();
 80083cc:	f7f8 faaa 	bl	8000924 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083d0:	4805      	ldr	r0, [pc, #20]	; (80083e8 <MX_USB_DEVICE_Init+0x88>)
 80083d2:	f7fe fe89 	bl	80070e8 <USBD_Start>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <MX_USB_DEVICE_Init+0x80>
  {
	  Error_Handler();
 80083dc:	f7f8 faa2 	bl	8000924 <Error_Handler>
  }
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083e0:	bf00      	nop
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000190 	.word	0x20000190
 80083e8:	200004b8 	.word	0x200004b8
 80083ec:	20000020 	.word	0x20000020
 80083f0:	20000174 	.word	0x20000174
 80083f4:	200000d4 	.word	0x200000d4
 80083f8:	20000200 	.word	0x20000200

080083fc <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8008408:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008416:	b480      	push	{r7}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800841e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008420:	4618      	mov	r0, r3
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d001      	beq.n	8008444 <AUDIO_AudioCmd_FS+0x18>
 8008440:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8008442:	e000      	b.n	8008446 <AUDIO_AudioCmd_FS+0x1a>
    break;
 8008444:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008446:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800845e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8008476:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008478:	4618      	mov	r0, r3
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008492:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008494:	4618      	mov	r0, r3
 8008496:	3714      	adds	r7, #20
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 80084a0:	b480      	push	{r7}
 80084a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80084a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2212      	movs	r2, #18
 80084c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084c2:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	200001b0 	.word	0x200001b0

080084d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2204      	movs	r2, #4
 80084e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084e6:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	200001d0 	.word	0x200001d0

080084f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	6039      	str	r1, [r7, #0]
 8008502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	4907      	ldr	r1, [pc, #28]	; (800852c <USBD_FS_ProductStrDescriptor+0x34>)
 800850e:	4808      	ldr	r0, [pc, #32]	; (8008530 <USBD_FS_ProductStrDescriptor+0x38>)
 8008510:	f7ff fe45 	bl	800819e <USBD_GetString>
 8008514:	e004      	b.n	8008520 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4904      	ldr	r1, [pc, #16]	; (800852c <USBD_FS_ProductStrDescriptor+0x34>)
 800851a:	4805      	ldr	r0, [pc, #20]	; (8008530 <USBD_FS_ProductStrDescriptor+0x38>)
 800851c:	f7ff fe3f 	bl	800819e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000788 	.word	0x20000788
 8008530:	0800a048 	.word	0x0800a048

08008534 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	6039      	str	r1, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	4904      	ldr	r1, [pc, #16]	; (8008554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008544:	4804      	ldr	r0, [pc, #16]	; (8008558 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008546:	f7ff fe2a 	bl	800819e <USBD_GetString>
  return USBD_StrDesc;
 800854a:	4b02      	ldr	r3, [pc, #8]	; (8008554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000788 	.word	0x20000788
 8008558:	0800a050 	.word	0x0800a050

0800855c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	221a      	movs	r2, #26
 800856c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800856e:	f000 f855 	bl	800861c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008572:	4b02      	ldr	r3, [pc, #8]	; (800857c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	200001d4 	.word	0x200001d4

08008580 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4907      	ldr	r1, [pc, #28]	; (80085b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008596:	4808      	ldr	r0, [pc, #32]	; (80085b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008598:	f7ff fe01 	bl	800819e <USBD_GetString>
 800859c:	e004      	b.n	80085a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	4904      	ldr	r1, [pc, #16]	; (80085b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085a2:	4805      	ldr	r0, [pc, #20]	; (80085b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a4:	f7ff fdfb 	bl	800819e <USBD_GetString>
  }
  return USBD_StrDesc;
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000788 	.word	0x20000788
 80085b8:	0800a064 	.word	0x0800a064

080085bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	6039      	str	r1, [r7, #0]
 80085c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d105      	bne.n	80085da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	4907      	ldr	r1, [pc, #28]	; (80085f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085d2:	4808      	ldr	r0, [pc, #32]	; (80085f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085d4:	f7ff fde3 	bl	800819e <USBD_GetString>
 80085d8:	e004      	b.n	80085e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4904      	ldr	r1, [pc, #16]	; (80085f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085de:	4805      	ldr	r0, [pc, #20]	; (80085f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e0:	f7ff fddd 	bl	800819e <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000788 	.word	0x20000788
 80085f4:	0800a070 	.word	0x0800a070

080085f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	6039      	str	r1, [r7, #0]
 8008602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	220c      	movs	r2, #12
 8008608:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800860a:	4b03      	ldr	r3, [pc, #12]	; (8008618 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800860c:	4618      	mov	r0, r3
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	200001c4 	.word	0x200001c4

0800861c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008622:	4b0f      	ldr	r3, [pc, #60]	; (8008660 <Get_SerialNum+0x44>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008628:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <Get_SerialNum+0x48>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800862e:	4b0e      	ldr	r3, [pc, #56]	; (8008668 <Get_SerialNum+0x4c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4413      	add	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d009      	beq.n	8008656 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008642:	2208      	movs	r2, #8
 8008644:	4909      	ldr	r1, [pc, #36]	; (800866c <Get_SerialNum+0x50>)
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 f814 	bl	8008674 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800864c:	2204      	movs	r2, #4
 800864e:	4908      	ldr	r1, [pc, #32]	; (8008670 <Get_SerialNum+0x54>)
 8008650:	68b8      	ldr	r0, [r7, #8]
 8008652:	f000 f80f 	bl	8008674 <IntToUnicode>
  }
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	1fff7590 	.word	0x1fff7590
 8008664:	1fff7594 	.word	0x1fff7594
 8008668:	1fff7598 	.word	0x1fff7598
 800866c:	200001d6 	.word	0x200001d6
 8008670:	200001e6 	.word	0x200001e6

08008674 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008674:	b480      	push	{r7}
 8008676:	b087      	sub	sp, #28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	4613      	mov	r3, r2
 8008680:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008686:	2300      	movs	r3, #0
 8008688:	75fb      	strb	r3, [r7, #23]
 800868a:	e027      	b.n	80086dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	0f1b      	lsrs	r3, r3, #28
 8008690:	2b09      	cmp	r3, #9
 8008692:	d80b      	bhi.n	80086ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	0f1b      	lsrs	r3, r3, #28
 8008698:	b2da      	uxtb	r2, r3
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4619      	mov	r1, r3
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	440b      	add	r3, r1
 80086a4:	3230      	adds	r2, #48	; 0x30
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	e00a      	b.n	80086c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	0f1b      	lsrs	r3, r3, #28
 80086b0:	b2da      	uxtb	r2, r3
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	4619      	mov	r1, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	440b      	add	r3, r1
 80086bc:	3237      	adds	r2, #55	; 0x37
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	3301      	adds	r3, #1
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4413      	add	r3, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	3301      	adds	r3, #1
 80086da:	75fb      	strb	r3, [r7, #23]
 80086dc:	7dfa      	ldrb	r2, [r7, #23]
 80086de:	79fb      	ldrb	r3, [r7, #7]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d3d3      	bcc.n	800868c <IntToUnicode+0x18>
  }
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop
 80086e8:	371c      	adds	r7, #28
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
	...

080086f4 <MIDI_DataRx>:
  MIDI_DataRx,
  MIDI_DataTx
};
 
uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	807b      	strh	r3, [r7, #2]
  uint8_t chan = msg[0] & 0x0F;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	f003 030f 	and.w	r3, r3, #15
 8008708:	73fb      	strb	r3, [r7, #15]
  uint8_t msgtype = msg[0] & 0xF0;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f023 030f 	bic.w	r3, r3, #15
 8008712:	73bb      	strb	r3, [r7, #14]
  uint8_t b1 =  msg[2];
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	789b      	ldrb	r3, [r3, #2]
 8008718:	737b      	strb	r3, [r7, #13]
  uint8_t b2 =  msg[3];
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	78db      	ldrb	r3, [r3, #3]
 800871e:	733b      	strb	r3, [r7, #12]
  uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 8008720:	7b3b      	ldrb	r3, [r7, #12]
 8008722:	01db      	lsls	r3, r3, #7
 8008724:	b21b      	sxth	r3, r3
 8008726:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 800872a:	b21a      	sxth	r2, r3
 800872c:	7b7b      	ldrb	r3, [r7, #13]
 800872e:	b21b      	sxth	r3, r3
 8008730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008734:	b21b      	sxth	r3, r3
 8008736:	4313      	orrs	r3, r2
 8008738:	b21b      	sxth	r3, r3
 800873a:	817b      	strh	r3, [r7, #10]
 
  switch (msgtype)
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2bf0      	cmp	r3, #240	; 0xf0
 8008740:	d019      	beq.n	8008776 <MIDI_DataRx+0x82>
 8008742:	2bf0      	cmp	r3, #240	; 0xf0
 8008744:	dc2f      	bgt.n	80087a6 <MIDI_DataRx+0xb2>
 8008746:	2be0      	cmp	r3, #224	; 0xe0
 8008748:	d020      	beq.n	800878c <MIDI_DataRx+0x98>
 800874a:	2be0      	cmp	r3, #224	; 0xe0
 800874c:	dc2b      	bgt.n	80087a6 <MIDI_DataRx+0xb2>
 800874e:	2bd0      	cmp	r3, #208	; 0xd0
 8008750:	d01e      	beq.n	8008790 <MIDI_DataRx+0x9c>
 8008752:	2bd0      	cmp	r3, #208	; 0xd0
 8008754:	dc27      	bgt.n	80087a6 <MIDI_DataRx+0xb2>
 8008756:	2bc0      	cmp	r3, #192	; 0xc0
 8008758:	d01c      	beq.n	8008794 <MIDI_DataRx+0xa0>
 800875a:	2bc0      	cmp	r3, #192	; 0xc0
 800875c:	dc23      	bgt.n	80087a6 <MIDI_DataRx+0xb2>
 800875e:	2bb0      	cmp	r3, #176	; 0xb0
 8008760:	d01a      	beq.n	8008798 <MIDI_DataRx+0xa4>
 8008762:	2bb0      	cmp	r3, #176	; 0xb0
 8008764:	dc1f      	bgt.n	80087a6 <MIDI_DataRx+0xb2>
 8008766:	2ba0      	cmp	r3, #160	; 0xa0
 8008768:	d018      	beq.n	800879c <MIDI_DataRx+0xa8>
 800876a:	2ba0      	cmp	r3, #160	; 0xa0
 800876c:	dc1b      	bgt.n	80087a6 <MIDI_DataRx+0xb2>
 800876e:	2b80      	cmp	r3, #128	; 0x80
 8008770:	d016      	beq.n	80087a0 <MIDI_DataRx+0xac>
 8008772:	2b90      	cmp	r3, #144	; 0x90
	  //else
	  //{
	  //play_note(notepos, velocity);
	  //}
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 8008774:	e017      	b.n	80087a6 <MIDI_DataRx+0xb2>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 8008776:	7b7b      	ldrb	r3, [r7, #13]
 8008778:	2b7e      	cmp	r3, #126	; 0x7e
 800877a:	d113      	bne.n	80087a4 <MIDI_DataRx+0xb0>
 800877c:	7b3b      	ldrb	r3, [r7, #12]
 800877e:	2b7f      	cmp	r3, #127	; 0x7f
 8008780:	d110      	bne.n	80087a4 <MIDI_DataRx+0xb0>
		  MIDI_DataTx(SysexID, 15);
 8008782:	210f      	movs	r1, #15
 8008784:	480a      	ldr	r0, [pc, #40]	; (80087b0 <MIDI_DataRx+0xbc>)
 8008786:	f000 f815 	bl	80087b4 <MIDI_DataTx>
	  }
	  break;
 800878a:	e00b      	b.n	80087a4 <MIDI_DataRx+0xb0>
	  break;
 800878c:	bf00      	nop
 800878e:	e00a      	b.n	80087a6 <MIDI_DataRx+0xb2>
	  break;
 8008790:	bf00      	nop
 8008792:	e008      	b.n	80087a6 <MIDI_DataRx+0xb2>
	  break;
 8008794:	bf00      	nop
 8008796:	e006      	b.n	80087a6 <MIDI_DataRx+0xb2>
	  break;
 8008798:	bf00      	nop
 800879a:	e004      	b.n	80087a6 <MIDI_DataRx+0xb2>
	  break;
 800879c:	bf00      	nop
 800879e:	e002      	b.n	80087a6 <MIDI_DataRx+0xb2>
	  break;
 80087a0:	bf00      	nop
 80087a2:	e000      	b.n	80087a6 <MIDI_DataRx+0xb2>
	  break;
 80087a4:	bf00      	nop
  }
  }
  return 0;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	200001f0 	.word	0x200001f0

080087b4 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 80087c4:	e017      	b.n	80087f6 <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	441a      	add	r2, r3
 80087cc:	4b0f      	ldr	r3, [pc, #60]	; (800880c <MIDI_DataTx+0x58>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	7811      	ldrb	r1, [r2, #0]
 80087d2:	4a0f      	ldr	r2, [pc, #60]	; (8008810 <MIDI_DataTx+0x5c>)
 80087d4:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 80087d6:	4b0d      	ldr	r3, [pc, #52]	; (800880c <MIDI_DataTx+0x58>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3301      	adds	r3, #1
 80087dc:	4a0b      	ldr	r2, [pc, #44]	; (800880c <MIDI_DataTx+0x58>)
 80087de:	6013      	str	r3, [r2, #0]
    i++;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 80087e6:	4b09      	ldr	r3, [pc, #36]	; (800880c <MIDI_DataTx+0x58>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ee:	d102      	bne.n	80087f6 <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 80087f0:	4b06      	ldr	r3, [pc, #24]	; (800880c <MIDI_DataTx+0x58>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	601a      	str	r2, [r3, #0]
  while (i < length) {
 80087f6:	887b      	ldrh	r3, [r7, #2]
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d3e3      	bcc.n	80087c6 <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 80087fe:	f7fe fb85 	bl	8006f0c <USBD_MIDI_SendPacket>
  return USBD_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20000364 	.word	0x20000364
 8008810:	200003b4 	.word	0x200003b4

08008814 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b0ac      	sub	sp, #176	; 0xb0
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800881c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	605a      	str	r2, [r3, #4]
 8008826:	609a      	str	r2, [r3, #8]
 8008828:	60da      	str	r2, [r3, #12]
 800882a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800882c:	f107 0314 	add.w	r3, r7, #20
 8008830:	2288      	movs	r2, #136	; 0x88
 8008832:	2100      	movs	r1, #0
 8008834:	4618      	mov	r0, r3
 8008836:	f000 fc5b 	bl	80090f0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008842:	d173      	bne.n	800892c <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008848:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800884a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800884e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008852:	2301      	movs	r3, #1
 8008854:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008856:	2301      	movs	r3, #1
 8008858:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800885a:	2318      	movs	r3, #24
 800885c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800885e:	2307      	movs	r3, #7
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008862:	2302      	movs	r3, #2
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008866:	2302      	movs	r3, #2
 8008868:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800886a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800886e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008870:	f107 0314 	add.w	r3, r7, #20
 8008874:	4618      	mov	r0, r3
 8008876:	f7fa fdcf 	bl	8003418 <HAL_RCCEx_PeriphCLKConfig>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008880:	f7f8 f850 	bl	8000924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008884:	4b2b      	ldr	r3, [pc, #172]	; (8008934 <HAL_PCD_MspInit+0x120>)
 8008886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008888:	4a2a      	ldr	r2, [pc, #168]	; (8008934 <HAL_PCD_MspInit+0x120>)
 800888a:	f043 0301 	orr.w	r3, r3, #1
 800888e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008890:	4b28      	ldr	r3, [pc, #160]	; (8008934 <HAL_PCD_MspInit+0x120>)
 8008892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	613b      	str	r3, [r7, #16]
 800889a:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800889c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80088a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a4:	2302      	movs	r3, #2
 80088a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088b0:	2303      	movs	r3, #3
 80088b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088b6:	230a      	movs	r3, #10
 80088b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80088c0:	4619      	mov	r1, r3
 80088c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088c6:	f7f8 fb7f 	bl	8000fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088ca:	4b1a      	ldr	r3, [pc, #104]	; (8008934 <HAL_PCD_MspInit+0x120>)
 80088cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ce:	4a19      	ldr	r2, [pc, #100]	; (8008934 <HAL_PCD_MspInit+0x120>)
 80088d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088d6:	4b17      	ldr	r3, [pc, #92]	; (8008934 <HAL_PCD_MspInit+0x120>)
 80088d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088de:	60fb      	str	r3, [r7, #12]
 80088e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088e2:	4b14      	ldr	r3, [pc, #80]	; (8008934 <HAL_PCD_MspInit+0x120>)
 80088e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d114      	bne.n	8008918 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ee:	4b11      	ldr	r3, [pc, #68]	; (8008934 <HAL_PCD_MspInit+0x120>)
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	4a10      	ldr	r2, [pc, #64]	; (8008934 <HAL_PCD_MspInit+0x120>)
 80088f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088f8:	6593      	str	r3, [r2, #88]	; 0x58
 80088fa:	4b0e      	ldr	r3, [pc, #56]	; (8008934 <HAL_PCD_MspInit+0x120>)
 80088fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008902:	60bb      	str	r3, [r7, #8]
 8008904:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008906:	f7f9 ff45 	bl	8002794 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800890a:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <HAL_PCD_MspInit+0x120>)
 800890c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800890e:	4a09      	ldr	r2, [pc, #36]	; (8008934 <HAL_PCD_MspInit+0x120>)
 8008910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008914:	6593      	str	r3, [r2, #88]	; 0x58
 8008916:	e001      	b.n	800891c <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008918:	f7f9 ff3c 	bl	8002794 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800891c:	2200      	movs	r2, #0
 800891e:	2100      	movs	r1, #0
 8008920:	2043      	movs	r0, #67	; 0x43
 8008922:	f7f8 fb27 	bl	8000f74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008926:	2043      	movs	r0, #67	; 0x43
 8008928:	f7f8 fb40 	bl	8000fac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800892c:	bf00      	nop
 800892e:	37b0      	adds	r7, #176	; 0xb0
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	40021000 	.word	0x40021000

08008938 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f7fe fc15 	bl	800717e <USBD_LL_SetupStage>
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	6879      	ldr	r1, [r7, #4]
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	440b      	add	r3, r1
 800897c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	4619      	mov	r1, r3
 8008986:	f7fe fc4f 	bl	8007228 <USBD_LL_DataOutStage>
}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b082      	sub	sp, #8
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	460b      	mov	r3, r1
 800899c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089a4:	78fa      	ldrb	r2, [r7, #3]
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	4613      	mov	r3, r2
 80089aa:	00db      	lsls	r3, r3, #3
 80089ac:	4413      	add	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	440b      	add	r3, r1
 80089b2:	334c      	adds	r3, #76	; 0x4c
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	78fb      	ldrb	r3, [r7, #3]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7fe fc98 	bl	80072ee <USBD_LL_DataInStage>
}
 80089be:	bf00      	nop
 80089c0:	3708      	adds	r7, #8
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe fdac 	bl	8007532 <USBD_LL_SOF>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089ea:	2301      	movs	r3, #1
 80089ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d001      	beq.n	80089fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089f6:	f7f7 ff95 	bl	8000924 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a00:	7bfa      	ldrb	r2, [r7, #15]
 8008a02:	4611      	mov	r1, r2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fe fd56 	bl	80074b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fd02 	bl	800741a <USBD_LL_Reset>
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6812      	ldr	r2, [r2, #0]
 8008a36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fd45 	bl	80074d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a54:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <HAL_PCD_SuspendCallback+0x48>)
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	4a03      	ldr	r2, [pc, #12]	; (8008a68 <HAL_PCD_SuspendCallback+0x48>)
 8008a5a:	f043 0306 	orr.w	r3, r3, #6
 8008a5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	e000ed00 	.word	0xe000ed00

08008a6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6812      	ldr	r2, [r2, #0]
 8008a82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a86:	f023 0301 	bic.w	r3, r3, #1
 8008a8a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a1b      	ldr	r3, [r3, #32]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a94:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <HAL_PCD_ResumeCallback+0x4c>)
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	4a07      	ldr	r2, [pc, #28]	; (8008ab8 <HAL_PCD_ResumeCallback+0x4c>)
 8008a9a:	f023 0306 	bic.w	r3, r3, #6
 8008a9e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008aa0:	f000 faf6 	bl	8009090 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe fd29 	bl	8007502 <USBD_LL_Resume>
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	e000ed00 	.word	0xe000ed00

08008abc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fd75 	bl	80075c2 <USBD_LL_IsoOUTIncomplete>
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	4611      	mov	r1, r2
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fd3d 	bl	8007576 <USBD_LL_IsoINIncomplete>
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fe fd7b 	bl	800760e <USBD_LL_DevConnected>
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fd78 	bl	8007624 <USBD_LL_DevDisconnected>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d13c      	bne.n	8008bc6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008b4c:	4a20      	ldr	r2, [pc, #128]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b58:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b5c:	4b1c      	ldr	r3, [pc, #112]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008b64:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b66:	2206      	movs	r2, #6
 8008b68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b6a:	4b19      	ldr	r3, [pc, #100]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b70:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b72:	2202      	movs	r2, #2
 8008b74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b76:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b7c:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b82:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b94:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b9a:	480d      	ldr	r0, [pc, #52]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008b9c:	f7f8 fbd6 	bl	800134c <HAL_PCD_Init>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ba6:	f7f7 febd 	bl	8000924 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008baa:	2180      	movs	r1, #128	; 0x80
 8008bac:	4808      	ldr	r0, [pc, #32]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008bae:	f7f9 fd58 	bl	8002662 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008bb2:	2240      	movs	r2, #64	; 0x40
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	4806      	ldr	r0, [pc, #24]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008bb8:	f7f9 fd0c 	bl	80025d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008bbc:	2280      	movs	r2, #128	; 0x80
 8008bbe:	2101      	movs	r1, #1
 8008bc0:	4803      	ldr	r0, [pc, #12]	; (8008bd0 <USBD_LL_Init+0x94>)
 8008bc2:	f7f9 fd07 	bl	80025d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000988 	.word	0x20000988

08008bd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f8 fcd2 	bl	8001594 <HAL_PCD_Start>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d816      	bhi.n	8008c28 <USBD_LL_Start+0x54>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <USBD_LL_Start+0x2c>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c11 	.word	0x08008c11
 8008c04:	08008c17 	.word	0x08008c17
 8008c08:	08008c1d 	.word	0x08008c1d
 8008c0c:	08008c23 	.word	0x08008c23
    case HAL_OK :
      usb_status = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
    break;
 8008c14:	e00b      	b.n	8008c2e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c16:	2303      	movs	r3, #3
 8008c18:	73fb      	strb	r3, [r7, #15]
    break;
 8008c1a:	e008      	b.n	8008c2e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c20:	e005      	b.n	8008c2e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c22:	2303      	movs	r3, #3
 8008c24:	73fb      	strb	r3, [r7, #15]
    break;
 8008c26:	e002      	b.n	8008c2e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2c:	bf00      	nop
  }
  return usb_status;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3710      	adds	r7, #16
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	4608      	mov	r0, r1
 8008c42:	4611      	mov	r1, r2
 8008c44:	461a      	mov	r2, r3
 8008c46:	4603      	mov	r3, r0
 8008c48:	70fb      	strb	r3, [r7, #3]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70bb      	strb	r3, [r7, #2]
 8008c4e:	4613      	mov	r3, r2
 8008c50:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008c60:	78bb      	ldrb	r3, [r7, #2]
 8008c62:	883a      	ldrh	r2, [r7, #0]
 8008c64:	78f9      	ldrb	r1, [r7, #3]
 8008c66:	f7f9 f97c 	bl	8001f62 <HAL_PCD_EP_Open>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d817      	bhi.n	8008ca4 <USBD_LL_OpenEP+0x6c>
 8008c74:	a201      	add	r2, pc, #4	; (adr r2, 8008c7c <USBD_LL_OpenEP+0x44>)
 8008c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c7a:	bf00      	nop
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008c93 	.word	0x08008c93
 8008c84:	08008c99 	.word	0x08008c99
 8008c88:	08008c9f 	.word	0x08008c9f
    case HAL_OK :
      usb_status = USBD_OK;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c90:	e00b      	b.n	8008caa <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c92:	2303      	movs	r3, #3
 8008c94:	73fb      	strb	r3, [r7, #15]
    break;
 8008c96:	e008      	b.n	8008caa <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	e005      	b.n	8008caa <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca2:	e002      	b.n	8008caa <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	bf00      	nop
  }
  return usb_status;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cce:	78fa      	ldrb	r2, [r7, #3]
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7f9 f9ad 	bl	8002032 <HAL_PCD_EP_Close>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	2b03      	cmp	r3, #3
 8008ce0:	d816      	bhi.n	8008d10 <USBD_LL_CloseEP+0x5c>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <USBD_LL_CloseEP+0x34>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008cff 	.word	0x08008cff
 8008cf0:	08008d05 	.word	0x08008d05
 8008cf4:	08008d0b 	.word	0x08008d0b
    case HAL_OK :
      usb_status = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e00b      	b.n	8008d16 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	e008      	b.n	8008d16 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	e005      	b.n	8008d16 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0e:	e002      	b.n	8008d16 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	bf00      	nop
  }
  return usb_status;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d3a:	78fa      	ldrb	r2, [r7, #3]
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f9 fa54 	bl	80021ec <HAL_PCD_EP_SetStall>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d816      	bhi.n	8008d7c <USBD_LL_StallEP+0x5c>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <USBD_LL_StallEP+0x34>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008d65 	.word	0x08008d65
 8008d58:	08008d6b 	.word	0x08008d6b
 8008d5c:	08008d71 	.word	0x08008d71
 8008d60:	08008d77 	.word	0x08008d77
    case HAL_OK :
      usb_status = USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
    break;
 8008d68:	e00b      	b.n	8008d82 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6e:	e008      	b.n	8008d82 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
    break;
 8008d74:	e005      	b.n	8008d82 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d76:	2303      	movs	r3, #3
 8008d78:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7a:	e002      	b.n	8008d82 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d80:	bf00      	nop
  }
  return usb_status;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	4611      	mov	r1, r2
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7f9 fa80 	bl	80022b0 <HAL_PCD_EP_ClrStall>
 8008db0:	4603      	mov	r3, r0
 8008db2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d816      	bhi.n	8008de8 <USBD_LL_ClearStallEP+0x5c>
 8008dba:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <USBD_LL_ClearStallEP+0x34>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008dd1 	.word	0x08008dd1
 8008dc4:	08008dd7 	.word	0x08008dd7
 8008dc8:	08008ddd 	.word	0x08008ddd
 8008dcc:	08008de3 	.word	0x08008de3
    case HAL_OK :
      usb_status = USBD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd4:	e00b      	b.n	8008dee <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dda:	e008      	b.n	8008dee <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	73fb      	strb	r3, [r7, #15]
    break;
 8008de0:	e005      	b.n	8008dee <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008de2:	2303      	movs	r3, #3
 8008de4:	73fb      	strb	r3, [r7, #15]
    break;
 8008de6:	e002      	b.n	8008dee <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008de8:	2303      	movs	r3, #3
 8008dea:	73fb      	strb	r3, [r7, #15]
    break;
 8008dec:	bf00      	nop
  }
  return usb_status;
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3710      	adds	r7, #16
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da0b      	bge.n	8008e2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	440b      	add	r3, r1
 8008e26:	333e      	adds	r3, #62	; 0x3e
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	e00b      	b.n	8008e44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e32:	68f9      	ldr	r1, [r7, #12]
 8008e34:	4613      	mov	r3, r2
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	440b      	add	r3, r1
 8008e3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f9 f852 	bl	8001f18 <HAL_PCD_SetAddress>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d816      	bhi.n	8008eac <USBD_LL_SetUSBAddress+0x5c>
 8008e7e:	a201      	add	r2, pc, #4	; (adr r2, 8008e84 <USBD_LL_SetUSBAddress+0x34>)
 8008e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e84:	08008e95 	.word	0x08008e95
 8008e88:	08008e9b 	.word	0x08008e9b
 8008e8c:	08008ea1 	.word	0x08008ea1
 8008e90:	08008ea7 	.word	0x08008ea7
    case HAL_OK :
      usb_status = USBD_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73fb      	strb	r3, [r7, #15]
    break;
 8008e98:	e00b      	b.n	8008eb2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e9e:	e008      	b.n	8008eb2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea4:	e005      	b.n	8008eb2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eaa:	e002      	b.n	8008eb2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008eac:	2303      	movs	r3, #3
 8008eae:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb0:	bf00      	nop
  }
  return usb_status;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	607a      	str	r2, [r7, #4]
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	460b      	mov	r3, r1
 8008eca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008eda:	7af9      	ldrb	r1, [r7, #11]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	f7f9 f947 	bl	8002172 <HAL_PCD_EP_Transmit>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008ee8:	7dbb      	ldrb	r3, [r7, #22]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d816      	bhi.n	8008f1c <USBD_LL_Transmit+0x60>
 8008eee:	a201      	add	r2, pc, #4	; (adr r2, 8008ef4 <USBD_LL_Transmit+0x38>)
 8008ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08008f0b 	.word	0x08008f0b
 8008efc:	08008f11 	.word	0x08008f11
 8008f00:	08008f17 	.word	0x08008f17
    case HAL_OK :
      usb_status = USBD_OK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	75fb      	strb	r3, [r7, #23]
    break;
 8008f08:	e00b      	b.n	8008f22 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	75fb      	strb	r3, [r7, #23]
    break;
 8008f0e:	e008      	b.n	8008f22 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f10:	2301      	movs	r3, #1
 8008f12:	75fb      	strb	r3, [r7, #23]
    break;
 8008f14:	e005      	b.n	8008f22 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f16:	2303      	movs	r3, #3
 8008f18:	75fb      	strb	r3, [r7, #23]
    break;
 8008f1a:	e002      	b.n	8008f22 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	75fb      	strb	r3, [r7, #23]
    break;
 8008f20:	bf00      	nop
  }
  return usb_status;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f4a:	7af9      	ldrb	r1, [r7, #11]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	f7f9 f8b9 	bl	80020c6 <HAL_PCD_EP_Receive>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f58:	7dbb      	ldrb	r3, [r7, #22]
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d816      	bhi.n	8008f8c <USBD_LL_PrepareReceive+0x60>
 8008f5e:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <USBD_LL_PrepareReceive+0x38>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008f75 	.word	0x08008f75
 8008f68:	08008f7b 	.word	0x08008f7b
 8008f6c:	08008f81 	.word	0x08008f81
 8008f70:	08008f87 	.word	0x08008f87
    case HAL_OK :
      usb_status = USBD_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	75fb      	strb	r3, [r7, #23]
    break;
 8008f78:	e00b      	b.n	8008f92 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	75fb      	strb	r3, [r7, #23]
    break;
 8008f7e:	e008      	b.n	8008f92 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f80:	2301      	movs	r3, #1
 8008f82:	75fb      	strb	r3, [r7, #23]
    break;
 8008f84:	e005      	b.n	8008f92 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f86:	2303      	movs	r3, #3
 8008f88:	75fb      	strb	r3, [r7, #23]
    break;
 8008f8a:	e002      	b.n	8008f92 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	75fb      	strb	r3, [r7, #23]
    break;
 8008f90:	bf00      	nop
  }
  return usb_status;
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fae:	78fa      	ldrb	r2, [r7, #3]
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7f9 f8c5 	bl	8002142 <HAL_PCD_EP_GetRxCount>
 8008fb8:	4603      	mov	r3, r0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <HAL_PCDEx_LPM_Callback+0x18>
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d01f      	beq.n	800901a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8008fda:	e03b      	b.n	8009054 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d007      	beq.n	8008ff4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008fe4:	f000 f854 	bl	8009090 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	; (800905c <HAL_PCDEx_LPM_Callback+0x98>)
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	4a1b      	ldr	r2, [pc, #108]	; (800905c <HAL_PCDEx_LPM_Callback+0x98>)
 8008fee:	f023 0306 	bic.w	r3, r3, #6
 8008ff2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	6812      	ldr	r2, [r2, #0]
 8009002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009006:	f023 0301 	bic.w	r3, r3, #1
 800900a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fa75 	bl	8007502 <USBD_LL_Resume>
    break;
 8009018:	e01c      	b.n	8009054 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6812      	ldr	r2, [r2, #0]
 8009028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800902c:	f043 0301 	orr.w	r3, r3, #1
 8009030:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009038:	4618      	mov	r0, r3
 800903a:	f7fe fa4c 	bl	80074d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009046:	4b05      	ldr	r3, [pc, #20]	; (800905c <HAL_PCDEx_LPM_Callback+0x98>)
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	4a04      	ldr	r2, [pc, #16]	; (800905c <HAL_PCDEx_LPM_Callback+0x98>)
 800904c:	f043 0306 	orr.w	r3, r3, #6
 8009050:	6113      	str	r3, [r2, #16]
    break;
 8009052:	bf00      	nop
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	e000ed00 	.word	0xe000ed00

08009060 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 8009068:	4b03      	ldr	r3, [pc, #12]	; (8009078 <USBD_static_malloc+0x18>)
}
 800906a:	4618      	mov	r0, r3
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	20000e94 	.word	0x20000e94

0800907c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009094:	f7f7 fae0 	bl	8000658 <SystemClock_Config>
}
 8009098:	bf00      	nop
 800909a:	bd80      	pop	{r7, pc}

0800909c <__errno>:
 800909c:	4b01      	ldr	r3, [pc, #4]	; (80090a4 <__errno+0x8>)
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000208 	.word	0x20000208

080090a8 <__libc_init_array>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4d0d      	ldr	r5, [pc, #52]	; (80090e0 <__libc_init_array+0x38>)
 80090ac:	4c0d      	ldr	r4, [pc, #52]	; (80090e4 <__libc_init_array+0x3c>)
 80090ae:	1b64      	subs	r4, r4, r5
 80090b0:	10a4      	asrs	r4, r4, #2
 80090b2:	2600      	movs	r6, #0
 80090b4:	42a6      	cmp	r6, r4
 80090b6:	d109      	bne.n	80090cc <__libc_init_array+0x24>
 80090b8:	4d0b      	ldr	r5, [pc, #44]	; (80090e8 <__libc_init_array+0x40>)
 80090ba:	4c0c      	ldr	r4, [pc, #48]	; (80090ec <__libc_init_array+0x44>)
 80090bc:	f000 ffae 	bl	800a01c <_init>
 80090c0:	1b64      	subs	r4, r4, r5
 80090c2:	10a4      	asrs	r4, r4, #2
 80090c4:	2600      	movs	r6, #0
 80090c6:	42a6      	cmp	r6, r4
 80090c8:	d105      	bne.n	80090d6 <__libc_init_array+0x2e>
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d0:	4798      	blx	r3
 80090d2:	3601      	adds	r6, #1
 80090d4:	e7ee      	b.n	80090b4 <__libc_init_array+0xc>
 80090d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80090da:	4798      	blx	r3
 80090dc:	3601      	adds	r6, #1
 80090de:	e7f2      	b.n	80090c6 <__libc_init_array+0x1e>
 80090e0:	0800a168 	.word	0x0800a168
 80090e4:	0800a168 	.word	0x0800a168
 80090e8:	0800a168 	.word	0x0800a168
 80090ec:	0800a16c 	.word	0x0800a16c

080090f0 <memset>:
 80090f0:	4402      	add	r2, r0
 80090f2:	4603      	mov	r3, r0
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d100      	bne.n	80090fa <memset+0xa>
 80090f8:	4770      	bx	lr
 80090fa:	f803 1b01 	strb.w	r1, [r3], #1
 80090fe:	e7f9      	b.n	80090f4 <memset+0x4>

08009100 <iprintf>:
 8009100:	b40f      	push	{r0, r1, r2, r3}
 8009102:	4b0a      	ldr	r3, [pc, #40]	; (800912c <iprintf+0x2c>)
 8009104:	b513      	push	{r0, r1, r4, lr}
 8009106:	681c      	ldr	r4, [r3, #0]
 8009108:	b124      	cbz	r4, 8009114 <iprintf+0x14>
 800910a:	69a3      	ldr	r3, [r4, #24]
 800910c:	b913      	cbnz	r3, 8009114 <iprintf+0x14>
 800910e:	4620      	mov	r0, r4
 8009110:	f000 f866 	bl	80091e0 <__sinit>
 8009114:	ab05      	add	r3, sp, #20
 8009116:	9a04      	ldr	r2, [sp, #16]
 8009118:	68a1      	ldr	r1, [r4, #8]
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	4620      	mov	r0, r4
 800911e:	f000 f9bd 	bl	800949c <_vfiprintf_r>
 8009122:	b002      	add	sp, #8
 8009124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009128:	b004      	add	sp, #16
 800912a:	4770      	bx	lr
 800912c:	20000208 	.word	0x20000208

08009130 <std>:
 8009130:	2300      	movs	r3, #0
 8009132:	b510      	push	{r4, lr}
 8009134:	4604      	mov	r4, r0
 8009136:	e9c0 3300 	strd	r3, r3, [r0]
 800913a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800913e:	6083      	str	r3, [r0, #8]
 8009140:	8181      	strh	r1, [r0, #12]
 8009142:	6643      	str	r3, [r0, #100]	; 0x64
 8009144:	81c2      	strh	r2, [r0, #14]
 8009146:	6183      	str	r3, [r0, #24]
 8009148:	4619      	mov	r1, r3
 800914a:	2208      	movs	r2, #8
 800914c:	305c      	adds	r0, #92	; 0x5c
 800914e:	f7ff ffcf 	bl	80090f0 <memset>
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <std+0x38>)
 8009154:	6263      	str	r3, [r4, #36]	; 0x24
 8009156:	4b05      	ldr	r3, [pc, #20]	; (800916c <std+0x3c>)
 8009158:	62a3      	str	r3, [r4, #40]	; 0x28
 800915a:	4b05      	ldr	r3, [pc, #20]	; (8009170 <std+0x40>)
 800915c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <std+0x44>)
 8009160:	6224      	str	r4, [r4, #32]
 8009162:	6323      	str	r3, [r4, #48]	; 0x30
 8009164:	bd10      	pop	{r4, pc}
 8009166:	bf00      	nop
 8009168:	08009a45 	.word	0x08009a45
 800916c:	08009a67 	.word	0x08009a67
 8009170:	08009a9f 	.word	0x08009a9f
 8009174:	08009ac3 	.word	0x08009ac3

08009178 <_cleanup_r>:
 8009178:	4901      	ldr	r1, [pc, #4]	; (8009180 <_cleanup_r+0x8>)
 800917a:	f000 b8af 	b.w	80092dc <_fwalk_reent>
 800917e:	bf00      	nop
 8009180:	08009d9d 	.word	0x08009d9d

08009184 <__sfmoreglue>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	2268      	movs	r2, #104	; 0x68
 8009188:	1e4d      	subs	r5, r1, #1
 800918a:	4355      	muls	r5, r2
 800918c:	460e      	mov	r6, r1
 800918e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009192:	f000 f8e5 	bl	8009360 <_malloc_r>
 8009196:	4604      	mov	r4, r0
 8009198:	b140      	cbz	r0, 80091ac <__sfmoreglue+0x28>
 800919a:	2100      	movs	r1, #0
 800919c:	e9c0 1600 	strd	r1, r6, [r0]
 80091a0:	300c      	adds	r0, #12
 80091a2:	60a0      	str	r0, [r4, #8]
 80091a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80091a8:	f7ff ffa2 	bl	80090f0 <memset>
 80091ac:	4620      	mov	r0, r4
 80091ae:	bd70      	pop	{r4, r5, r6, pc}

080091b0 <__sfp_lock_acquire>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__sfp_lock_acquire+0x8>)
 80091b2:	f000 b8b3 	b.w	800931c <__retarget_lock_acquire_recursive>
 80091b6:	bf00      	nop
 80091b8:	20002a65 	.word	0x20002a65

080091bc <__sfp_lock_release>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__sfp_lock_release+0x8>)
 80091be:	f000 b8ae 	b.w	800931e <__retarget_lock_release_recursive>
 80091c2:	bf00      	nop
 80091c4:	20002a65 	.word	0x20002a65

080091c8 <__sinit_lock_acquire>:
 80091c8:	4801      	ldr	r0, [pc, #4]	; (80091d0 <__sinit_lock_acquire+0x8>)
 80091ca:	f000 b8a7 	b.w	800931c <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	20002a66 	.word	0x20002a66

080091d4 <__sinit_lock_release>:
 80091d4:	4801      	ldr	r0, [pc, #4]	; (80091dc <__sinit_lock_release+0x8>)
 80091d6:	f000 b8a2 	b.w	800931e <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	20002a66 	.word	0x20002a66

080091e0 <__sinit>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	4604      	mov	r4, r0
 80091e4:	f7ff fff0 	bl	80091c8 <__sinit_lock_acquire>
 80091e8:	69a3      	ldr	r3, [r4, #24]
 80091ea:	b11b      	cbz	r3, 80091f4 <__sinit+0x14>
 80091ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f0:	f7ff bff0 	b.w	80091d4 <__sinit_lock_release>
 80091f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091f8:	6523      	str	r3, [r4, #80]	; 0x50
 80091fa:	4b13      	ldr	r3, [pc, #76]	; (8009248 <__sinit+0x68>)
 80091fc:	4a13      	ldr	r2, [pc, #76]	; (800924c <__sinit+0x6c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	62a2      	str	r2, [r4, #40]	; 0x28
 8009202:	42a3      	cmp	r3, r4
 8009204:	bf04      	itt	eq
 8009206:	2301      	moveq	r3, #1
 8009208:	61a3      	streq	r3, [r4, #24]
 800920a:	4620      	mov	r0, r4
 800920c:	f000 f820 	bl	8009250 <__sfp>
 8009210:	6060      	str	r0, [r4, #4]
 8009212:	4620      	mov	r0, r4
 8009214:	f000 f81c 	bl	8009250 <__sfp>
 8009218:	60a0      	str	r0, [r4, #8]
 800921a:	4620      	mov	r0, r4
 800921c:	f000 f818 	bl	8009250 <__sfp>
 8009220:	2200      	movs	r2, #0
 8009222:	60e0      	str	r0, [r4, #12]
 8009224:	2104      	movs	r1, #4
 8009226:	6860      	ldr	r0, [r4, #4]
 8009228:	f7ff ff82 	bl	8009130 <std>
 800922c:	68a0      	ldr	r0, [r4, #8]
 800922e:	2201      	movs	r2, #1
 8009230:	2109      	movs	r1, #9
 8009232:	f7ff ff7d 	bl	8009130 <std>
 8009236:	68e0      	ldr	r0, [r4, #12]
 8009238:	2202      	movs	r2, #2
 800923a:	2112      	movs	r1, #18
 800923c:	f7ff ff78 	bl	8009130 <std>
 8009240:	2301      	movs	r3, #1
 8009242:	61a3      	str	r3, [r4, #24]
 8009244:	e7d2      	b.n	80091ec <__sinit+0xc>
 8009246:	bf00      	nop
 8009248:	0800a0c8 	.word	0x0800a0c8
 800924c:	08009179 	.word	0x08009179

08009250 <__sfp>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	4607      	mov	r7, r0
 8009254:	f7ff ffac 	bl	80091b0 <__sfp_lock_acquire>
 8009258:	4b1e      	ldr	r3, [pc, #120]	; (80092d4 <__sfp+0x84>)
 800925a:	681e      	ldr	r6, [r3, #0]
 800925c:	69b3      	ldr	r3, [r6, #24]
 800925e:	b913      	cbnz	r3, 8009266 <__sfp+0x16>
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff ffbd 	bl	80091e0 <__sinit>
 8009266:	3648      	adds	r6, #72	; 0x48
 8009268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800926c:	3b01      	subs	r3, #1
 800926e:	d503      	bpl.n	8009278 <__sfp+0x28>
 8009270:	6833      	ldr	r3, [r6, #0]
 8009272:	b30b      	cbz	r3, 80092b8 <__sfp+0x68>
 8009274:	6836      	ldr	r6, [r6, #0]
 8009276:	e7f7      	b.n	8009268 <__sfp+0x18>
 8009278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800927c:	b9d5      	cbnz	r5, 80092b4 <__sfp+0x64>
 800927e:	4b16      	ldr	r3, [pc, #88]	; (80092d8 <__sfp+0x88>)
 8009280:	60e3      	str	r3, [r4, #12]
 8009282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009286:	6665      	str	r5, [r4, #100]	; 0x64
 8009288:	f000 f847 	bl	800931a <__retarget_lock_init_recursive>
 800928c:	f7ff ff96 	bl	80091bc <__sfp_lock_release>
 8009290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009298:	6025      	str	r5, [r4, #0]
 800929a:	61a5      	str	r5, [r4, #24]
 800929c:	2208      	movs	r2, #8
 800929e:	4629      	mov	r1, r5
 80092a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092a4:	f7ff ff24 	bl	80090f0 <memset>
 80092a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092b0:	4620      	mov	r0, r4
 80092b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b4:	3468      	adds	r4, #104	; 0x68
 80092b6:	e7d9      	b.n	800926c <__sfp+0x1c>
 80092b8:	2104      	movs	r1, #4
 80092ba:	4638      	mov	r0, r7
 80092bc:	f7ff ff62 	bl	8009184 <__sfmoreglue>
 80092c0:	4604      	mov	r4, r0
 80092c2:	6030      	str	r0, [r6, #0]
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d1d5      	bne.n	8009274 <__sfp+0x24>
 80092c8:	f7ff ff78 	bl	80091bc <__sfp_lock_release>
 80092cc:	230c      	movs	r3, #12
 80092ce:	603b      	str	r3, [r7, #0]
 80092d0:	e7ee      	b.n	80092b0 <__sfp+0x60>
 80092d2:	bf00      	nop
 80092d4:	0800a0c8 	.word	0x0800a0c8
 80092d8:	ffff0001 	.word	0xffff0001

080092dc <_fwalk_reent>:
 80092dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e0:	4606      	mov	r6, r0
 80092e2:	4688      	mov	r8, r1
 80092e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092e8:	2700      	movs	r7, #0
 80092ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092ee:	f1b9 0901 	subs.w	r9, r9, #1
 80092f2:	d505      	bpl.n	8009300 <_fwalk_reent+0x24>
 80092f4:	6824      	ldr	r4, [r4, #0]
 80092f6:	2c00      	cmp	r4, #0
 80092f8:	d1f7      	bne.n	80092ea <_fwalk_reent+0xe>
 80092fa:	4638      	mov	r0, r7
 80092fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009300:	89ab      	ldrh	r3, [r5, #12]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d907      	bls.n	8009316 <_fwalk_reent+0x3a>
 8009306:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800930a:	3301      	adds	r3, #1
 800930c:	d003      	beq.n	8009316 <_fwalk_reent+0x3a>
 800930e:	4629      	mov	r1, r5
 8009310:	4630      	mov	r0, r6
 8009312:	47c0      	blx	r8
 8009314:	4307      	orrs	r7, r0
 8009316:	3568      	adds	r5, #104	; 0x68
 8009318:	e7e9      	b.n	80092ee <_fwalk_reent+0x12>

0800931a <__retarget_lock_init_recursive>:
 800931a:	4770      	bx	lr

0800931c <__retarget_lock_acquire_recursive>:
 800931c:	4770      	bx	lr

0800931e <__retarget_lock_release_recursive>:
 800931e:	4770      	bx	lr

08009320 <sbrk_aligned>:
 8009320:	b570      	push	{r4, r5, r6, lr}
 8009322:	4e0e      	ldr	r6, [pc, #56]	; (800935c <sbrk_aligned+0x3c>)
 8009324:	460c      	mov	r4, r1
 8009326:	6831      	ldr	r1, [r6, #0]
 8009328:	4605      	mov	r5, r0
 800932a:	b911      	cbnz	r1, 8009332 <sbrk_aligned+0x12>
 800932c:	f000 fb7a 	bl	8009a24 <_sbrk_r>
 8009330:	6030      	str	r0, [r6, #0]
 8009332:	4621      	mov	r1, r4
 8009334:	4628      	mov	r0, r5
 8009336:	f000 fb75 	bl	8009a24 <_sbrk_r>
 800933a:	1c43      	adds	r3, r0, #1
 800933c:	d00a      	beq.n	8009354 <sbrk_aligned+0x34>
 800933e:	1cc4      	adds	r4, r0, #3
 8009340:	f024 0403 	bic.w	r4, r4, #3
 8009344:	42a0      	cmp	r0, r4
 8009346:	d007      	beq.n	8009358 <sbrk_aligned+0x38>
 8009348:	1a21      	subs	r1, r4, r0
 800934a:	4628      	mov	r0, r5
 800934c:	f000 fb6a 	bl	8009a24 <_sbrk_r>
 8009350:	3001      	adds	r0, #1
 8009352:	d101      	bne.n	8009358 <sbrk_aligned+0x38>
 8009354:	f04f 34ff 	mov.w	r4, #4294967295
 8009358:	4620      	mov	r0, r4
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	20002a6c 	.word	0x20002a6c

08009360 <_malloc_r>:
 8009360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009364:	1ccd      	adds	r5, r1, #3
 8009366:	f025 0503 	bic.w	r5, r5, #3
 800936a:	3508      	adds	r5, #8
 800936c:	2d0c      	cmp	r5, #12
 800936e:	bf38      	it	cc
 8009370:	250c      	movcc	r5, #12
 8009372:	2d00      	cmp	r5, #0
 8009374:	4607      	mov	r7, r0
 8009376:	db01      	blt.n	800937c <_malloc_r+0x1c>
 8009378:	42a9      	cmp	r1, r5
 800937a:	d905      	bls.n	8009388 <_malloc_r+0x28>
 800937c:	230c      	movs	r3, #12
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	2600      	movs	r6, #0
 8009382:	4630      	mov	r0, r6
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	4e2e      	ldr	r6, [pc, #184]	; (8009444 <_malloc_r+0xe4>)
 800938a:	f000 fdbb 	bl	8009f04 <__malloc_lock>
 800938e:	6833      	ldr	r3, [r6, #0]
 8009390:	461c      	mov	r4, r3
 8009392:	bb34      	cbnz	r4, 80093e2 <_malloc_r+0x82>
 8009394:	4629      	mov	r1, r5
 8009396:	4638      	mov	r0, r7
 8009398:	f7ff ffc2 	bl	8009320 <sbrk_aligned>
 800939c:	1c43      	adds	r3, r0, #1
 800939e:	4604      	mov	r4, r0
 80093a0:	d14d      	bne.n	800943e <_malloc_r+0xde>
 80093a2:	6834      	ldr	r4, [r6, #0]
 80093a4:	4626      	mov	r6, r4
 80093a6:	2e00      	cmp	r6, #0
 80093a8:	d140      	bne.n	800942c <_malloc_r+0xcc>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	4631      	mov	r1, r6
 80093ae:	4638      	mov	r0, r7
 80093b0:	eb04 0803 	add.w	r8, r4, r3
 80093b4:	f000 fb36 	bl	8009a24 <_sbrk_r>
 80093b8:	4580      	cmp	r8, r0
 80093ba:	d13a      	bne.n	8009432 <_malloc_r+0xd2>
 80093bc:	6821      	ldr	r1, [r4, #0]
 80093be:	3503      	adds	r5, #3
 80093c0:	1a6d      	subs	r5, r5, r1
 80093c2:	f025 0503 	bic.w	r5, r5, #3
 80093c6:	3508      	adds	r5, #8
 80093c8:	2d0c      	cmp	r5, #12
 80093ca:	bf38      	it	cc
 80093cc:	250c      	movcc	r5, #12
 80093ce:	4629      	mov	r1, r5
 80093d0:	4638      	mov	r0, r7
 80093d2:	f7ff ffa5 	bl	8009320 <sbrk_aligned>
 80093d6:	3001      	adds	r0, #1
 80093d8:	d02b      	beq.n	8009432 <_malloc_r+0xd2>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	442b      	add	r3, r5
 80093de:	6023      	str	r3, [r4, #0]
 80093e0:	e00e      	b.n	8009400 <_malloc_r+0xa0>
 80093e2:	6822      	ldr	r2, [r4, #0]
 80093e4:	1b52      	subs	r2, r2, r5
 80093e6:	d41e      	bmi.n	8009426 <_malloc_r+0xc6>
 80093e8:	2a0b      	cmp	r2, #11
 80093ea:	d916      	bls.n	800941a <_malloc_r+0xba>
 80093ec:	1961      	adds	r1, r4, r5
 80093ee:	42a3      	cmp	r3, r4
 80093f0:	6025      	str	r5, [r4, #0]
 80093f2:	bf18      	it	ne
 80093f4:	6059      	strne	r1, [r3, #4]
 80093f6:	6863      	ldr	r3, [r4, #4]
 80093f8:	bf08      	it	eq
 80093fa:	6031      	streq	r1, [r6, #0]
 80093fc:	5162      	str	r2, [r4, r5]
 80093fe:	604b      	str	r3, [r1, #4]
 8009400:	4638      	mov	r0, r7
 8009402:	f104 060b 	add.w	r6, r4, #11
 8009406:	f000 fd83 	bl	8009f10 <__malloc_unlock>
 800940a:	f026 0607 	bic.w	r6, r6, #7
 800940e:	1d23      	adds	r3, r4, #4
 8009410:	1af2      	subs	r2, r6, r3
 8009412:	d0b6      	beq.n	8009382 <_malloc_r+0x22>
 8009414:	1b9b      	subs	r3, r3, r6
 8009416:	50a3      	str	r3, [r4, r2]
 8009418:	e7b3      	b.n	8009382 <_malloc_r+0x22>
 800941a:	6862      	ldr	r2, [r4, #4]
 800941c:	42a3      	cmp	r3, r4
 800941e:	bf0c      	ite	eq
 8009420:	6032      	streq	r2, [r6, #0]
 8009422:	605a      	strne	r2, [r3, #4]
 8009424:	e7ec      	b.n	8009400 <_malloc_r+0xa0>
 8009426:	4623      	mov	r3, r4
 8009428:	6864      	ldr	r4, [r4, #4]
 800942a:	e7b2      	b.n	8009392 <_malloc_r+0x32>
 800942c:	4634      	mov	r4, r6
 800942e:	6876      	ldr	r6, [r6, #4]
 8009430:	e7b9      	b.n	80093a6 <_malloc_r+0x46>
 8009432:	230c      	movs	r3, #12
 8009434:	603b      	str	r3, [r7, #0]
 8009436:	4638      	mov	r0, r7
 8009438:	f000 fd6a 	bl	8009f10 <__malloc_unlock>
 800943c:	e7a1      	b.n	8009382 <_malloc_r+0x22>
 800943e:	6025      	str	r5, [r4, #0]
 8009440:	e7de      	b.n	8009400 <_malloc_r+0xa0>
 8009442:	bf00      	nop
 8009444:	20002a68 	.word	0x20002a68

08009448 <__sfputc_r>:
 8009448:	6893      	ldr	r3, [r2, #8]
 800944a:	3b01      	subs	r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	b410      	push	{r4}
 8009450:	6093      	str	r3, [r2, #8]
 8009452:	da08      	bge.n	8009466 <__sfputc_r+0x1e>
 8009454:	6994      	ldr	r4, [r2, #24]
 8009456:	42a3      	cmp	r3, r4
 8009458:	db01      	blt.n	800945e <__sfputc_r+0x16>
 800945a:	290a      	cmp	r1, #10
 800945c:	d103      	bne.n	8009466 <__sfputc_r+0x1e>
 800945e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009462:	f000 bb33 	b.w	8009acc <__swbuf_r>
 8009466:	6813      	ldr	r3, [r2, #0]
 8009468:	1c58      	adds	r0, r3, #1
 800946a:	6010      	str	r0, [r2, #0]
 800946c:	7019      	strb	r1, [r3, #0]
 800946e:	4608      	mov	r0, r1
 8009470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009474:	4770      	bx	lr

08009476 <__sfputs_r>:
 8009476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009478:	4606      	mov	r6, r0
 800947a:	460f      	mov	r7, r1
 800947c:	4614      	mov	r4, r2
 800947e:	18d5      	adds	r5, r2, r3
 8009480:	42ac      	cmp	r4, r5
 8009482:	d101      	bne.n	8009488 <__sfputs_r+0x12>
 8009484:	2000      	movs	r0, #0
 8009486:	e007      	b.n	8009498 <__sfputs_r+0x22>
 8009488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800948c:	463a      	mov	r2, r7
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ffda 	bl	8009448 <__sfputc_r>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d1f3      	bne.n	8009480 <__sfputs_r+0xa>
 8009498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800949c <_vfiprintf_r>:
 800949c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a0:	460d      	mov	r5, r1
 80094a2:	b09d      	sub	sp, #116	; 0x74
 80094a4:	4614      	mov	r4, r2
 80094a6:	4698      	mov	r8, r3
 80094a8:	4606      	mov	r6, r0
 80094aa:	b118      	cbz	r0, 80094b4 <_vfiprintf_r+0x18>
 80094ac:	6983      	ldr	r3, [r0, #24]
 80094ae:	b90b      	cbnz	r3, 80094b4 <_vfiprintf_r+0x18>
 80094b0:	f7ff fe96 	bl	80091e0 <__sinit>
 80094b4:	4b89      	ldr	r3, [pc, #548]	; (80096dc <_vfiprintf_r+0x240>)
 80094b6:	429d      	cmp	r5, r3
 80094b8:	d11b      	bne.n	80094f2 <_vfiprintf_r+0x56>
 80094ba:	6875      	ldr	r5, [r6, #4]
 80094bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094be:	07d9      	lsls	r1, r3, #31
 80094c0:	d405      	bmi.n	80094ce <_vfiprintf_r+0x32>
 80094c2:	89ab      	ldrh	r3, [r5, #12]
 80094c4:	059a      	lsls	r2, r3, #22
 80094c6:	d402      	bmi.n	80094ce <_vfiprintf_r+0x32>
 80094c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ca:	f7ff ff27 	bl	800931c <__retarget_lock_acquire_recursive>
 80094ce:	89ab      	ldrh	r3, [r5, #12]
 80094d0:	071b      	lsls	r3, r3, #28
 80094d2:	d501      	bpl.n	80094d8 <_vfiprintf_r+0x3c>
 80094d4:	692b      	ldr	r3, [r5, #16]
 80094d6:	b9eb      	cbnz	r3, 8009514 <_vfiprintf_r+0x78>
 80094d8:	4629      	mov	r1, r5
 80094da:	4630      	mov	r0, r6
 80094dc:	f000 fb5a 	bl	8009b94 <__swsetup_r>
 80094e0:	b1c0      	cbz	r0, 8009514 <_vfiprintf_r+0x78>
 80094e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094e4:	07dc      	lsls	r4, r3, #31
 80094e6:	d50e      	bpl.n	8009506 <_vfiprintf_r+0x6a>
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	b01d      	add	sp, #116	; 0x74
 80094ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f2:	4b7b      	ldr	r3, [pc, #492]	; (80096e0 <_vfiprintf_r+0x244>)
 80094f4:	429d      	cmp	r5, r3
 80094f6:	d101      	bne.n	80094fc <_vfiprintf_r+0x60>
 80094f8:	68b5      	ldr	r5, [r6, #8]
 80094fa:	e7df      	b.n	80094bc <_vfiprintf_r+0x20>
 80094fc:	4b79      	ldr	r3, [pc, #484]	; (80096e4 <_vfiprintf_r+0x248>)
 80094fe:	429d      	cmp	r5, r3
 8009500:	bf08      	it	eq
 8009502:	68f5      	ldreq	r5, [r6, #12]
 8009504:	e7da      	b.n	80094bc <_vfiprintf_r+0x20>
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	0598      	lsls	r0, r3, #22
 800950a:	d4ed      	bmi.n	80094e8 <_vfiprintf_r+0x4c>
 800950c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800950e:	f7ff ff06 	bl	800931e <__retarget_lock_release_recursive>
 8009512:	e7e9      	b.n	80094e8 <_vfiprintf_r+0x4c>
 8009514:	2300      	movs	r3, #0
 8009516:	9309      	str	r3, [sp, #36]	; 0x24
 8009518:	2320      	movs	r3, #32
 800951a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800951e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009522:	2330      	movs	r3, #48	; 0x30
 8009524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096e8 <_vfiprintf_r+0x24c>
 8009528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800952c:	f04f 0901 	mov.w	r9, #1
 8009530:	4623      	mov	r3, r4
 8009532:	469a      	mov	sl, r3
 8009534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009538:	b10a      	cbz	r2, 800953e <_vfiprintf_r+0xa2>
 800953a:	2a25      	cmp	r2, #37	; 0x25
 800953c:	d1f9      	bne.n	8009532 <_vfiprintf_r+0x96>
 800953e:	ebba 0b04 	subs.w	fp, sl, r4
 8009542:	d00b      	beq.n	800955c <_vfiprintf_r+0xc0>
 8009544:	465b      	mov	r3, fp
 8009546:	4622      	mov	r2, r4
 8009548:	4629      	mov	r1, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff ff93 	bl	8009476 <__sfputs_r>
 8009550:	3001      	adds	r0, #1
 8009552:	f000 80aa 	beq.w	80096aa <_vfiprintf_r+0x20e>
 8009556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009558:	445a      	add	r2, fp
 800955a:	9209      	str	r2, [sp, #36]	; 0x24
 800955c:	f89a 3000 	ldrb.w	r3, [sl]
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 80a2 	beq.w	80096aa <_vfiprintf_r+0x20e>
 8009566:	2300      	movs	r3, #0
 8009568:	f04f 32ff 	mov.w	r2, #4294967295
 800956c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009570:	f10a 0a01 	add.w	sl, sl, #1
 8009574:	9304      	str	r3, [sp, #16]
 8009576:	9307      	str	r3, [sp, #28]
 8009578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800957c:	931a      	str	r3, [sp, #104]	; 0x68
 800957e:	4654      	mov	r4, sl
 8009580:	2205      	movs	r2, #5
 8009582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009586:	4858      	ldr	r0, [pc, #352]	; (80096e8 <_vfiprintf_r+0x24c>)
 8009588:	f7f6 fe22 	bl	80001d0 <memchr>
 800958c:	9a04      	ldr	r2, [sp, #16]
 800958e:	b9d8      	cbnz	r0, 80095c8 <_vfiprintf_r+0x12c>
 8009590:	06d1      	lsls	r1, r2, #27
 8009592:	bf44      	itt	mi
 8009594:	2320      	movmi	r3, #32
 8009596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800959a:	0713      	lsls	r3, r2, #28
 800959c:	bf44      	itt	mi
 800959e:	232b      	movmi	r3, #43	; 0x2b
 80095a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a4:	f89a 3000 	ldrb.w	r3, [sl]
 80095a8:	2b2a      	cmp	r3, #42	; 0x2a
 80095aa:	d015      	beq.n	80095d8 <_vfiprintf_r+0x13c>
 80095ac:	9a07      	ldr	r2, [sp, #28]
 80095ae:	4654      	mov	r4, sl
 80095b0:	2000      	movs	r0, #0
 80095b2:	f04f 0c0a 	mov.w	ip, #10
 80095b6:	4621      	mov	r1, r4
 80095b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095bc:	3b30      	subs	r3, #48	; 0x30
 80095be:	2b09      	cmp	r3, #9
 80095c0:	d94e      	bls.n	8009660 <_vfiprintf_r+0x1c4>
 80095c2:	b1b0      	cbz	r0, 80095f2 <_vfiprintf_r+0x156>
 80095c4:	9207      	str	r2, [sp, #28]
 80095c6:	e014      	b.n	80095f2 <_vfiprintf_r+0x156>
 80095c8:	eba0 0308 	sub.w	r3, r0, r8
 80095cc:	fa09 f303 	lsl.w	r3, r9, r3
 80095d0:	4313      	orrs	r3, r2
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	46a2      	mov	sl, r4
 80095d6:	e7d2      	b.n	800957e <_vfiprintf_r+0xe2>
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	1d19      	adds	r1, r3, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	9103      	str	r1, [sp, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bfbb      	ittet	lt
 80095e4:	425b      	neglt	r3, r3
 80095e6:	f042 0202 	orrlt.w	r2, r2, #2
 80095ea:	9307      	strge	r3, [sp, #28]
 80095ec:	9307      	strlt	r3, [sp, #28]
 80095ee:	bfb8      	it	lt
 80095f0:	9204      	strlt	r2, [sp, #16]
 80095f2:	7823      	ldrb	r3, [r4, #0]
 80095f4:	2b2e      	cmp	r3, #46	; 0x2e
 80095f6:	d10c      	bne.n	8009612 <_vfiprintf_r+0x176>
 80095f8:	7863      	ldrb	r3, [r4, #1]
 80095fa:	2b2a      	cmp	r3, #42	; 0x2a
 80095fc:	d135      	bne.n	800966a <_vfiprintf_r+0x1ce>
 80095fe:	9b03      	ldr	r3, [sp, #12]
 8009600:	1d1a      	adds	r2, r3, #4
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	9203      	str	r2, [sp, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	bfb8      	it	lt
 800960a:	f04f 33ff 	movlt.w	r3, #4294967295
 800960e:	3402      	adds	r4, #2
 8009610:	9305      	str	r3, [sp, #20]
 8009612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096f8 <_vfiprintf_r+0x25c>
 8009616:	7821      	ldrb	r1, [r4, #0]
 8009618:	2203      	movs	r2, #3
 800961a:	4650      	mov	r0, sl
 800961c:	f7f6 fdd8 	bl	80001d0 <memchr>
 8009620:	b140      	cbz	r0, 8009634 <_vfiprintf_r+0x198>
 8009622:	2340      	movs	r3, #64	; 0x40
 8009624:	eba0 000a 	sub.w	r0, r0, sl
 8009628:	fa03 f000 	lsl.w	r0, r3, r0
 800962c:	9b04      	ldr	r3, [sp, #16]
 800962e:	4303      	orrs	r3, r0
 8009630:	3401      	adds	r4, #1
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009638:	482c      	ldr	r0, [pc, #176]	; (80096ec <_vfiprintf_r+0x250>)
 800963a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800963e:	2206      	movs	r2, #6
 8009640:	f7f6 fdc6 	bl	80001d0 <memchr>
 8009644:	2800      	cmp	r0, #0
 8009646:	d03f      	beq.n	80096c8 <_vfiprintf_r+0x22c>
 8009648:	4b29      	ldr	r3, [pc, #164]	; (80096f0 <_vfiprintf_r+0x254>)
 800964a:	bb1b      	cbnz	r3, 8009694 <_vfiprintf_r+0x1f8>
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	3307      	adds	r3, #7
 8009650:	f023 0307 	bic.w	r3, r3, #7
 8009654:	3308      	adds	r3, #8
 8009656:	9303      	str	r3, [sp, #12]
 8009658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965a:	443b      	add	r3, r7
 800965c:	9309      	str	r3, [sp, #36]	; 0x24
 800965e:	e767      	b.n	8009530 <_vfiprintf_r+0x94>
 8009660:	fb0c 3202 	mla	r2, ip, r2, r3
 8009664:	460c      	mov	r4, r1
 8009666:	2001      	movs	r0, #1
 8009668:	e7a5      	b.n	80095b6 <_vfiprintf_r+0x11a>
 800966a:	2300      	movs	r3, #0
 800966c:	3401      	adds	r4, #1
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	4619      	mov	r1, r3
 8009672:	f04f 0c0a 	mov.w	ip, #10
 8009676:	4620      	mov	r0, r4
 8009678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800967c:	3a30      	subs	r2, #48	; 0x30
 800967e:	2a09      	cmp	r2, #9
 8009680:	d903      	bls.n	800968a <_vfiprintf_r+0x1ee>
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0c5      	beq.n	8009612 <_vfiprintf_r+0x176>
 8009686:	9105      	str	r1, [sp, #20]
 8009688:	e7c3      	b.n	8009612 <_vfiprintf_r+0x176>
 800968a:	fb0c 2101 	mla	r1, ip, r1, r2
 800968e:	4604      	mov	r4, r0
 8009690:	2301      	movs	r3, #1
 8009692:	e7f0      	b.n	8009676 <_vfiprintf_r+0x1da>
 8009694:	ab03      	add	r3, sp, #12
 8009696:	9300      	str	r3, [sp, #0]
 8009698:	462a      	mov	r2, r5
 800969a:	4b16      	ldr	r3, [pc, #88]	; (80096f4 <_vfiprintf_r+0x258>)
 800969c:	a904      	add	r1, sp, #16
 800969e:	4630      	mov	r0, r6
 80096a0:	f3af 8000 	nop.w
 80096a4:	4607      	mov	r7, r0
 80096a6:	1c78      	adds	r0, r7, #1
 80096a8:	d1d6      	bne.n	8009658 <_vfiprintf_r+0x1bc>
 80096aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ac:	07d9      	lsls	r1, r3, #31
 80096ae:	d405      	bmi.n	80096bc <_vfiprintf_r+0x220>
 80096b0:	89ab      	ldrh	r3, [r5, #12]
 80096b2:	059a      	lsls	r2, r3, #22
 80096b4:	d402      	bmi.n	80096bc <_vfiprintf_r+0x220>
 80096b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096b8:	f7ff fe31 	bl	800931e <__retarget_lock_release_recursive>
 80096bc:	89ab      	ldrh	r3, [r5, #12]
 80096be:	065b      	lsls	r3, r3, #25
 80096c0:	f53f af12 	bmi.w	80094e8 <_vfiprintf_r+0x4c>
 80096c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c6:	e711      	b.n	80094ec <_vfiprintf_r+0x50>
 80096c8:	ab03      	add	r3, sp, #12
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	462a      	mov	r2, r5
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <_vfiprintf_r+0x258>)
 80096d0:	a904      	add	r1, sp, #16
 80096d2:	4630      	mov	r0, r6
 80096d4:	f000 f880 	bl	80097d8 <_printf_i>
 80096d8:	e7e4      	b.n	80096a4 <_vfiprintf_r+0x208>
 80096da:	bf00      	nop
 80096dc:	0800a0ec 	.word	0x0800a0ec
 80096e0:	0800a10c 	.word	0x0800a10c
 80096e4:	0800a0cc 	.word	0x0800a0cc
 80096e8:	0800a12c 	.word	0x0800a12c
 80096ec:	0800a136 	.word	0x0800a136
 80096f0:	00000000 	.word	0x00000000
 80096f4:	08009477 	.word	0x08009477
 80096f8:	0800a132 	.word	0x0800a132

080096fc <_printf_common>:
 80096fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009700:	4616      	mov	r6, r2
 8009702:	4699      	mov	r9, r3
 8009704:	688a      	ldr	r2, [r1, #8]
 8009706:	690b      	ldr	r3, [r1, #16]
 8009708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800970c:	4293      	cmp	r3, r2
 800970e:	bfb8      	it	lt
 8009710:	4613      	movlt	r3, r2
 8009712:	6033      	str	r3, [r6, #0]
 8009714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009718:	4607      	mov	r7, r0
 800971a:	460c      	mov	r4, r1
 800971c:	b10a      	cbz	r2, 8009722 <_printf_common+0x26>
 800971e:	3301      	adds	r3, #1
 8009720:	6033      	str	r3, [r6, #0]
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	0699      	lsls	r1, r3, #26
 8009726:	bf42      	ittt	mi
 8009728:	6833      	ldrmi	r3, [r6, #0]
 800972a:	3302      	addmi	r3, #2
 800972c:	6033      	strmi	r3, [r6, #0]
 800972e:	6825      	ldr	r5, [r4, #0]
 8009730:	f015 0506 	ands.w	r5, r5, #6
 8009734:	d106      	bne.n	8009744 <_printf_common+0x48>
 8009736:	f104 0a19 	add.w	sl, r4, #25
 800973a:	68e3      	ldr	r3, [r4, #12]
 800973c:	6832      	ldr	r2, [r6, #0]
 800973e:	1a9b      	subs	r3, r3, r2
 8009740:	42ab      	cmp	r3, r5
 8009742:	dc26      	bgt.n	8009792 <_printf_common+0x96>
 8009744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009748:	1e13      	subs	r3, r2, #0
 800974a:	6822      	ldr	r2, [r4, #0]
 800974c:	bf18      	it	ne
 800974e:	2301      	movne	r3, #1
 8009750:	0692      	lsls	r2, r2, #26
 8009752:	d42b      	bmi.n	80097ac <_printf_common+0xb0>
 8009754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009758:	4649      	mov	r1, r9
 800975a:	4638      	mov	r0, r7
 800975c:	47c0      	blx	r8
 800975e:	3001      	adds	r0, #1
 8009760:	d01e      	beq.n	80097a0 <_printf_common+0xa4>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	68e5      	ldr	r5, [r4, #12]
 8009766:	6832      	ldr	r2, [r6, #0]
 8009768:	f003 0306 	and.w	r3, r3, #6
 800976c:	2b04      	cmp	r3, #4
 800976e:	bf08      	it	eq
 8009770:	1aad      	subeq	r5, r5, r2
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	6922      	ldr	r2, [r4, #16]
 8009776:	bf0c      	ite	eq
 8009778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800977c:	2500      	movne	r5, #0
 800977e:	4293      	cmp	r3, r2
 8009780:	bfc4      	itt	gt
 8009782:	1a9b      	subgt	r3, r3, r2
 8009784:	18ed      	addgt	r5, r5, r3
 8009786:	2600      	movs	r6, #0
 8009788:	341a      	adds	r4, #26
 800978a:	42b5      	cmp	r5, r6
 800978c:	d11a      	bne.n	80097c4 <_printf_common+0xc8>
 800978e:	2000      	movs	r0, #0
 8009790:	e008      	b.n	80097a4 <_printf_common+0xa8>
 8009792:	2301      	movs	r3, #1
 8009794:	4652      	mov	r2, sl
 8009796:	4649      	mov	r1, r9
 8009798:	4638      	mov	r0, r7
 800979a:	47c0      	blx	r8
 800979c:	3001      	adds	r0, #1
 800979e:	d103      	bne.n	80097a8 <_printf_common+0xac>
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295
 80097a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a8:	3501      	adds	r5, #1
 80097aa:	e7c6      	b.n	800973a <_printf_common+0x3e>
 80097ac:	18e1      	adds	r1, r4, r3
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	2030      	movs	r0, #48	; 0x30
 80097b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80097b6:	4422      	add	r2, r4
 80097b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80097bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097c0:	3302      	adds	r3, #2
 80097c2:	e7c7      	b.n	8009754 <_printf_common+0x58>
 80097c4:	2301      	movs	r3, #1
 80097c6:	4622      	mov	r2, r4
 80097c8:	4649      	mov	r1, r9
 80097ca:	4638      	mov	r0, r7
 80097cc:	47c0      	blx	r8
 80097ce:	3001      	adds	r0, #1
 80097d0:	d0e6      	beq.n	80097a0 <_printf_common+0xa4>
 80097d2:	3601      	adds	r6, #1
 80097d4:	e7d9      	b.n	800978a <_printf_common+0x8e>
	...

080097d8 <_printf_i>:
 80097d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097dc:	7e0f      	ldrb	r7, [r1, #24]
 80097de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80097e0:	2f78      	cmp	r7, #120	; 0x78
 80097e2:	4691      	mov	r9, r2
 80097e4:	4680      	mov	r8, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	469a      	mov	sl, r3
 80097ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80097ee:	d807      	bhi.n	8009800 <_printf_i+0x28>
 80097f0:	2f62      	cmp	r7, #98	; 0x62
 80097f2:	d80a      	bhi.n	800980a <_printf_i+0x32>
 80097f4:	2f00      	cmp	r7, #0
 80097f6:	f000 80d8 	beq.w	80099aa <_printf_i+0x1d2>
 80097fa:	2f58      	cmp	r7, #88	; 0x58
 80097fc:	f000 80a3 	beq.w	8009946 <_printf_i+0x16e>
 8009800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009808:	e03a      	b.n	8009880 <_printf_i+0xa8>
 800980a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800980e:	2b15      	cmp	r3, #21
 8009810:	d8f6      	bhi.n	8009800 <_printf_i+0x28>
 8009812:	a101      	add	r1, pc, #4	; (adr r1, 8009818 <_printf_i+0x40>)
 8009814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009818:	08009871 	.word	0x08009871
 800981c:	08009885 	.word	0x08009885
 8009820:	08009801 	.word	0x08009801
 8009824:	08009801 	.word	0x08009801
 8009828:	08009801 	.word	0x08009801
 800982c:	08009801 	.word	0x08009801
 8009830:	08009885 	.word	0x08009885
 8009834:	08009801 	.word	0x08009801
 8009838:	08009801 	.word	0x08009801
 800983c:	08009801 	.word	0x08009801
 8009840:	08009801 	.word	0x08009801
 8009844:	08009991 	.word	0x08009991
 8009848:	080098b5 	.word	0x080098b5
 800984c:	08009973 	.word	0x08009973
 8009850:	08009801 	.word	0x08009801
 8009854:	08009801 	.word	0x08009801
 8009858:	080099b3 	.word	0x080099b3
 800985c:	08009801 	.word	0x08009801
 8009860:	080098b5 	.word	0x080098b5
 8009864:	08009801 	.word	0x08009801
 8009868:	08009801 	.word	0x08009801
 800986c:	0800997b 	.word	0x0800997b
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	1d1a      	adds	r2, r3, #4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	602a      	str	r2, [r5, #0]
 8009878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800987c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009880:	2301      	movs	r3, #1
 8009882:	e0a3      	b.n	80099cc <_printf_i+0x1f4>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	6829      	ldr	r1, [r5, #0]
 8009888:	0606      	lsls	r6, r0, #24
 800988a:	f101 0304 	add.w	r3, r1, #4
 800988e:	d50a      	bpl.n	80098a6 <_printf_i+0xce>
 8009890:	680e      	ldr	r6, [r1, #0]
 8009892:	602b      	str	r3, [r5, #0]
 8009894:	2e00      	cmp	r6, #0
 8009896:	da03      	bge.n	80098a0 <_printf_i+0xc8>
 8009898:	232d      	movs	r3, #45	; 0x2d
 800989a:	4276      	negs	r6, r6
 800989c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a0:	485e      	ldr	r0, [pc, #376]	; (8009a1c <_printf_i+0x244>)
 80098a2:	230a      	movs	r3, #10
 80098a4:	e019      	b.n	80098da <_printf_i+0x102>
 80098a6:	680e      	ldr	r6, [r1, #0]
 80098a8:	602b      	str	r3, [r5, #0]
 80098aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80098ae:	bf18      	it	ne
 80098b0:	b236      	sxthne	r6, r6
 80098b2:	e7ef      	b.n	8009894 <_printf_i+0xbc>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	6820      	ldr	r0, [r4, #0]
 80098b8:	1d19      	adds	r1, r3, #4
 80098ba:	6029      	str	r1, [r5, #0]
 80098bc:	0601      	lsls	r1, r0, #24
 80098be:	d501      	bpl.n	80098c4 <_printf_i+0xec>
 80098c0:	681e      	ldr	r6, [r3, #0]
 80098c2:	e002      	b.n	80098ca <_printf_i+0xf2>
 80098c4:	0646      	lsls	r6, r0, #25
 80098c6:	d5fb      	bpl.n	80098c0 <_printf_i+0xe8>
 80098c8:	881e      	ldrh	r6, [r3, #0]
 80098ca:	4854      	ldr	r0, [pc, #336]	; (8009a1c <_printf_i+0x244>)
 80098cc:	2f6f      	cmp	r7, #111	; 0x6f
 80098ce:	bf0c      	ite	eq
 80098d0:	2308      	moveq	r3, #8
 80098d2:	230a      	movne	r3, #10
 80098d4:	2100      	movs	r1, #0
 80098d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098da:	6865      	ldr	r5, [r4, #4]
 80098dc:	60a5      	str	r5, [r4, #8]
 80098de:	2d00      	cmp	r5, #0
 80098e0:	bfa2      	ittt	ge
 80098e2:	6821      	ldrge	r1, [r4, #0]
 80098e4:	f021 0104 	bicge.w	r1, r1, #4
 80098e8:	6021      	strge	r1, [r4, #0]
 80098ea:	b90e      	cbnz	r6, 80098f0 <_printf_i+0x118>
 80098ec:	2d00      	cmp	r5, #0
 80098ee:	d04d      	beq.n	800998c <_printf_i+0x1b4>
 80098f0:	4615      	mov	r5, r2
 80098f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80098f6:	fb03 6711 	mls	r7, r3, r1, r6
 80098fa:	5dc7      	ldrb	r7, [r0, r7]
 80098fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009900:	4637      	mov	r7, r6
 8009902:	42bb      	cmp	r3, r7
 8009904:	460e      	mov	r6, r1
 8009906:	d9f4      	bls.n	80098f2 <_printf_i+0x11a>
 8009908:	2b08      	cmp	r3, #8
 800990a:	d10b      	bne.n	8009924 <_printf_i+0x14c>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	07de      	lsls	r6, r3, #31
 8009910:	d508      	bpl.n	8009924 <_printf_i+0x14c>
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	6861      	ldr	r1, [r4, #4]
 8009916:	4299      	cmp	r1, r3
 8009918:	bfde      	ittt	le
 800991a:	2330      	movle	r3, #48	; 0x30
 800991c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009924:	1b52      	subs	r2, r2, r5
 8009926:	6122      	str	r2, [r4, #16]
 8009928:	f8cd a000 	str.w	sl, [sp]
 800992c:	464b      	mov	r3, r9
 800992e:	aa03      	add	r2, sp, #12
 8009930:	4621      	mov	r1, r4
 8009932:	4640      	mov	r0, r8
 8009934:	f7ff fee2 	bl	80096fc <_printf_common>
 8009938:	3001      	adds	r0, #1
 800993a:	d14c      	bne.n	80099d6 <_printf_i+0x1fe>
 800993c:	f04f 30ff 	mov.w	r0, #4294967295
 8009940:	b004      	add	sp, #16
 8009942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009946:	4835      	ldr	r0, [pc, #212]	; (8009a1c <_printf_i+0x244>)
 8009948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800994c:	6829      	ldr	r1, [r5, #0]
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	f851 6b04 	ldr.w	r6, [r1], #4
 8009954:	6029      	str	r1, [r5, #0]
 8009956:	061d      	lsls	r5, r3, #24
 8009958:	d514      	bpl.n	8009984 <_printf_i+0x1ac>
 800995a:	07df      	lsls	r7, r3, #31
 800995c:	bf44      	itt	mi
 800995e:	f043 0320 	orrmi.w	r3, r3, #32
 8009962:	6023      	strmi	r3, [r4, #0]
 8009964:	b91e      	cbnz	r6, 800996e <_printf_i+0x196>
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	f023 0320 	bic.w	r3, r3, #32
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	2310      	movs	r3, #16
 8009970:	e7b0      	b.n	80098d4 <_printf_i+0xfc>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	f043 0320 	orr.w	r3, r3, #32
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	2378      	movs	r3, #120	; 0x78
 800997c:	4828      	ldr	r0, [pc, #160]	; (8009a20 <_printf_i+0x248>)
 800997e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009982:	e7e3      	b.n	800994c <_printf_i+0x174>
 8009984:	0659      	lsls	r1, r3, #25
 8009986:	bf48      	it	mi
 8009988:	b2b6      	uxthmi	r6, r6
 800998a:	e7e6      	b.n	800995a <_printf_i+0x182>
 800998c:	4615      	mov	r5, r2
 800998e:	e7bb      	b.n	8009908 <_printf_i+0x130>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	6826      	ldr	r6, [r4, #0]
 8009994:	6961      	ldr	r1, [r4, #20]
 8009996:	1d18      	adds	r0, r3, #4
 8009998:	6028      	str	r0, [r5, #0]
 800999a:	0635      	lsls	r5, r6, #24
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	d501      	bpl.n	80099a4 <_printf_i+0x1cc>
 80099a0:	6019      	str	r1, [r3, #0]
 80099a2:	e002      	b.n	80099aa <_printf_i+0x1d2>
 80099a4:	0670      	lsls	r0, r6, #25
 80099a6:	d5fb      	bpl.n	80099a0 <_printf_i+0x1c8>
 80099a8:	8019      	strh	r1, [r3, #0]
 80099aa:	2300      	movs	r3, #0
 80099ac:	6123      	str	r3, [r4, #16]
 80099ae:	4615      	mov	r5, r2
 80099b0:	e7ba      	b.n	8009928 <_printf_i+0x150>
 80099b2:	682b      	ldr	r3, [r5, #0]
 80099b4:	1d1a      	adds	r2, r3, #4
 80099b6:	602a      	str	r2, [r5, #0]
 80099b8:	681d      	ldr	r5, [r3, #0]
 80099ba:	6862      	ldr	r2, [r4, #4]
 80099bc:	2100      	movs	r1, #0
 80099be:	4628      	mov	r0, r5
 80099c0:	f7f6 fc06 	bl	80001d0 <memchr>
 80099c4:	b108      	cbz	r0, 80099ca <_printf_i+0x1f2>
 80099c6:	1b40      	subs	r0, r0, r5
 80099c8:	6060      	str	r0, [r4, #4]
 80099ca:	6863      	ldr	r3, [r4, #4]
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	2300      	movs	r3, #0
 80099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d4:	e7a8      	b.n	8009928 <_printf_i+0x150>
 80099d6:	6923      	ldr	r3, [r4, #16]
 80099d8:	462a      	mov	r2, r5
 80099da:	4649      	mov	r1, r9
 80099dc:	4640      	mov	r0, r8
 80099de:	47d0      	blx	sl
 80099e0:	3001      	adds	r0, #1
 80099e2:	d0ab      	beq.n	800993c <_printf_i+0x164>
 80099e4:	6823      	ldr	r3, [r4, #0]
 80099e6:	079b      	lsls	r3, r3, #30
 80099e8:	d413      	bmi.n	8009a12 <_printf_i+0x23a>
 80099ea:	68e0      	ldr	r0, [r4, #12]
 80099ec:	9b03      	ldr	r3, [sp, #12]
 80099ee:	4298      	cmp	r0, r3
 80099f0:	bfb8      	it	lt
 80099f2:	4618      	movlt	r0, r3
 80099f4:	e7a4      	b.n	8009940 <_printf_i+0x168>
 80099f6:	2301      	movs	r3, #1
 80099f8:	4632      	mov	r2, r6
 80099fa:	4649      	mov	r1, r9
 80099fc:	4640      	mov	r0, r8
 80099fe:	47d0      	blx	sl
 8009a00:	3001      	adds	r0, #1
 8009a02:	d09b      	beq.n	800993c <_printf_i+0x164>
 8009a04:	3501      	adds	r5, #1
 8009a06:	68e3      	ldr	r3, [r4, #12]
 8009a08:	9903      	ldr	r1, [sp, #12]
 8009a0a:	1a5b      	subs	r3, r3, r1
 8009a0c:	42ab      	cmp	r3, r5
 8009a0e:	dcf2      	bgt.n	80099f6 <_printf_i+0x21e>
 8009a10:	e7eb      	b.n	80099ea <_printf_i+0x212>
 8009a12:	2500      	movs	r5, #0
 8009a14:	f104 0619 	add.w	r6, r4, #25
 8009a18:	e7f5      	b.n	8009a06 <_printf_i+0x22e>
 8009a1a:	bf00      	nop
 8009a1c:	0800a13d 	.word	0x0800a13d
 8009a20:	0800a14e 	.word	0x0800a14e

08009a24 <_sbrk_r>:
 8009a24:	b538      	push	{r3, r4, r5, lr}
 8009a26:	4d06      	ldr	r5, [pc, #24]	; (8009a40 <_sbrk_r+0x1c>)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	602b      	str	r3, [r5, #0]
 8009a30:	f7f7 f91a 	bl	8000c68 <_sbrk>
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d102      	bne.n	8009a3e <_sbrk_r+0x1a>
 8009a38:	682b      	ldr	r3, [r5, #0]
 8009a3a:	b103      	cbz	r3, 8009a3e <_sbrk_r+0x1a>
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	20002a70 	.word	0x20002a70

08009a44 <__sread>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	460c      	mov	r4, r1
 8009a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4c:	f000 fab2 	bl	8009fb4 <_read_r>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	bfab      	itete	ge
 8009a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a56:	89a3      	ldrhlt	r3, [r4, #12]
 8009a58:	181b      	addge	r3, r3, r0
 8009a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a5e:	bfac      	ite	ge
 8009a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a62:	81a3      	strhlt	r3, [r4, #12]
 8009a64:	bd10      	pop	{r4, pc}

08009a66 <__swrite>:
 8009a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a6a:	461f      	mov	r7, r3
 8009a6c:	898b      	ldrh	r3, [r1, #12]
 8009a6e:	05db      	lsls	r3, r3, #23
 8009a70:	4605      	mov	r5, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4616      	mov	r6, r2
 8009a76:	d505      	bpl.n	8009a84 <__swrite+0x1e>
 8009a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f000 f9c8 	bl	8009e14 <_lseek_r>
 8009a84:	89a3      	ldrh	r3, [r4, #12]
 8009a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a8e:	81a3      	strh	r3, [r4, #12]
 8009a90:	4632      	mov	r2, r6
 8009a92:	463b      	mov	r3, r7
 8009a94:	4628      	mov	r0, r5
 8009a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a9a:	f000 b869 	b.w	8009b70 <_write_r>

08009a9e <__sseek>:
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa6:	f000 f9b5 	bl	8009e14 <_lseek_r>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	bf15      	itete	ne
 8009ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009aba:	81a3      	strheq	r3, [r4, #12]
 8009abc:	bf18      	it	ne
 8009abe:	81a3      	strhne	r3, [r4, #12]
 8009ac0:	bd10      	pop	{r4, pc}

08009ac2 <__sclose>:
 8009ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac6:	f000 b8d3 	b.w	8009c70 <_close_r>
	...

08009acc <__swbuf_r>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	460e      	mov	r6, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	b118      	cbz	r0, 8009ade <__swbuf_r+0x12>
 8009ad6:	6983      	ldr	r3, [r0, #24]
 8009ad8:	b90b      	cbnz	r3, 8009ade <__swbuf_r+0x12>
 8009ada:	f7ff fb81 	bl	80091e0 <__sinit>
 8009ade:	4b21      	ldr	r3, [pc, #132]	; (8009b64 <__swbuf_r+0x98>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	d12b      	bne.n	8009b3c <__swbuf_r+0x70>
 8009ae4:	686c      	ldr	r4, [r5, #4]
 8009ae6:	69a3      	ldr	r3, [r4, #24]
 8009ae8:	60a3      	str	r3, [r4, #8]
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	071a      	lsls	r2, r3, #28
 8009aee:	d52f      	bpl.n	8009b50 <__swbuf_r+0x84>
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	b36b      	cbz	r3, 8009b50 <__swbuf_r+0x84>
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	6820      	ldr	r0, [r4, #0]
 8009af8:	1ac0      	subs	r0, r0, r3
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	b2f6      	uxtb	r6, r6
 8009afe:	4283      	cmp	r3, r0
 8009b00:	4637      	mov	r7, r6
 8009b02:	dc04      	bgt.n	8009b0e <__swbuf_r+0x42>
 8009b04:	4621      	mov	r1, r4
 8009b06:	4628      	mov	r0, r5
 8009b08:	f000 f948 	bl	8009d9c <_fflush_r>
 8009b0c:	bb30      	cbnz	r0, 8009b5c <__swbuf_r+0x90>
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	60a3      	str	r3, [r4, #8]
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	6022      	str	r2, [r4, #0]
 8009b1a:	701e      	strb	r6, [r3, #0]
 8009b1c:	6963      	ldr	r3, [r4, #20]
 8009b1e:	3001      	adds	r0, #1
 8009b20:	4283      	cmp	r3, r0
 8009b22:	d004      	beq.n	8009b2e <__swbuf_r+0x62>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	07db      	lsls	r3, r3, #31
 8009b28:	d506      	bpl.n	8009b38 <__swbuf_r+0x6c>
 8009b2a:	2e0a      	cmp	r6, #10
 8009b2c:	d104      	bne.n	8009b38 <__swbuf_r+0x6c>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4628      	mov	r0, r5
 8009b32:	f000 f933 	bl	8009d9c <_fflush_r>
 8009b36:	b988      	cbnz	r0, 8009b5c <__swbuf_r+0x90>
 8009b38:	4638      	mov	r0, r7
 8009b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <__swbuf_r+0x9c>)
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d101      	bne.n	8009b46 <__swbuf_r+0x7a>
 8009b42:	68ac      	ldr	r4, [r5, #8]
 8009b44:	e7cf      	b.n	8009ae6 <__swbuf_r+0x1a>
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <__swbuf_r+0xa0>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	bf08      	it	eq
 8009b4c:	68ec      	ldreq	r4, [r5, #12]
 8009b4e:	e7ca      	b.n	8009ae6 <__swbuf_r+0x1a>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f81e 	bl	8009b94 <__swsetup_r>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0cb      	beq.n	8009af4 <__swbuf_r+0x28>
 8009b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b60:	e7ea      	b.n	8009b38 <__swbuf_r+0x6c>
 8009b62:	bf00      	nop
 8009b64:	0800a0ec 	.word	0x0800a0ec
 8009b68:	0800a10c 	.word	0x0800a10c
 8009b6c:	0800a0cc 	.word	0x0800a0cc

08009b70 <_write_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4d07      	ldr	r5, [pc, #28]	; (8009b90 <_write_r+0x20>)
 8009b74:	4604      	mov	r4, r0
 8009b76:	4608      	mov	r0, r1
 8009b78:	4611      	mov	r1, r2
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	602a      	str	r2, [r5, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f7f7 f821 	bl	8000bc6 <_write>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_write_r+0x1e>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_write_r+0x1e>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20002a70 	.word	0x20002a70

08009b94 <__swsetup_r>:
 8009b94:	4b32      	ldr	r3, [pc, #200]	; (8009c60 <__swsetup_r+0xcc>)
 8009b96:	b570      	push	{r4, r5, r6, lr}
 8009b98:	681d      	ldr	r5, [r3, #0]
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	b125      	cbz	r5, 8009baa <__swsetup_r+0x16>
 8009ba0:	69ab      	ldr	r3, [r5, #24]
 8009ba2:	b913      	cbnz	r3, 8009baa <__swsetup_r+0x16>
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f7ff fb1b 	bl	80091e0 <__sinit>
 8009baa:	4b2e      	ldr	r3, [pc, #184]	; (8009c64 <__swsetup_r+0xd0>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	d10f      	bne.n	8009bd0 <__swsetup_r+0x3c>
 8009bb0:	686c      	ldr	r4, [r5, #4]
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bb8:	0719      	lsls	r1, r3, #28
 8009bba:	d42c      	bmi.n	8009c16 <__swsetup_r+0x82>
 8009bbc:	06dd      	lsls	r5, r3, #27
 8009bbe:	d411      	bmi.n	8009be4 <__swsetup_r+0x50>
 8009bc0:	2309      	movs	r3, #9
 8009bc2:	6033      	str	r3, [r6, #0]
 8009bc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	f04f 30ff 	mov.w	r0, #4294967295
 8009bce:	e03e      	b.n	8009c4e <__swsetup_r+0xba>
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <__swsetup_r+0xd4>)
 8009bd2:	429c      	cmp	r4, r3
 8009bd4:	d101      	bne.n	8009bda <__swsetup_r+0x46>
 8009bd6:	68ac      	ldr	r4, [r5, #8]
 8009bd8:	e7eb      	b.n	8009bb2 <__swsetup_r+0x1e>
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <__swsetup_r+0xd8>)
 8009bdc:	429c      	cmp	r4, r3
 8009bde:	bf08      	it	eq
 8009be0:	68ec      	ldreq	r4, [r5, #12]
 8009be2:	e7e6      	b.n	8009bb2 <__swsetup_r+0x1e>
 8009be4:	0758      	lsls	r0, r3, #29
 8009be6:	d512      	bpl.n	8009c0e <__swsetup_r+0x7a>
 8009be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bea:	b141      	cbz	r1, 8009bfe <__swsetup_r+0x6a>
 8009bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bf0:	4299      	cmp	r1, r3
 8009bf2:	d002      	beq.n	8009bfa <__swsetup_r+0x66>
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f000 f991 	bl	8009f1c <_free_r>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	6363      	str	r3, [r4, #52]	; 0x34
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c04:	81a3      	strh	r3, [r4, #12]
 8009c06:	2300      	movs	r3, #0
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	f043 0308 	orr.w	r3, r3, #8
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	b94b      	cbnz	r3, 8009c2e <__swsetup_r+0x9a>
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c24:	d003      	beq.n	8009c2e <__swsetup_r+0x9a>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 f92b 	bl	8009e84 <__smakebuf_r>
 8009c2e:	89a0      	ldrh	r0, [r4, #12]
 8009c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c34:	f010 0301 	ands.w	r3, r0, #1
 8009c38:	d00a      	beq.n	8009c50 <__swsetup_r+0xbc>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	60a3      	str	r3, [r4, #8]
 8009c3e:	6963      	ldr	r3, [r4, #20]
 8009c40:	425b      	negs	r3, r3
 8009c42:	61a3      	str	r3, [r4, #24]
 8009c44:	6923      	ldr	r3, [r4, #16]
 8009c46:	b943      	cbnz	r3, 8009c5a <__swsetup_r+0xc6>
 8009c48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c4c:	d1ba      	bne.n	8009bc4 <__swsetup_r+0x30>
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
 8009c50:	0781      	lsls	r1, r0, #30
 8009c52:	bf58      	it	pl
 8009c54:	6963      	ldrpl	r3, [r4, #20]
 8009c56:	60a3      	str	r3, [r4, #8]
 8009c58:	e7f4      	b.n	8009c44 <__swsetup_r+0xb0>
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	e7f7      	b.n	8009c4e <__swsetup_r+0xba>
 8009c5e:	bf00      	nop
 8009c60:	20000208 	.word	0x20000208
 8009c64:	0800a0ec 	.word	0x0800a0ec
 8009c68:	0800a10c 	.word	0x0800a10c
 8009c6c:	0800a0cc 	.word	0x0800a0cc

08009c70 <_close_r>:
 8009c70:	b538      	push	{r3, r4, r5, lr}
 8009c72:	4d06      	ldr	r5, [pc, #24]	; (8009c8c <_close_r+0x1c>)
 8009c74:	2300      	movs	r3, #0
 8009c76:	4604      	mov	r4, r0
 8009c78:	4608      	mov	r0, r1
 8009c7a:	602b      	str	r3, [r5, #0]
 8009c7c:	f7f6 ffbf 	bl	8000bfe <_close>
 8009c80:	1c43      	adds	r3, r0, #1
 8009c82:	d102      	bne.n	8009c8a <_close_r+0x1a>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	b103      	cbz	r3, 8009c8a <_close_r+0x1a>
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	20002a70 	.word	0x20002a70

08009c90 <__sflush_r>:
 8009c90:	898a      	ldrh	r2, [r1, #12]
 8009c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c96:	4605      	mov	r5, r0
 8009c98:	0710      	lsls	r0, r2, #28
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	d458      	bmi.n	8009d50 <__sflush_r+0xc0>
 8009c9e:	684b      	ldr	r3, [r1, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dc05      	bgt.n	8009cb0 <__sflush_r+0x20>
 8009ca4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	dc02      	bgt.n	8009cb0 <__sflush_r+0x20>
 8009caa:	2000      	movs	r0, #0
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	d0f9      	beq.n	8009caa <__sflush_r+0x1a>
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cbc:	682f      	ldr	r7, [r5, #0]
 8009cbe:	602b      	str	r3, [r5, #0]
 8009cc0:	d032      	beq.n	8009d28 <__sflush_r+0x98>
 8009cc2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	075a      	lsls	r2, r3, #29
 8009cc8:	d505      	bpl.n	8009cd6 <__sflush_r+0x46>
 8009cca:	6863      	ldr	r3, [r4, #4]
 8009ccc:	1ac0      	subs	r0, r0, r3
 8009cce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cd0:	b10b      	cbz	r3, 8009cd6 <__sflush_r+0x46>
 8009cd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cd4:	1ac0      	subs	r0, r0, r3
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4602      	mov	r2, r0
 8009cda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cdc:	6a21      	ldr	r1, [r4, #32]
 8009cde:	4628      	mov	r0, r5
 8009ce0:	47b0      	blx	r6
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	89a3      	ldrh	r3, [r4, #12]
 8009ce6:	d106      	bne.n	8009cf6 <__sflush_r+0x66>
 8009ce8:	6829      	ldr	r1, [r5, #0]
 8009cea:	291d      	cmp	r1, #29
 8009cec:	d82c      	bhi.n	8009d48 <__sflush_r+0xb8>
 8009cee:	4a2a      	ldr	r2, [pc, #168]	; (8009d98 <__sflush_r+0x108>)
 8009cf0:	40ca      	lsrs	r2, r1
 8009cf2:	07d6      	lsls	r6, r2, #31
 8009cf4:	d528      	bpl.n	8009d48 <__sflush_r+0xb8>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	6062      	str	r2, [r4, #4]
 8009cfa:	04d9      	lsls	r1, r3, #19
 8009cfc:	6922      	ldr	r2, [r4, #16]
 8009cfe:	6022      	str	r2, [r4, #0]
 8009d00:	d504      	bpl.n	8009d0c <__sflush_r+0x7c>
 8009d02:	1c42      	adds	r2, r0, #1
 8009d04:	d101      	bne.n	8009d0a <__sflush_r+0x7a>
 8009d06:	682b      	ldr	r3, [r5, #0]
 8009d08:	b903      	cbnz	r3, 8009d0c <__sflush_r+0x7c>
 8009d0a:	6560      	str	r0, [r4, #84]	; 0x54
 8009d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d0e:	602f      	str	r7, [r5, #0]
 8009d10:	2900      	cmp	r1, #0
 8009d12:	d0ca      	beq.n	8009caa <__sflush_r+0x1a>
 8009d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d18:	4299      	cmp	r1, r3
 8009d1a:	d002      	beq.n	8009d22 <__sflush_r+0x92>
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 f8fd 	bl	8009f1c <_free_r>
 8009d22:	2000      	movs	r0, #0
 8009d24:	6360      	str	r0, [r4, #52]	; 0x34
 8009d26:	e7c1      	b.n	8009cac <__sflush_r+0x1c>
 8009d28:	6a21      	ldr	r1, [r4, #32]
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	47b0      	blx	r6
 8009d30:	1c41      	adds	r1, r0, #1
 8009d32:	d1c7      	bne.n	8009cc4 <__sflush_r+0x34>
 8009d34:	682b      	ldr	r3, [r5, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0c4      	beq.n	8009cc4 <__sflush_r+0x34>
 8009d3a:	2b1d      	cmp	r3, #29
 8009d3c:	d001      	beq.n	8009d42 <__sflush_r+0xb2>
 8009d3e:	2b16      	cmp	r3, #22
 8009d40:	d101      	bne.n	8009d46 <__sflush_r+0xb6>
 8009d42:	602f      	str	r7, [r5, #0]
 8009d44:	e7b1      	b.n	8009caa <__sflush_r+0x1a>
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d4c:	81a3      	strh	r3, [r4, #12]
 8009d4e:	e7ad      	b.n	8009cac <__sflush_r+0x1c>
 8009d50:	690f      	ldr	r7, [r1, #16]
 8009d52:	2f00      	cmp	r7, #0
 8009d54:	d0a9      	beq.n	8009caa <__sflush_r+0x1a>
 8009d56:	0793      	lsls	r3, r2, #30
 8009d58:	680e      	ldr	r6, [r1, #0]
 8009d5a:	bf08      	it	eq
 8009d5c:	694b      	ldreq	r3, [r1, #20]
 8009d5e:	600f      	str	r7, [r1, #0]
 8009d60:	bf18      	it	ne
 8009d62:	2300      	movne	r3, #0
 8009d64:	eba6 0807 	sub.w	r8, r6, r7
 8009d68:	608b      	str	r3, [r1, #8]
 8009d6a:	f1b8 0f00 	cmp.w	r8, #0
 8009d6e:	dd9c      	ble.n	8009caa <__sflush_r+0x1a>
 8009d70:	6a21      	ldr	r1, [r4, #32]
 8009d72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d74:	4643      	mov	r3, r8
 8009d76:	463a      	mov	r2, r7
 8009d78:	4628      	mov	r0, r5
 8009d7a:	47b0      	blx	r6
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	dc06      	bgt.n	8009d8e <__sflush_r+0xfe>
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d86:	81a3      	strh	r3, [r4, #12]
 8009d88:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8c:	e78e      	b.n	8009cac <__sflush_r+0x1c>
 8009d8e:	4407      	add	r7, r0
 8009d90:	eba8 0800 	sub.w	r8, r8, r0
 8009d94:	e7e9      	b.n	8009d6a <__sflush_r+0xda>
 8009d96:	bf00      	nop
 8009d98:	20400001 	.word	0x20400001

08009d9c <_fflush_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	690b      	ldr	r3, [r1, #16]
 8009da0:	4605      	mov	r5, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	b913      	cbnz	r3, 8009dac <_fflush_r+0x10>
 8009da6:	2500      	movs	r5, #0
 8009da8:	4628      	mov	r0, r5
 8009daa:	bd38      	pop	{r3, r4, r5, pc}
 8009dac:	b118      	cbz	r0, 8009db6 <_fflush_r+0x1a>
 8009dae:	6983      	ldr	r3, [r0, #24]
 8009db0:	b90b      	cbnz	r3, 8009db6 <_fflush_r+0x1a>
 8009db2:	f7ff fa15 	bl	80091e0 <__sinit>
 8009db6:	4b14      	ldr	r3, [pc, #80]	; (8009e08 <_fflush_r+0x6c>)
 8009db8:	429c      	cmp	r4, r3
 8009dba:	d11b      	bne.n	8009df4 <_fflush_r+0x58>
 8009dbc:	686c      	ldr	r4, [r5, #4]
 8009dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0ef      	beq.n	8009da6 <_fflush_r+0xa>
 8009dc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dc8:	07d0      	lsls	r0, r2, #31
 8009dca:	d404      	bmi.n	8009dd6 <_fflush_r+0x3a>
 8009dcc:	0599      	lsls	r1, r3, #22
 8009dce:	d402      	bmi.n	8009dd6 <_fflush_r+0x3a>
 8009dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dd2:	f7ff faa3 	bl	800931c <__retarget_lock_acquire_recursive>
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	4621      	mov	r1, r4
 8009dda:	f7ff ff59 	bl	8009c90 <__sflush_r>
 8009dde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009de0:	07da      	lsls	r2, r3, #31
 8009de2:	4605      	mov	r5, r0
 8009de4:	d4e0      	bmi.n	8009da8 <_fflush_r+0xc>
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	059b      	lsls	r3, r3, #22
 8009dea:	d4dd      	bmi.n	8009da8 <_fflush_r+0xc>
 8009dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dee:	f7ff fa96 	bl	800931e <__retarget_lock_release_recursive>
 8009df2:	e7d9      	b.n	8009da8 <_fflush_r+0xc>
 8009df4:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <_fflush_r+0x70>)
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d101      	bne.n	8009dfe <_fflush_r+0x62>
 8009dfa:	68ac      	ldr	r4, [r5, #8]
 8009dfc:	e7df      	b.n	8009dbe <_fflush_r+0x22>
 8009dfe:	4b04      	ldr	r3, [pc, #16]	; (8009e10 <_fflush_r+0x74>)
 8009e00:	429c      	cmp	r4, r3
 8009e02:	bf08      	it	eq
 8009e04:	68ec      	ldreq	r4, [r5, #12]
 8009e06:	e7da      	b.n	8009dbe <_fflush_r+0x22>
 8009e08:	0800a0ec 	.word	0x0800a0ec
 8009e0c:	0800a10c 	.word	0x0800a10c
 8009e10:	0800a0cc 	.word	0x0800a0cc

08009e14 <_lseek_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d07      	ldr	r5, [pc, #28]	; (8009e34 <_lseek_r+0x20>)
 8009e18:	4604      	mov	r4, r0
 8009e1a:	4608      	mov	r0, r1
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	2200      	movs	r2, #0
 8009e20:	602a      	str	r2, [r5, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	f7f6 ff12 	bl	8000c4c <_lseek>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <_lseek_r+0x1e>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	b103      	cbz	r3, 8009e32 <_lseek_r+0x1e>
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
 8009e34:	20002a70 	.word	0x20002a70

08009e38 <__swhatbuf_r>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	460e      	mov	r6, r1
 8009e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e40:	2900      	cmp	r1, #0
 8009e42:	b096      	sub	sp, #88	; 0x58
 8009e44:	4614      	mov	r4, r2
 8009e46:	461d      	mov	r5, r3
 8009e48:	da08      	bge.n	8009e5c <__swhatbuf_r+0x24>
 8009e4a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	602a      	str	r2, [r5, #0]
 8009e52:	061a      	lsls	r2, r3, #24
 8009e54:	d410      	bmi.n	8009e78 <__swhatbuf_r+0x40>
 8009e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e5a:	e00e      	b.n	8009e7a <__swhatbuf_r+0x42>
 8009e5c:	466a      	mov	r2, sp
 8009e5e:	f000 f8bb 	bl	8009fd8 <_fstat_r>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	dbf1      	blt.n	8009e4a <__swhatbuf_r+0x12>
 8009e66:	9a01      	ldr	r2, [sp, #4]
 8009e68:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e6c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e70:	425a      	negs	r2, r3
 8009e72:	415a      	adcs	r2, r3
 8009e74:	602a      	str	r2, [r5, #0]
 8009e76:	e7ee      	b.n	8009e56 <__swhatbuf_r+0x1e>
 8009e78:	2340      	movs	r3, #64	; 0x40
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	b016      	add	sp, #88	; 0x58
 8009e80:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e84 <__smakebuf_r>:
 8009e84:	898b      	ldrh	r3, [r1, #12]
 8009e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e88:	079d      	lsls	r5, r3, #30
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	d507      	bpl.n	8009ea0 <__smakebuf_r+0x1c>
 8009e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	6123      	str	r3, [r4, #16]
 8009e98:	2301      	movs	r3, #1
 8009e9a:	6163      	str	r3, [r4, #20]
 8009e9c:	b002      	add	sp, #8
 8009e9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ea0:	ab01      	add	r3, sp, #4
 8009ea2:	466a      	mov	r2, sp
 8009ea4:	f7ff ffc8 	bl	8009e38 <__swhatbuf_r>
 8009ea8:	9900      	ldr	r1, [sp, #0]
 8009eaa:	4605      	mov	r5, r0
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff fa57 	bl	8009360 <_malloc_r>
 8009eb2:	b948      	cbnz	r0, 8009ec8 <__smakebuf_r+0x44>
 8009eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eb8:	059a      	lsls	r2, r3, #22
 8009eba:	d4ef      	bmi.n	8009e9c <__smakebuf_r+0x18>
 8009ebc:	f023 0303 	bic.w	r3, r3, #3
 8009ec0:	f043 0302 	orr.w	r3, r3, #2
 8009ec4:	81a3      	strh	r3, [r4, #12]
 8009ec6:	e7e3      	b.n	8009e90 <__smakebuf_r+0xc>
 8009ec8:	4b0d      	ldr	r3, [pc, #52]	; (8009f00 <__smakebuf_r+0x7c>)
 8009eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	6020      	str	r0, [r4, #0]
 8009ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	9b00      	ldr	r3, [sp, #0]
 8009ed8:	6163      	str	r3, [r4, #20]
 8009eda:	9b01      	ldr	r3, [sp, #4]
 8009edc:	6120      	str	r0, [r4, #16]
 8009ede:	b15b      	cbz	r3, 8009ef8 <__smakebuf_r+0x74>
 8009ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f000 f889 	bl	8009ffc <_isatty_r>
 8009eea:	b128      	cbz	r0, 8009ef8 <__smakebuf_r+0x74>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f023 0303 	bic.w	r3, r3, #3
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	89a0      	ldrh	r0, [r4, #12]
 8009efa:	4305      	orrs	r5, r0
 8009efc:	81a5      	strh	r5, [r4, #12]
 8009efe:	e7cd      	b.n	8009e9c <__smakebuf_r+0x18>
 8009f00:	08009179 	.word	0x08009179

08009f04 <__malloc_lock>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__malloc_lock+0x8>)
 8009f06:	f7ff ba09 	b.w	800931c <__retarget_lock_acquire_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	20002a64 	.word	0x20002a64

08009f10 <__malloc_unlock>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__malloc_unlock+0x8>)
 8009f12:	f7ff ba04 	b.w	800931e <__retarget_lock_release_recursive>
 8009f16:	bf00      	nop
 8009f18:	20002a64 	.word	0x20002a64

08009f1c <_free_r>:
 8009f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d044      	beq.n	8009fac <_free_r+0x90>
 8009f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f26:	9001      	str	r0, [sp, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009f2e:	bfb8      	it	lt
 8009f30:	18e4      	addlt	r4, r4, r3
 8009f32:	f7ff ffe7 	bl	8009f04 <__malloc_lock>
 8009f36:	4a1e      	ldr	r2, [pc, #120]	; (8009fb0 <_free_r+0x94>)
 8009f38:	9801      	ldr	r0, [sp, #4]
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	b933      	cbnz	r3, 8009f4c <_free_r+0x30>
 8009f3e:	6063      	str	r3, [r4, #4]
 8009f40:	6014      	str	r4, [r2, #0]
 8009f42:	b003      	add	sp, #12
 8009f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f48:	f7ff bfe2 	b.w	8009f10 <__malloc_unlock>
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d908      	bls.n	8009f62 <_free_r+0x46>
 8009f50:	6825      	ldr	r5, [r4, #0]
 8009f52:	1961      	adds	r1, r4, r5
 8009f54:	428b      	cmp	r3, r1
 8009f56:	bf01      	itttt	eq
 8009f58:	6819      	ldreq	r1, [r3, #0]
 8009f5a:	685b      	ldreq	r3, [r3, #4]
 8009f5c:	1949      	addeq	r1, r1, r5
 8009f5e:	6021      	streq	r1, [r4, #0]
 8009f60:	e7ed      	b.n	8009f3e <_free_r+0x22>
 8009f62:	461a      	mov	r2, r3
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	b10b      	cbz	r3, 8009f6c <_free_r+0x50>
 8009f68:	42a3      	cmp	r3, r4
 8009f6a:	d9fa      	bls.n	8009f62 <_free_r+0x46>
 8009f6c:	6811      	ldr	r1, [r2, #0]
 8009f6e:	1855      	adds	r5, r2, r1
 8009f70:	42a5      	cmp	r5, r4
 8009f72:	d10b      	bne.n	8009f8c <_free_r+0x70>
 8009f74:	6824      	ldr	r4, [r4, #0]
 8009f76:	4421      	add	r1, r4
 8009f78:	1854      	adds	r4, r2, r1
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	d1e0      	bne.n	8009f42 <_free_r+0x26>
 8009f80:	681c      	ldr	r4, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	6053      	str	r3, [r2, #4]
 8009f86:	4421      	add	r1, r4
 8009f88:	6011      	str	r1, [r2, #0]
 8009f8a:	e7da      	b.n	8009f42 <_free_r+0x26>
 8009f8c:	d902      	bls.n	8009f94 <_free_r+0x78>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	e7d6      	b.n	8009f42 <_free_r+0x26>
 8009f94:	6825      	ldr	r5, [r4, #0]
 8009f96:	1961      	adds	r1, r4, r5
 8009f98:	428b      	cmp	r3, r1
 8009f9a:	bf04      	itt	eq
 8009f9c:	6819      	ldreq	r1, [r3, #0]
 8009f9e:	685b      	ldreq	r3, [r3, #4]
 8009fa0:	6063      	str	r3, [r4, #4]
 8009fa2:	bf04      	itt	eq
 8009fa4:	1949      	addeq	r1, r1, r5
 8009fa6:	6021      	streq	r1, [r4, #0]
 8009fa8:	6054      	str	r4, [r2, #4]
 8009faa:	e7ca      	b.n	8009f42 <_free_r+0x26>
 8009fac:	b003      	add	sp, #12
 8009fae:	bd30      	pop	{r4, r5, pc}
 8009fb0:	20002a68 	.word	0x20002a68

08009fb4 <_read_r>:
 8009fb4:	b538      	push	{r3, r4, r5, lr}
 8009fb6:	4d07      	ldr	r5, [pc, #28]	; (8009fd4 <_read_r+0x20>)
 8009fb8:	4604      	mov	r4, r0
 8009fba:	4608      	mov	r0, r1
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	602a      	str	r2, [r5, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f7f6 fde2 	bl	8000b8c <_read>
 8009fc8:	1c43      	adds	r3, r0, #1
 8009fca:	d102      	bne.n	8009fd2 <_read_r+0x1e>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	b103      	cbz	r3, 8009fd2 <_read_r+0x1e>
 8009fd0:	6023      	str	r3, [r4, #0]
 8009fd2:	bd38      	pop	{r3, r4, r5, pc}
 8009fd4:	20002a70 	.word	0x20002a70

08009fd8 <_fstat_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d07      	ldr	r5, [pc, #28]	; (8009ff8 <_fstat_r+0x20>)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	602b      	str	r3, [r5, #0]
 8009fe6:	f7f6 fe16 	bl	8000c16 <_fstat>
 8009fea:	1c43      	adds	r3, r0, #1
 8009fec:	d102      	bne.n	8009ff4 <_fstat_r+0x1c>
 8009fee:	682b      	ldr	r3, [r5, #0]
 8009ff0:	b103      	cbz	r3, 8009ff4 <_fstat_r+0x1c>
 8009ff2:	6023      	str	r3, [r4, #0]
 8009ff4:	bd38      	pop	{r3, r4, r5, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20002a70 	.word	0x20002a70

08009ffc <_isatty_r>:
 8009ffc:	b538      	push	{r3, r4, r5, lr}
 8009ffe:	4d06      	ldr	r5, [pc, #24]	; (800a018 <_isatty_r+0x1c>)
 800a000:	2300      	movs	r3, #0
 800a002:	4604      	mov	r4, r0
 800a004:	4608      	mov	r0, r1
 800a006:	602b      	str	r3, [r5, #0]
 800a008:	f7f6 fe15 	bl	8000c36 <_isatty>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	d102      	bne.n	800a016 <_isatty_r+0x1a>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	b103      	cbz	r3, 800a016 <_isatty_r+0x1a>
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	bd38      	pop	{r3, r4, r5, pc}
 800a018:	20002a70 	.word	0x20002a70

0800a01c <_init>:
 800a01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01e:	bf00      	nop
 800a020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a022:	bc08      	pop	{r3}
 800a024:	469e      	mov	lr, r3
 800a026:	4770      	bx	lr

0800a028 <_fini>:
 800a028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a02a:	bf00      	nop
 800a02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a02e:	bc08      	pop	{r3}
 800a030:	469e      	mov	lr, r3
 800a032:	4770      	bx	lr
