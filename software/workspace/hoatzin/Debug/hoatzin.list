
hoatzin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009618  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009820  08009820  000204f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009828  08009828  000204f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800982c  0800982c  0001982c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f4  20000000  08009830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b28  200004f4  08009d24  000204f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000301c  08009d24  0002301c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000200c3  00000000  00000000  00020524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045d0  00000000  00000000  000405e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  00044bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019c0  00000000  00000000  00046750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b987  00000000  00000000  00048110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204c7  00000000  00000000  00073a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8a9b  00000000  00000000  00093f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018c9f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073fc  00000000  00000000  0018ca4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004f4 	.word	0x200004f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009788 	.word	0x08009788

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004f8 	.word	0x200004f8
 80001c4:	08009788 	.word	0x08009788

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 faf5 	bl	8000abe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f811 	bl	80004fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f892 	bl	8000600 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f860 	bl	80005a0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f008 fa88 	bl	80089f4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80004e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e8:	f000 fb22 	bl	8000b30 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  scan_L_keys();
 80004ec:	f005 ff46 	bl	800637c <scan_L_keys>
	  scan_R_keys();
 80004f0:	f006 f862 	bl	80065b8 <scan_R_keys>
	  scanPedals();
 80004f4:	f008 f9e8 	bl	80088c8 <scanPedals>
  {
 80004f8:	e7f8      	b.n	80004ec <main+0x20>

080004fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b096      	sub	sp, #88	; 0x58
 80004fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2244      	movs	r2, #68	; 0x44
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f009 f935 	bl	8009778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000520:	f001 ffb4 	bl	800248c <HAL_PWREx_ControlVoltageScaling>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800052a:	f000 f959 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800052e:	2310      	movs	r3, #16
 8000530:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000532:	2301      	movs	r3, #1
 8000534:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800053a:	2360      	movs	r3, #96	; 0x60
 800053c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000542:	2301      	movs	r3, #1
 8000544:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000546:	2301      	movs	r3, #1
 8000548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800054a:	2328      	movs	r3, #40	; 0x28
 800054c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054e:	2307      	movs	r3, #7
 8000550:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000556:	2302      	movs	r3, #2
 8000558:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fffa 	bl	8002558 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x74>
  {
    Error_Handler();
 800056a:	f000 f939 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2303      	movs	r3, #3
 8000574:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	2104      	movs	r1, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fbc2 	bl	8002d10 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000592:	f000 f925 	bl	80007e0 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3758      	adds	r7, #88	; 0x58
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <MX_USART2_UART_Init+0x5c>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80005aa:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ac:	f647 2212 	movw	r2, #31250	; 0x7a12
 80005b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <MX_USART2_UART_Init+0x58>)
 80005e4:	f003 fd78 	bl	80040d8 <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005ee:	f000 f8f7 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000510 	.word	0x20000510
 80005fc:	40004400 	.word	0x40004400

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000616:	4b65      	ldr	r3, [pc, #404]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a64      	ldr	r2, [pc, #400]	; (80007ac <MX_GPIO_Init+0x1ac>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b62      	ldr	r3, [pc, #392]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	4b5f      	ldr	r3, [pc, #380]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a5e      	ldr	r2, [pc, #376]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b5c      	ldr	r3, [pc, #368]	; (80007ac <MX_GPIO_Init+0x1ac>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b59      	ldr	r3, [pc, #356]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064a:	4a58      	ldr	r2, [pc, #352]	; (80007ac <MX_GPIO_Init+0x1ac>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000652:	4b56      	ldr	r3, [pc, #344]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065e:	4b53      	ldr	r3, [pc, #332]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a52      	ldr	r2, [pc, #328]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000664:	f043 0302 	orr.w	r3, r3, #2
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b50      	ldr	r3, [pc, #320]	; (80007ac <MX_GPIO_Init+0x1ac>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0302 	and.w	r3, r3, #2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a4c      	ldr	r2, [pc, #304]	; (80007ac <MX_GPIO_Init+0x1ac>)
 800067c:	f043 0308 	orr.w	r3, r3, #8
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <MX_GPIO_Init+0x1ac>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0308 	and.w	r3, r3, #8
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, K_L_T7_Pin|K_L_T6_Pin|K_L_T5_Pin|K_L_T4_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	21f0      	movs	r1, #240	; 0xf0
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f000 fd13 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, K_L_T3_Pin|K_L_T2_Pin|K_R_T2_Pin|K_R_T1_Pin
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80006a0:	4843      	ldr	r0, [pc, #268]	; (80007b0 <MX_GPIO_Init+0x1b0>)
 80006a2:	f000 fd0d 	bl	80010c0 <HAL_GPIO_WritePin>
                          |K_R_T0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, K_L_T1_Pin|K_L_T0_Pin|K_R_T7_Pin|K_R_T6_Pin
 80006a6:	2200      	movs	r2, #0
 80006a8:	f64f 0103 	movw	r1, #63491	; 0xf803
 80006ac:	4841      	ldr	r0, [pc, #260]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 80006ae:	f000 fd07 	bl	80010c0 <HAL_GPIO_WritePin>
                          |K_R_T5_Pin|K_R_T4_Pin|K_R_T3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : K_L_BR2_Pin K_L_MK3_Pin K_L_BR3_Pin K_R_MK5_Pin
                           K_R_BR7_Pin K_R_MK8_Pin K_R_BR8_Pin */
  GPIO_InitStruct.Pin = K_L_BR2_Pin|K_L_MK3_Pin|K_L_BR3_Pin|K_R_MK5_Pin
 80006b2:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 80006b6:	617b      	str	r3, [r7, #20]
                          |K_R_BR7_Pin|K_R_MK8_Pin|K_R_BR8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	483a      	ldr	r0, [pc, #232]	; (80007b0 <MX_GPIO_Init+0x1b0>)
 80006c8:	f000 fb38 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006cc:	2301      	movs	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006d0:	230b      	movs	r3, #11
 80006d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4834      	ldr	r0, [pc, #208]	; (80007b0 <MX_GPIO_Init+0x1b0>)
 80006e0:	f000 fb2c 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : TRS1_T_Pin TRS1_R_Pin TRS2_T_Pin */
  GPIO_InitStruct.Pin = TRS1_T_Pin|TRS1_R_Pin|TRS2_T_Pin;
 80006e4:	230e      	movs	r3, #14
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	482e      	ldr	r0, [pc, #184]	; (80007b0 <MX_GPIO_Init+0x1b0>)
 80006f8:	f000 fb20 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : K_L_MK4_Pin K_L_BR4_Pin K_R_BR5_Pin K_R_MK6_Pin
                           K_R_BR6_Pin K_R_MK7_Pin */
  GPIO_InitStruct.Pin = K_L_MK4_Pin|K_L_BR4_Pin|K_R_BR5_Pin|K_R_MK6_Pin
 80006fc:	f248 7303 	movw	r3, #34563	; 0x8703
 8000700:	617b      	str	r3, [r7, #20]
                          |K_R_BR6_Pin|K_R_MK7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f000 fb12 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : K_L_T7_Pin K_L_T6_Pin K_L_T5_Pin K_L_T4_Pin */
  GPIO_InitStruct.Pin = K_L_T7_Pin|K_L_T6_Pin|K_L_T5_Pin|K_L_T4_Pin;
 8000718:	23f0      	movs	r3, #240	; 0xf0
 800071a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2300      	movs	r3, #0
 8000726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000732:	f000 fb03 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : K_L_T3_Pin K_L_T2_Pin K_R_T2_Pin K_R_T1_Pin
                           K_R_T0_Pin */
  GPIO_InitStruct.Pin = K_L_T3_Pin|K_L_T2_Pin|K_R_T2_Pin|K_R_T1_Pin
 8000736:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800073a:	617b      	str	r3, [r7, #20]
                          |K_R_T0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000740:	2302      	movs	r3, #2
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <MX_GPIO_Init+0x1b0>)
 8000750:	f000 faf4 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : K_L_T1_Pin K_L_T0_Pin K_R_T7_Pin K_R_T6_Pin
                           K_R_T5_Pin K_R_T4_Pin K_R_T3_Pin */
  GPIO_InitStruct.Pin = K_L_T1_Pin|K_L_T0_Pin|K_R_T7_Pin|K_R_T6_Pin
 8000754:	f64f 0303 	movw	r3, #63491	; 0xf803
 8000758:	617b      	str	r3, [r7, #20]
                          |K_R_T5_Pin|K_R_T4_Pin|K_R_T3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800075e:	2302      	movs	r3, #2
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 800076e:	f000 fae5 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : K_R_MK10_Pin K_R_BR10_Pin K_R_BR9_Pin K_L_MK0_Pin
                           K_L_BR0_Pin K_L_MK1_Pin K_L_BR1_Pin K_L_MK2_Pin */
  GPIO_InitStruct.Pin = K_R_MK10_Pin|K_R_BR10_Pin|K_R_BR9_Pin|K_L_MK0_Pin
 8000772:	f240 73f4 	movw	r3, #2036	; 0x7f4
 8000776:	617b      	str	r3, [r7, #20]
                          |K_L_BR0_Pin|K_L_MK1_Pin|K_L_BR1_Pin|K_L_MK2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <MX_GPIO_Init+0x1b4>)
 8000788:	f000 fad8 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : K_R_MK9_Pin */
  GPIO_InitStruct.Pin = K_R_MK9_Pin;
 800078c:	2304      	movs	r3, #4
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(K_R_MK9_GPIO_Port, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_GPIO_Init+0x1b8>)
 80007a0:	f000 facc 	bl	8000d3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000800 	.word	0x48000800
 80007b4:	48000400 	.word	0x48000400
 80007b8:	48000c00 	.word	0x48000c00

080007bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ce:	f000 f98f 	bl	8000af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x44>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6613      	str	r3, [r2, #96]	; 0x60
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x44>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6593      	str	r3, [r2, #88]	; 0x58
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b0ac      	sub	sp, #176	; 0xb0
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2288      	movs	r2, #136	; 0x88
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f008 ff8f 	bl	8009778 <memset>
  if(huart->Instance==USART2)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <HAL_UART_MspInit+0xb0>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d13b      	bne.n	80008dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000868:	2300      	movs	r3, #0
 800086a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f002 fca3 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800087c:	f7ff ffb0 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 8000882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 8000886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088a:	6593      	str	r3, [r2, #88]	; 0x58
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 800088e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	613b      	str	r3, [r7, #16]
 8000896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 800089a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089c:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0xb4>)
 80008a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008b0:	230c      	movs	r3, #12
 80008b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c8:	2307      	movs	r3, #7
 80008ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008d2:	4619      	mov	r1, r3
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fa30 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	37b0      	adds	r7, #176	; 0xb0
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08c      	sub	sp, #48	; 0x30
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <HAL_InitTick+0xc8>)
 80008fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fe:	4a2d      	ldr	r2, [pc, #180]	; (80009b4 <HAL_InitTick+0xc8>)
 8000900:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000904:	6613      	str	r3, [r2, #96]	; 0x60
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <HAL_InitTick+0xc8>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000912:	f107 020c 	add.w	r2, r7, #12
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f002 fbbb 	bl	8003098 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000922:	f002 fba3 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8000926:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092a:	4a23      	ldr	r2, [pc, #140]	; (80009b8 <HAL_InitTick+0xcc>)
 800092c:	fba2 2303 	umull	r2, r3, r2, r3
 8000930:	0c9b      	lsrs	r3, r3, #18
 8000932:	3b01      	subs	r3, #1
 8000934:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000936:	4b21      	ldr	r3, [pc, #132]	; (80009bc <HAL_InitTick+0xd0>)
 8000938:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <HAL_InitTick+0xd4>)
 800093a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800093c:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <HAL_InitTick+0xd0>)
 800093e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000942:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_InitTick+0xd0>)
 8000946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000948:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_InitTick+0xd0>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <HAL_InitTick+0xd0>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_InitTick+0xd0>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800095c:	4817      	ldr	r0, [pc, #92]	; (80009bc <HAL_InitTick+0xd0>)
 800095e:	f003 f8e9 	bl	8003b34 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800096c:	2b00      	cmp	r3, #0
 800096e:	d11b      	bne.n	80009a8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <HAL_InitTick+0xd0>)
 8000972:	f003 f941 	bl	8003bf8 <HAL_TIM_Base_Start_IT>
 8000976:	4603      	mov	r3, r0
 8000978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800097c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000980:	2b00      	cmp	r3, #0
 8000982:	d111      	bne.n	80009a8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000984:	2019      	movs	r0, #25
 8000986:	f000 f9cb 	bl	8000d20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b0f      	cmp	r3, #15
 800098e:	d808      	bhi.n	80009a2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000990:	2200      	movs	r2, #0
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	2019      	movs	r0, #25
 8000996:	f000 f9a7 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_InitTick+0xd8>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	e002      	b.n	80009a8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3730      	adds	r7, #48	; 0x30
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	431bde83 	.word	0x431bde83
 80009bc:	20000594 	.word	0x20000594
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	20000004 	.word	0x20000004

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a26:	f003 f957 	bl	8003cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000594 	.word	0x20000594

08000a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <OTG_FS_IRQHandler+0x10>)
 8000a3a:	f000 fcac 	bl	8001396 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000f40 	.word	0x20000f40

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a70:	f7ff ffea 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a76:	490d      	ldr	r1, [pc, #52]	; (8000aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <LoopForever+0xe>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a8c:	4c0a      	ldr	r4, [pc, #40]	; (8000ab8 <LoopForever+0x16>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f008 fe49 	bl	8009730 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a9e:	f7ff fd15 	bl	80004cc <main>

08000aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa2:	e7fe      	b.n	8000aa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aa4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	200004f4 	.word	0x200004f4
  ldr r2, =_sidata
 8000ab0:	08009830 	.word	0x08009830
  ldr r2, =_sbss
 8000ab4:	200004f4 	.word	0x200004f4
  ldr r4, =_ebss
 8000ab8:	2000301c 	.word	0x2000301c

08000abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC1_2_IRQHandler>

08000abe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f902 	bl	8000cd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f7ff ff0c 	bl	80008ec <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d002      	beq.n	8000ae0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	71fb      	strb	r3, [r7, #7]
 8000ade:	e001      	b.n	8000ae4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae0:	f7ff fe84 	bl	80007ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x20>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_IncTick+0x24>)
 8000b02:	6013      	str	r3, [r2, #0]
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008
 8000b14:	200005e0 	.word	0x200005e0

08000b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <HAL_GetTick+0x14>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200005e0 	.word	0x200005e0

08000b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b38:	f7ff ffee 	bl	8000b18 <HAL_GetTick>
 8000b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b48:	d005      	beq.n	8000b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <HAL_Delay+0x44>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	4413      	add	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b56:	bf00      	nop
 8000b58:	f7ff ffde 	bl	8000b18 <HAL_GetTick>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d8f7      	bhi.n	8000b58 <HAL_Delay+0x28>
  {
  }
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000008 	.word	0x20000008

08000b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f003 0307 	and.w	r3, r3, #7
 8000b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <__NVIC_SetPriorityGrouping+0x44>)
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	60d3      	str	r3, [r2, #12]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	f003 0307 	and.w	r3, r3, #7
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	db0b      	blt.n	8000c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f003 021f 	and.w	r2, r3, #31
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <__NVIC_EnableIRQ+0x38>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	095b      	lsrs	r3, r3, #5
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e100 	.word	0xe000e100

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ff4c 	bl	8000b78 <__NVIC_SetPriorityGrouping>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff61 	bl	8000bc0 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb1 	bl	8000c6c <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff80 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff54 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4a:	e17f      	b.n	800104c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	2101      	movs	r1, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	fa01 f303 	lsl.w	r3, r1, r3
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8171 	beq.w	8001046 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d005      	beq.n	8000d7c <HAL_GPIO_Init+0x40>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d130      	bne.n	8000dde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	091b      	lsrs	r3, r3, #4
 8000dc8:	f003 0201 	and.w	r2, r3, #1
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d118      	bne.n	8000e1c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000df0:	2201      	movs	r2, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	08db      	lsrs	r3, r3, #3
 8000e06:	f003 0201 	and.w	r2, r3, #1
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d017      	beq.n	8000e58 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80ac 	beq.w	8001046 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	4b5f      	ldr	r3, [pc, #380]	; (800106c <HAL_GPIO_Init+0x330>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	4a5e      	ldr	r2, [pc, #376]	; (800106c <HAL_GPIO_Init+0x330>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6613      	str	r3, [r2, #96]	; 0x60
 8000efa:	4b5c      	ldr	r3, [pc, #368]	; (800106c <HAL_GPIO_Init+0x330>)
 8000efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f06:	4a5a      	ldr	r2, [pc, #360]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f30:	d025      	beq.n	8000f7e <HAL_GPIO_Init+0x242>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4f      	ldr	r2, [pc, #316]	; (8001074 <HAL_GPIO_Init+0x338>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d01f      	beq.n	8000f7a <HAL_GPIO_Init+0x23e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4e      	ldr	r2, [pc, #312]	; (8001078 <HAL_GPIO_Init+0x33c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x23a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4d      	ldr	r2, [pc, #308]	; (800107c <HAL_GPIO_Init+0x340>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x236>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4c      	ldr	r2, [pc, #304]	; (8001080 <HAL_GPIO_Init+0x344>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x232>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4b      	ldr	r2, [pc, #300]	; (8001084 <HAL_GPIO_Init+0x348>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x22e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4a      	ldr	r2, [pc, #296]	; (8001088 <HAL_GPIO_Init+0x34c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x22a>
 8000f62:	2306      	movs	r3, #6
 8000f64:	e00c      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f66:	2307      	movs	r3, #7
 8000f68:	e00a      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f6a:	2305      	movs	r3, #5
 8000f6c:	e008      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e006      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f72:	2303      	movs	r3, #3
 8000f74:	e004      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e002      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e000      	b.n	8000f80 <HAL_GPIO_Init+0x244>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	f002 0203 	and.w	r2, r2, #3
 8000f86:	0092      	lsls	r2, r2, #2
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f90:	4937      	ldr	r1, [pc, #220]	; (8001070 <HAL_GPIO_Init+0x334>)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	089b      	lsrs	r3, r3, #2
 8000f96:	3302      	adds	r3, #2
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f9e:	4b3b      	ldr	r3, [pc, #236]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fc2:	4a32      	ldr	r2, [pc, #200]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc8:	4b30      	ldr	r3, [pc, #192]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fec:	4a27      	ldr	r2, [pc, #156]	; (800108c <HAL_GPIO_Init+0x350>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <HAL_GPIO_Init+0x350>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001016:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_GPIO_Init+0x350>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_GPIO_Init+0x350>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001040:	4a12      	ldr	r2, [pc, #72]	; (800108c <HAL_GPIO_Init+0x350>)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	3301      	adds	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa22 f303 	lsr.w	r3, r2, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	f47f ae78 	bne.w	8000d4c <HAL_GPIO_Init+0x10>
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000
 8001074:	48000400 	.word	0x48000400
 8001078:	48000800 	.word	0x48000800
 800107c:	48000c00 	.word	0x48000c00
 8001080:	48001000 	.word	0x48001000
 8001084:	48001400 	.word	0x48001400
 8001088:	48001800 	.word	0x48001800
 800108c:	40010400 	.word	0x40010400

08001090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e001      	b.n	80010b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b08f      	sub	sp, #60	; 0x3c
 80010f4:	af0a      	add	r7, sp, #40	; 0x28
 80010f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e116      	b.n	8001330 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d106      	bne.n	8001122 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f007 fec3 	bl	8008ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f003 fdec 	bl	8004d1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	687e      	ldr	r6, [r7, #4]
 800114e:	466d      	mov	r5, sp
 8001150:	f106 0410 	add.w	r4, r6, #16
 8001154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001160:	e885 0003 	stmia.w	r5, {r0, r1}
 8001164:	1d33      	adds	r3, r6, #4
 8001166:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001168:	6838      	ldr	r0, [r7, #0]
 800116a:	f003 fcfe 	bl	8004b6a <USB_CoreInit>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0d7      	b.n	8001330 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fdda 	bl	8004d40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e04a      	b.n	8001228 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4413      	add	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	333d      	adds	r3, #61	; 0x3d
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	333c      	adds	r3, #60	; 0x3c
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011ba:	7bfa      	ldrb	r2, [r7, #15]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	b298      	uxth	r0, r3
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	3344      	adds	r3, #68	; 0x44
 80011ce:	4602      	mov	r2, r0
 80011d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	3340      	adds	r3, #64	; 0x40
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	3348      	adds	r3, #72	; 0x48
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	440b      	add	r3, r1
 8001208:	334c      	adds	r3, #76	; 0x4c
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	3354      	adds	r3, #84	; 0x54
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	3301      	adds	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	d3af      	bcc.n	8001192 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001232:	2300      	movs	r3, #0
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	e044      	b.n	80012c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001238:	7bfa      	ldrb	r2, [r7, #15]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4613      	mov	r3, r2
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	440b      	add	r3, r1
 8001246:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001264:	7bfa      	ldrb	r2, [r7, #15]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
 8001272:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	3301      	adds	r3, #1
 80012c0:	73fb      	strb	r3, [r7, #15]
 80012c2:	7bfa      	ldrb	r2, [r7, #15]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3b5      	bcc.n	8001238 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	687e      	ldr	r6, [r7, #4]
 80012d4:	466d      	mov	r5, sp
 80012d6:	f106 0410 	add.w	r4, r6, #16
 80012da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012ea:	1d33      	adds	r3, r6, #4
 80012ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ee:	6838      	ldr	r0, [r7, #0]
 80012f0:	f003 fd72 	bl	8004dd8 <USB_DevInit>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d005      	beq.n	8001306 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2202      	movs	r2, #2
 80012fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e014      	b.n	8001330 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	2b01      	cmp	r3, #1
 800131c:	d102      	bne.n	8001324 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f001 f882 	bl	8002428 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f004 fdfa 	bl	8005f22 <USB_DevDisconnect>

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001338 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_PCD_Start+0x1c>
 8001350:	2302      	movs	r3, #2
 8001352:	e01c      	b.n	800138e <HAL_PCD_Start+0x56>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001360:	2b01      	cmp	r3, #1
 8001362:	d105      	bne.n	8001370 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f003 fcc1 	bl	8004cfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f004 fdae 	bl	8005ee0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001396:	b590      	push	{r4, r7, lr}
 8001398:	b08d      	sub	sp, #52	; 0x34
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 fe6c 	bl	800608a <USB_GetMode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 847e 	bne.w	8001cb6 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 fdd0 	bl	8005f64 <USB_ReadInterrupts>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8474 	beq.w	8001cb4 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fdbd 	bl	8005f64 <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d107      	bne.n	8001404 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f002 0202 	and.w	r2, r2, #2
 8001402:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f004 fdab 	bl	8005f64 <USB_ReadInterrupts>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b10      	cmp	r3, #16
 8001416:	d161      	bne.n	80014dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0210 	bic.w	r2, r2, #16
 8001426:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	f003 020f 	and.w	r2, r3, #15
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	3304      	adds	r3, #4
 8001446:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	0c5b      	lsrs	r3, r3, #17
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	2b02      	cmp	r3, #2
 8001452:	d124      	bne.n	800149e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d035      	beq.n	80014cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800146a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	6a38      	ldr	r0, [r7, #32]
 8001474:	f004 fbe2 	bl	8005c3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001484:	441a      	add	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001496:	441a      	add	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	621a      	str	r2, [r3, #32]
 800149c:	e016      	b.n	80014cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	0c5b      	lsrs	r3, r3, #17
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d110      	bne.n	80014cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b0:	2208      	movs	r2, #8
 80014b2:	4619      	mov	r1, r3
 80014b4:	6a38      	ldr	r0, [r7, #32]
 80014b6:	f004 fbc1 	bl	8005c3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c6:	441a      	add	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0210 	orr.w	r2, r2, #16
 80014da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fd3f 	bl	8005f64 <USB_ReadInterrupts>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014f0:	f040 80a7 	bne.w	8001642 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f004 fd44 	bl	8005f8a <USB_ReadDevAllOutEpInterrupt>
 8001502:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001504:	e099      	b.n	800163a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808e 	beq.w	800162e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f004 fd68 	bl	8005ff2 <USB_ReadDevOutEPInterrupt>
 8001522:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153a:	461a      	mov	r2, r3
 800153c:	2301      	movs	r3, #1
 800153e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fe96 	bl	8002274 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155e:	461a      	mov	r2, r3
 8001560:	2308      	movs	r3, #8
 8001562:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 fed2 	bl	8002310 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001582:	461a      	mov	r2, r3
 8001584:	2310      	movs	r3, #16
 8001586:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d030      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	2b80      	cmp	r3, #128	; 0x80
 800159c:	d109      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	3304      	adds	r3, #4
 80015c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2200      	movs	r2, #0
 80015d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f007 fdb7 	bl	8009150 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ee:	461a      	mov	r2, r3
 80015f0:	2302      	movs	r3, #2
 80015f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160a:	461a      	mov	r2, r3
 800160c:	2320      	movs	r3, #32
 800160e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001626:	461a      	mov	r2, r3
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	f47f af62 	bne.w	8001506 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f004 fc8c 	bl	8005f64 <USB_ReadInterrupts>
 800164c:	4603      	mov	r3, r0
 800164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001656:	f040 80a4 	bne.w	80017a2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fcad 	bl	8005fbe <USB_ReadDevAllInEpInterrupt>
 8001664:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800166a:	e096      	b.n	800179a <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 808b 	beq.w	800178e <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f004 fcd3 	bl	800602e <USB_ReadDevInEPInterrupt>
 8001688:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	2201      	movs	r2, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69f9      	ldr	r1, [r7, #28]
 80016b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016b4:	4013      	ands	r3, r2
 80016b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c4:	461a      	mov	r2, r3
 80016c6:	2301      	movs	r3, #1
 80016c8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f007 fca8 	bl	8009026 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	015a      	lsls	r2, r3, #5
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ec:	461a      	mov	r2, r3
 80016ee:	2308      	movs	r3, #8
 80016f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001708:	461a      	mov	r2, r3
 800170a:	2310      	movs	r3, #16
 800170c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	015a      	lsls	r2, r3, #5
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	4413      	add	r3, r2
 8001720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001724:	461a      	mov	r2, r3
 8001726:	2340      	movs	r3, #64	; 0x40
 8001728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d023      	beq.n	800177c <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001736:	6a38      	ldr	r0, [r7, #32]
 8001738:	f003 fc9a 	bl	8005070 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800173c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173e:	4613      	mov	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	3338      	adds	r3, #56	; 0x38
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	3304      	adds	r3, #4
 800174e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	78db      	ldrb	r3, [r3, #3]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2200      	movs	r2, #0
 800175c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	b2db      	uxtb	r3, r3
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f007 fd05 	bl	8009174 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001776:	461a      	mov	r2, r3
 8001778:	2302      	movs	r3, #2
 800177a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fcea 	bl	8002162 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	3301      	adds	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	f47f af65 	bne.w	800166c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 fbdc 	bl	8005f64 <USB_ReadInterrupts>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017b6:	d122      	bne.n	80017fe <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c6:	f023 0301 	bic.w	r3, r3, #1
 80017ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017de:	2100      	movs	r1, #0
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f007 ff39 	bl	8009658 <HAL_PCDEx_LPM_Callback>
 80017e6:	e002      	b.n	80017ee <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f007 fc89 	bl	8009100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80017fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fbae 	bl	8005f64 <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800180e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001812:	d112      	bne.n	800183a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	d102      	bne.n	800182a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f007 fc45 	bl	80090b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001838:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f004 fb90 	bl	8005f64 <USB_ReadInterrupts>
 8001844:	4603      	mov	r3, r0
 8001846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800184a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800184e:	d121      	bne.n	8001894 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	695a      	ldr	r2, [r3, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800185e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d111      	bne.n	800188e <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	f003 020f 	and.w	r2, r3, #15
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001884:	2101      	movs	r1, #1
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f007 fee6 	bl	8009658 <HAL_PCDEx_LPM_Callback>
 800188c:	e002      	b.n	8001894 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f007 fc10 	bl	80090b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f004 fb63 	bl	8005f64 <USB_ReadInterrupts>
 800189e:	4603      	mov	r3, r0
 80018a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a8:	f040 80b5 	bne.w	8001a16 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2110      	movs	r1, #16
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fbd2 	bl	8005070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	e046      	b.n	8001960 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018de:	461a      	mov	r2, r3
 80018e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f6:	0151      	lsls	r1, r2, #5
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	440a      	add	r2, r1
 80018fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001900:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001904:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	015a      	lsls	r2, r3, #5
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	4413      	add	r3, r2
 800190e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001912:	461a      	mov	r2, r3
 8001914:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001918:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192a:	0151      	lsls	r1, r2, #5
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	440a      	add	r2, r1
 8001930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001938:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800194a:	0151      	lsls	r1, r2, #5
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	440a      	add	r2, r1
 8001950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001954:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001958:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	3301      	adds	r3, #1
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001966:	429a      	cmp	r2, r3
 8001968:	d3b3      	bcc.n	80018d2 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001978:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800197c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	2b00      	cmp	r3, #0
 8001984:	d016      	beq.n	80019b4 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001996:	f043 030b 	orr.w	r3, r3, #11
 800199a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ac:	f043 030b 	orr.w	r3, r3, #11
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	e015      	b.n	80019e0 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019da:	f043 030b 	orr.w	r3, r3, #11
 80019de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4610      	mov	r0, r2
 8001a02:	f004 fb73 	bl	80060ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 faa2 	bl	8005f64 <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a2a:	d124      	bne.n	8001a76 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f004 fb38 	bl	80060a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f003 fb95 	bl	800516a <USB_GetDevSpeed>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681c      	ldr	r4, [r3, #0]
 8001a4c:	f001 faec 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8001a50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f003 f8b2 	bl	8004bc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f007 fb08 	bl	8009076 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695a      	ldr	r2, [r3, #20]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 fa72 	bl	8005f64 <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d10a      	bne.n	8001aa0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f007 fae5 	bl	800905a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f002 0208 	and.w	r2, r2, #8
 8001a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 fa5d 	bl	8005f64 <USB_ReadInterrupts>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab0:	2b80      	cmp	r3, #128	; 0x80
 8001ab2:	d122      	bne.n	8001afa <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac4:	e014      	b.n	8001af0 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d105      	bne.n	8001aea <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 fb0b 	bl	8002100 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	3301      	adds	r3, #1
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d3e5      	bcc.n	8001ac6 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fa30 	bl	8005f64 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b0e:	d13b      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b10:	2301      	movs	r3, #1
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
 8001b14:	e02b      	b.n	8001b6e <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	3340      	adds	r3, #64	; 0x40
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d115      	bne.n	8001b68 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	da12      	bge.n	8001b68 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	333f      	adds	r3, #63	; 0x3f
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 facc 	bl	8002100 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3ce      	bcc.n	8001b16 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f004 f9e9 	bl	8005f64 <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b9c:	d155      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e045      	b.n	8001c30 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d12e      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bcc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	da2b      	bge.n	8001c2a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bde:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d121      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10a      	bne.n	8001c2a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6053      	str	r3, [r2, #4]
            break;
 8001c28:	e007      	b.n	8001c3a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3b4      	bcc.n	8001ba4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 f988 	bl	8005f64 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c5e:	d10a      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f007 fa99 	bl	8009198 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 f972 	bl	8005f64 <USB_ReadInterrupts>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d115      	bne.n	8001cb6 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f007 fa89 	bl	80091b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6859      	ldr	r1, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	e000      	b.n	8001cb6 <HAL_PCD_IRQHandler+0x920>
      return;
 8001cb4:	bf00      	nop
    }
  }
}
 8001cb6:	3734      	adds	r7, #52	; 0x34
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd90      	pop	{r4, r7, pc}

08001cbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_PCD_SetAddress+0x1a>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e013      	b.n	8001cfe <HAL_PCD_SetAddress+0x42>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f004 f8d0 	bl	8005e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	4608      	mov	r0, r1
 8001d10:	4611      	mov	r1, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	4603      	mov	r3, r0
 8001d16:	70fb      	strb	r3, [r7, #3]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	803b      	strh	r3, [r7, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	da0f      	bge.n	8001d4c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 020f 	and.w	r2, r3, #15
 8001d32:	4613      	mov	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	3338      	adds	r3, #56	; 0x38
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	3304      	adds	r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	705a      	strb	r2, [r3, #1]
 8001d4a:	e00f      	b.n	8001d6c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4413      	add	r3, r2
 8001d62:	3304      	adds	r3, #4
 8001d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d6c:	78fb      	ldrb	r3, [r7, #3]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d78:	883a      	ldrh	r2, [r7, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	78ba      	ldrb	r2, [r7, #2]
 8001d82:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	785b      	ldrb	r3, [r3, #1]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d004      	beq.n	8001d96 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d96:	78bb      	ldrb	r3, [r7, #2]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d102      	bne.n	8001da2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_PCD_EP_Open+0xaa>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e00e      	b.n	8001dce <HAL_PCD_EP_Open+0xc8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68f9      	ldr	r1, [r7, #12]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f9f2 	bl	80051a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001de2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	da0f      	bge.n	8001e0a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 020f 	and.w	r2, r3, #15
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	3338      	adds	r3, #56	; 0x38
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	705a      	strb	r2, [r3, #1]
 8001e08:	e00f      	b.n	8001e2a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	f003 020f 	and.w	r2, r3, #15
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4413      	add	r3, r2
 8001e20:	3304      	adds	r3, #4
 8001e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_PCD_EP_Close+0x6e>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e00e      	b.n	8001e62 <HAL_PCD_EP_Close+0x8c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f003 fa30 	bl	80052b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	60f8      	str	r0, [r7, #12]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
 8001e76:	460b      	mov	r3, r1
 8001e78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e7a:	7afb      	ldrb	r3, [r7, #11]
 8001e7c:	f003 020f 	and.w	r2, r3, #15
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb8:	7afb      	ldrb	r3, [r7, #11]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6979      	ldr	r1, [r7, #20]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fcb1 	bl	8005830 <USB_EP0StartXfer>
 8001ece:	e005      	b.n	8001edc <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6979      	ldr	r1, [r7, #20]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 faca 	bl	8005470 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f08:	681b      	ldr	r3, [r3, #0]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	460b      	mov	r3, r1
 8001f24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	f003 020f 	and.w	r2, r3, #15
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	3338      	adds	r3, #56	; 0x38
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2201      	movs	r2, #1
 8001f54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f56:	7afb      	ldrb	r3, [r7, #11]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d106      	bne.n	8001f7a <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6979      	ldr	r1, [r7, #20]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fc5c 	bl	8005830 <USB_EP0StartXfer>
 8001f78:	e005      	b.n	8001f86 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6979      	ldr	r1, [r7, #20]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fa75 	bl	8005470 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 020f 	and.w	r2, r3, #15
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d901      	bls.n	8001fae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e04e      	b.n	800204c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	da0f      	bge.n	8001fd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 020f 	and.w	r2, r3, #15
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3338      	adds	r3, #56	; 0x38
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	3304      	adds	r3, #4
 8001fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	705a      	strb	r2, [r3, #1]
 8001fd4:	e00d      	b.n	8001ff2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3304      	adds	r3, #4
 8001fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_PCD_EP_SetStall+0x82>
 800200e:	2302      	movs	r3, #2
 8002010:	e01c      	b.n	800204c <HAL_PCD_EP_SetStall+0xbc>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68f9      	ldr	r1, [r7, #12]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fe63 	bl	8005cec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	2b00      	cmp	r3, #0
 800202e:	d108      	bne.n	8002042 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f004 f855 	bl	80060ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d901      	bls.n	8002072 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e042      	b.n	80020f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002076:	2b00      	cmp	r3, #0
 8002078:	da0f      	bge.n	800209a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3338      	adds	r3, #56	; 0x38
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	3304      	adds	r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	705a      	strb	r2, [r3, #1]
 8002098:	e00f      	b.n	80020ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800209a:	78fb      	ldrb	r3, [r7, #3]
 800209c:	f003 020f 	and.w	r2, r3, #15
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_PCD_EP_ClrStall+0x86>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e00e      	b.n	80020f8 <HAL_PCD_EP_ClrStall+0xa4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 fe6d 	bl	8005dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800210c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	da0c      	bge.n	800212e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 020f 	and.w	r2, r3, #15
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	3338      	adds	r3, #56	; 0x38
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e00c      	b.n	8002148 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	f003 020f 	and.w	r2, r3, #15
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	3304      	adds	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	4618      	mov	r0, r3
 8002150:	f003 fc90 	bl	8005a74 <USB_EPStopXfer>
 8002154:	4603      	mov	r3, r0
 8002156:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002158:	7afb      	ldrb	r3, [r7, #11]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b088      	sub	sp, #32
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	3338      	adds	r3, #56	; 0x38
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	3304      	adds	r3, #4
 8002188:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a1a      	ldr	r2, [r3, #32]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	429a      	cmp	r2, r3
 8002194:	d901      	bls.n	800219a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e067      	b.n	800226a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	699a      	ldr	r2, [r3, #24]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d902      	bls.n	80021b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3303      	adds	r3, #3
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021be:	e026      	b.n	800220e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d902      	bls.n	80021dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3303      	adds	r3, #3
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6919      	ldr	r1, [r3, #16]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	6978      	ldr	r0, [r7, #20]
 80021f2:	f003 fce9 	bl	8005bc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	441a      	add	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	441a      	add	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	b29b      	uxth	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	429a      	cmp	r2, r3
 8002222:	d809      	bhi.n	8002238 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800222c:	429a      	cmp	r2, r3
 800222e:	d203      	bcs.n	8002238 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1c3      	bne.n	80021c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	699a      	ldr	r2, [r3, #24]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	429a      	cmp	r2, r3
 8002242:	d811      	bhi.n	8002268 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	2201      	movs	r2, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	43db      	mvns	r3, r3
 800225e:	6939      	ldr	r1, [r7, #16]
 8002260:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002264:	4013      	ands	r3, r2
 8002266:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	333c      	adds	r3, #60	; 0x3c
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a19      	ldr	r2, [pc, #100]	; (800230c <PCD_EP_OutXfrComplete_int+0x98>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d124      	bne.n	80022f4 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	461a      	mov	r2, r3
 80022c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022c6:	6093      	str	r3, [r2, #8]
 80022c8:	e01a      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022e0:	461a      	mov	r2, r3
 80022e2:	2320      	movs	r3, #32
 80022e4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f006 fe7f 	bl	8008ff0 <HAL_PCD_DataOutStageCallback>
 80022f2:	e005      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	4619      	mov	r1, r3
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f006 fe78 	bl	8008ff0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	4f54310a 	.word	0x4f54310a

08002310 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	333c      	adds	r3, #60	; 0x3c
 8002328:	3304      	adds	r3, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <PCD_EP_OutSetupPacket_int+0x64>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d90e      	bls.n	8002364 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	d009      	beq.n	8002364 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002362:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f006 fe31 	bl	8008fcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	4f54300a 	.word	0x4f54300a

08002378 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
 8002384:	4613      	mov	r3, r2
 8002386:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002390:	78fb      	ldrb	r3, [r7, #3]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d107      	bne.n	80023a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002396:	883b      	ldrh	r3, [r7, #0]
 8002398:	0419      	lsls	r1, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
 80023a4:	e028      	b.n	80023f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	4413      	add	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
 80023b8:	e00d      	b.n	80023d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	3340      	adds	r3, #64	; 0x40
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	4413      	add	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	3b01      	subs	r3, #1
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3ec      	bcc.n	80023ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023e0:	883b      	ldrh	r3, [r7, #0]
 80023e2:	0418      	lsls	r0, r3, #16
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6819      	ldr	r1, [r3, #0]
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	4302      	orrs	r2, r0
 80023f0:	3340      	adds	r3, #64	; 0x40
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	f043 0303 	orr.w	r3, r3, #3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <HAL_PWREx_GetVoltageRange+0x18>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40007000 	.word	0x40007000

0800248c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249a:	d130      	bne.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a8:	d038      	beq.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2232      	movs	r2, #50	; 0x32
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9b      	lsrs	r3, r3, #18
 80024cc:	3301      	adds	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d0:	e002      	b.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e4:	d102      	bne.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f2      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f8:	d110      	bne.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e00f      	b.n	800251e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250a:	d007      	beq.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002514:	4a05      	ldr	r2, [pc, #20]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000
 8002530:	20000000 	.word	0x20000000
 8002534:	431bde83 	.word	0x431bde83

08002538 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_PWREx_EnableVddUSB+0x1c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a04      	ldr	r2, [pc, #16]	; (8002554 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002546:	6053      	str	r3, [r2, #4]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40007000 	.word	0x40007000

08002558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e3ca      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800256a:	4b97      	ldr	r3, [pc, #604]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002574:	4b94      	ldr	r3, [pc, #592]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 80e4 	beq.w	8002754 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d007      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4a>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b0c      	cmp	r3, #12
 8002596:	f040 808b 	bne.w	80026b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b01      	cmp	r3, #1
 800259e:	f040 8087 	bne.w	80026b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a2:	4b89      	ldr	r3, [pc, #548]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x62>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e3a2      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1a      	ldr	r2, [r3, #32]
 80025be:	4b82      	ldr	r3, [pc, #520]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d004      	beq.n	80025d4 <HAL_RCC_OscConfig+0x7c>
 80025ca:	4b7f      	ldr	r3, [pc, #508]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_OscConfig+0x88>
 80025d4:	4b7c      	ldr	r3, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d223      	bcs.n	800262c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fd87 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e383      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f8:	4b73      	ldr	r3, [pc, #460]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a72      	ldr	r2, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80025fe:	f043 0308 	orr.w	r3, r3, #8
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	496d      	ldr	r1, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002616:	4b6c      	ldr	r3, [pc, #432]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	021b      	lsls	r3, r3, #8
 8002624:	4968      	ldr	r1, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
 800262a:	e025      	b.n	8002678 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002632:	f043 0308 	orr.w	r3, r3, #8
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4960      	ldr	r1, [pc, #384]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	495b      	ldr	r1, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fd47 	bl	80030fc <RCC_SetFlashLatencyFromMSIRange>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e343      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002678:	f000 fc4a 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b52      	ldr	r3, [pc, #328]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	4950      	ldr	r1, [pc, #320]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	4a4e      	ldr	r2, [pc, #312]	; (80027d0 <HAL_RCC_OscConfig+0x278>)
 8002696:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002698:	4b4e      	ldr	r3, [pc, #312]	; (80027d4 <HAL_RCC_OscConfig+0x27c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe f925 	bl	80008ec <HAL_InitTick>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d052      	beq.n	8002752 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	e327      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d032      	beq.n	800271e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a42      	ldr	r2, [pc, #264]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026c4:	f7fe fa28 	bl	8000b18 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026cc:	f7fe fa24 	bl	8000b18 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e310      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026de:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a36      	ldr	r2, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026f0:	f043 0308 	orr.w	r3, r3, #8
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	4931      	ldr	r1, [pc, #196]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002708:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	492c      	ldr	r1, [pc, #176]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
 800271c:	e01a      	b.n	8002754 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a29      	ldr	r2, [pc, #164]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800272a:	f7fe f9f5 	bl	8000b18 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002732:	f7fe f9f1 	bl	8000b18 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e2dd      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x1da>
 8002750:	e000      	b.n	8002754 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002752:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d074      	beq.n	800284a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	2b08      	cmp	r3, #8
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x21a>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b0c      	cmp	r3, #12
 800276a:	d10e      	bne.n	800278a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2b03      	cmp	r3, #3
 8002770:	d10b      	bne.n	800278a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d064      	beq.n	8002848 <HAL_RCC_OscConfig+0x2f0>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d160      	bne.n	8002848 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e2ba      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x24a>
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e026      	b.n	80027f0 <HAL_RCC_OscConfig+0x298>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027aa:	d115      	bne.n	80027d8 <HAL_RCC_OscConfig+0x280>
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80027b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b03      	ldr	r3, [pc, #12]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a02      	ldr	r2, [pc, #8]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x298>
 80027c6:	bf00      	nop
 80027c8:	40021000 	.word	0x40021000
 80027cc:	080097d8 	.word	0x080097d8
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004
 80027d8:	4ba0      	ldr	r3, [pc, #640]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a9f      	ldr	r2, [pc, #636]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80027de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b9d      	ldr	r3, [pc, #628]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a9c      	ldr	r2, [pc, #624]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80027ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe f98e 	bl	8000b18 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe f98a 	bl	8000b18 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e276      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002812:	4b92      	ldr	r3, [pc, #584]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x2a8>
 800281e:	e014      	b.n	800284a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe f97a 	bl	8000b18 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe f976 	bl	8000b18 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e262      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800283a:	4b88      	ldr	r3, [pc, #544]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x2d0>
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d060      	beq.n	8002918 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b04      	cmp	r3, #4
 800285a:	d005      	beq.n	8002868 <HAL_RCC_OscConfig+0x310>
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d119      	bne.n	8002896 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d116      	bne.n	8002896 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002868:	4b7c      	ldr	r3, [pc, #496]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_RCC_OscConfig+0x328>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e23f      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	4973      	ldr	r1, [pc, #460]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002894:	e040      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d023      	beq.n	80028e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800289e:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6e      	ldr	r2, [pc, #440]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80028a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe f935 	bl	8000b18 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe f931 	bl	8000b18 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e21d      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c4:	4b65      	ldr	r3, [pc, #404]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0f0      	beq.n	80028b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d0:	4b62      	ldr	r3, [pc, #392]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	495f      	ldr	r1, [pc, #380]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e018      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e6:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a5c      	ldr	r2, [pc, #368]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80028ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe f911 	bl	8000b18 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028fa:	f7fe f90d 	bl	8000b18 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1f9      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03c      	beq.n	800299e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01c      	beq.n	8002966 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800292c:	4b4b      	ldr	r3, [pc, #300]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 800292e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002932:	4a4a      	ldr	r2, [pc, #296]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe f8ec 	bl	8000b18 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe f8e8 	bl	8000b18 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e1d4      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002956:	4b41      	ldr	r3, [pc, #260]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ef      	beq.n	8002944 <HAL_RCC_OscConfig+0x3ec>
 8002964:	e01b      	b.n	800299e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296c:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe f8cf 	bl	8000b18 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe f8cb 	bl	8000b18 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1b7      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1ef      	bne.n	800297e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 80a6 	beq.w	8002af8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029b0:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10d      	bne.n	80029d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b27      	ldr	r3, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80029c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d4:	2301      	movs	r3, #1
 80029d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <HAL_RCC_OscConfig+0x508>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d118      	bne.n	8002a16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <HAL_RCC_OscConfig+0x508>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <HAL_RCC_OscConfig+0x508>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f0:	f7fe f892 	bl	8000b18 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe f88e 	bl	8000b18 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e17a      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a0a:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_RCC_OscConfig+0x508>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d108      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4d8>
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a2e:	e029      	b.n	8002a84 <HAL_RCC_OscConfig+0x52c>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d115      	bne.n	8002a64 <HAL_RCC_OscConfig+0x50c>
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002a40:	f043 0304 	orr.w	r3, r3, #4
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a48:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a03      	ldr	r2, [pc, #12]	; (8002a5c <HAL_RCC_OscConfig+0x504>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a58:	e014      	b.n	8002a84 <HAL_RCC_OscConfig+0x52c>
 8002a5a:	bf00      	nop
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40007000 	.word	0x40007000
 8002a64:	4b9c      	ldr	r3, [pc, #624]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	4a9b      	ldr	r2, [pc, #620]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a74:	4b98      	ldr	r3, [pc, #608]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	4a97      	ldr	r2, [pc, #604]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002a7c:	f023 0304 	bic.w	r3, r3, #4
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d016      	beq.n	8002aba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe f844 	bl	8000b18 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe f840 	bl	8000b18 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e12a      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0ed      	beq.n	8002a94 <HAL_RCC_OscConfig+0x53c>
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7fe f82d 	bl	8000b18 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe f829 	bl	8000b18 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e113      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ad8:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ed      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae6:	7ffb      	ldrb	r3, [r7, #31]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b7a      	ldr	r3, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	4a79      	ldr	r2, [pc, #484]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80fe 	beq.w	8002cfe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f040 80d0 	bne.w	8002cac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b0c:	4b72      	ldr	r3, [pc, #456]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f003 0203 	and.w	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d130      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d127      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d11f      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b4c:	2a07      	cmp	r2, #7
 8002b4e:	bf14      	ite	ne
 8002b50:	2201      	movne	r2, #1
 8002b52:	2200      	moveq	r2, #0
 8002b54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d113      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d109      	bne.n	8002b82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	085b      	lsrs	r3, r3, #1
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d06e      	beq.n	8002c60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d069      	beq.n	8002c5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0ad      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba4:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a4b      	ldr	r2, [pc, #300]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb0:	f7fd ffb2 	bl	8000b18 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fd ffae 	bl	8000b18 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e09a      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bca:	4b43      	ldr	r3, [pc, #268]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd6:	4b40      	ldr	r3, [pc, #256]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCC_OscConfig+0x784>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002be6:	3a01      	subs	r2, #1
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bf0:	0212      	lsls	r2, r2, #8
 8002bf2:	4311      	orrs	r1, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bf8:	0852      	lsrs	r2, r2, #1
 8002bfa:	3a01      	subs	r2, #1
 8002bfc:	0552      	lsls	r2, r2, #21
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c04:	0852      	lsrs	r2, r2, #1
 8002c06:	3a01      	subs	r2, #1
 8002c08:	0652      	lsls	r2, r2, #25
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c10:	0912      	lsrs	r2, r2, #4
 8002c12:	0452      	lsls	r2, r2, #17
 8002c14:	430a      	orrs	r2, r1
 8002c16:	4930      	ldr	r1, [pc, #192]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c34:	f7fd ff70 	bl	8000b18 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fd ff6c 	bl	8000b18 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5a:	e050      	b.n	8002cfe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e04f      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d148      	bne.n	8002cfe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b1a      	ldr	r3, [pc, #104]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a19      	ldr	r2, [pc, #100]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c78:	4b17      	ldr	r3, [pc, #92]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c84:	f7fd ff48 	bl	8000b18 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fd ff44 	bl	8000b18 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e030      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x734>
 8002caa:	e028      	b.n	8002cfe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d023      	beq.n	8002cfa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a08      	ldr	r2, [pc, #32]	; (8002cd8 <HAL_RCC_OscConfig+0x780>)
 8002cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbe:	f7fd ff2b 	bl	8000b18 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc4:	e00c      	b.n	8002ce0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7fd ff27 	bl	8000b18 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d905      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e013      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <HAL_RCC_OscConfig+0x7b0>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1ec      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cec:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x7b0>)
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	4905      	ldr	r1, [pc, #20]	; (8002d08 <HAL_RCC_OscConfig+0x7b0>)
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <HAL_RCC_OscConfig+0x7b4>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60cb      	str	r3, [r1, #12]
 8002cf8:	e001      	b.n	8002cfe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	feeefffc 	.word	0xfeeefffc

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0e7      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b72      	ldr	r3, [pc, #456]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4970      	ldr	r1, [pc, #448]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b6e      	ldr	r3, [pc, #440]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0cf      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b63      	ldr	r3, [pc, #396]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4960      	ldr	r1, [pc, #384]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d04c      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d121      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0a6      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4b54      	ldr	r3, [pc, #336]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d115      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e09a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e08e      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e086      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4943      	ldr	r1, [pc, #268]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fd fe8e 	bl	8000b18 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fd fe8a 	bl	8000b18 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e06e      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b31      	ldr	r3, [pc, #196]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	492b      	ldr	r1, [pc, #172]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e56:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d210      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4923      	ldr	r1, [pc, #140]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e74:	4b21      	ldr	r3, [pc, #132]	; (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e036      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4918      	ldr	r1, [pc, #96]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb0:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4910      	ldr	r1, [pc, #64]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec4:	f000 f824 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	490b      	ldr	r1, [pc, #44]	; (8002f04 <HAL_RCC_ClockConfig+0x1f4>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	4a09      	ldr	r2, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCC_ClockConfig+0x1fc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fcff 	bl	80008ec <HAL_InitTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	080097d8 	.word	0x080097d8
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	; 0x24
 8002f14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f28:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x34>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d121      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d11e      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f44:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e005      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f60:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d102      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f88:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e004      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d134      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d003      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0xac>
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb8:	617b      	str	r3, [r7, #20]
      break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fbe:	617b      	str	r3, [r7, #20]
      break;
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	617b      	str	r3, [r7, #20]
      break;
 8002fc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fc8:	4b13      	ldr	r3, [pc, #76]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd6:	4b10      	ldr	r3, [pc, #64]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	fb03 f202 	mul.w	r2, r3, r2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	0e5b      	lsrs	r3, r3, #25
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003008:	69bb      	ldr	r3, [r7, #24]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	080097f0 	.word	0x080097f0
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4904      	ldr	r1, [pc, #16]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	080097e8 	.word	0x080097e8

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003070:	f7ff ffda 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0adb      	lsrs	r3, r3, #11
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	; (8003094 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40021000 	.word	0x40021000
 8003094:	080097e8 	.word	0x080097e8

08003098 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	220f      	movs	r2, #15
 80030a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030a8:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030b4:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_GetClockConfig+0x5c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	08db      	lsrs	r3, r3, #3
 80030d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030da:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <HAL_RCC_GetClockConfig+0x60>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0207 	and.w	r2, r3, #7
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40022000 	.word	0x40022000

080030fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003108:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003114:	f7ff f9ac 	bl	8002470 <HAL_PWREx_GetVoltageRange>
 8003118:	6178      	str	r0, [r7, #20]
 800311a:	e014      	b.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800311e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003120:	4a24      	ldr	r2, [pc, #144]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003126:	6593      	str	r3, [r2, #88]	; 0x58
 8003128:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f99c 	bl	8002470 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d10b      	bne.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d919      	bls.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2ba0      	cmp	r3, #160	; 0xa0
 8003158:	d902      	bls.n	8003160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800315a:	2302      	movs	r3, #2
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e013      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003160:	2301      	movs	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e010      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d902      	bls.n	8003172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800316c:	2303      	movs	r3, #3
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	e00a      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d102      	bne.n	800317e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003178:	2302      	movs	r3, #2
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e004      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b70      	cmp	r3, #112	; 0x70
 8003182:	d101      	bne.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 0207 	bic.w	r2, r3, #7
 8003190:	4909      	ldr	r1, [pc, #36]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d001      	beq.n	80031aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40022000 	.word	0x40022000

080031bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c4:	2300      	movs	r3, #0
 80031c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d041      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e0:	d02a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80031e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e6:	d824      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ec:	d008      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031f2:	d81e      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d010      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031fe:	e018      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003200:	4b86      	ldr	r3, [pc, #536]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a85      	ldr	r2, [pc, #532]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800320c:	e015      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fabb 	bl	8003790 <RCCEx_PLLSAI1_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800321e:	e00c      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3320      	adds	r3, #32
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fba6 	bl	8003978 <RCCEx_PLLSAI2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	74fb      	strb	r3, [r7, #19]
      break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7cfb      	ldrb	r3, [r7, #19]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003240:	4b76      	ldr	r3, [pc, #472]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324e:	4973      	ldr	r1, [pc, #460]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003256:	e001      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d041      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800326c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003270:	d02a      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003276:	d824      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800327e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003282:	d81e      	bhi.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328c:	d010      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800328e:	e018      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003290:	4b62      	ldr	r3, [pc, #392]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a61      	ldr	r2, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800329c:	e015      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fa73 	bl	8003790 <RCCEx_PLLSAI1_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ae:	e00c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3320      	adds	r3, #32
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 fb5e 	bl	8003978 <RCCEx_PLLSAI2_Config>
 80032bc:	4603      	mov	r3, r0
 80032be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	74fb      	strb	r3, [r7, #19]
      break;
 80032c6:	e000      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10b      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032d0:	4b52      	ldr	r3, [pc, #328]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032de:	494f      	ldr	r1, [pc, #316]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032e6:	e001      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a0 	beq.w	800343a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032fe:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800330e:	2300      	movs	r3, #0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003314:	4b41      	ldr	r3, [pc, #260]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	4a40      	ldr	r2, [pc, #256]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331e:	6593      	str	r3, [r2, #88]	; 0x58
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332c:	2301      	movs	r3, #1
 800332e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003330:	4b3b      	ldr	r3, [pc, #236]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3a      	ldr	r2, [pc, #232]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800333c:	f7fd fbec 	bl	8000b18 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003342:	e009      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fd fbe8 	bl	8000b18 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	74fb      	strb	r3, [r7, #19]
        break;
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003358:	4b31      	ldr	r3, [pc, #196]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003364:	7cfb      	ldrb	r3, [r7, #19]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d15c      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800336a:	4b2c      	ldr	r3, [pc, #176]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01f      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	429a      	cmp	r2, r3
 8003386:	d019      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003394:	4b21      	ldr	r3, [pc, #132]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339a:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	4a1c      	ldr	r2, [pc, #112]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c6:	f7fd fba7 	bl	8000b18 <HAL_GetTick>
 80033ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033cc:	e00b      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fd fba3 	bl	8000b18 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d902      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	74fb      	strb	r3, [r7, #19]
            break;
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ec      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10c      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340a:	4904      	ldr	r1, [pc, #16]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003412:	e009      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	74bb      	strb	r3, [r7, #18]
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000
 8003420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003424:	7cfb      	ldrb	r3, [r7, #19]
 8003426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003428:	7c7b      	ldrb	r3, [r7, #17]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b9e      	ldr	r3, [pc, #632]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	4a9d      	ldr	r2, [pc, #628]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003446:	4b98      	ldr	r3, [pc, #608]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344c:	f023 0203 	bic.w	r2, r3, #3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	4994      	ldr	r1, [pc, #592]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003468:	4b8f      	ldr	r3, [pc, #572]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346e:	f023 020c 	bic.w	r2, r3, #12
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	498c      	ldr	r1, [pc, #560]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003478:	4313      	orrs	r3, r2
 800347a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800348a:	4b87      	ldr	r3, [pc, #540]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4983      	ldr	r1, [pc, #524]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ac:	4b7e      	ldr	r3, [pc, #504]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	497b      	ldr	r1, [pc, #492]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0310 	and.w	r3, r3, #16
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ce:	4b76      	ldr	r3, [pc, #472]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034dc:	4972      	ldr	r1, [pc, #456]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034f0:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	496a      	ldr	r1, [pc, #424]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003500:	4313      	orrs	r3, r2
 8003502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003512:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003520:	4961      	ldr	r1, [pc, #388]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003534:	4b5c      	ldr	r3, [pc, #368]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	4959      	ldr	r1, [pc, #356]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003556:	4b54      	ldr	r3, [pc, #336]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003564:	4950      	ldr	r1, [pc, #320]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	4948      	ldr	r1, [pc, #288]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	493f      	ldr	r1, [pc, #252]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d028      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ca:	4937      	ldr	r1, [pc, #220]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035da:	d106      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035dc:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	4a31      	ldr	r2, [pc, #196]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e6:	60d3      	str	r3, [r2, #12]
 80035e8:	e011      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f2:	d10c      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3304      	adds	r3, #4
 80035f8:	2101      	movs	r1, #1
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 f8c8 	bl	8003790 <RCCEx_PLLSAI1_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003604:	7cfb      	ldrb	r3, [r7, #19]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800360a:	7cfb      	ldrb	r3, [r7, #19]
 800360c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d028      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	491f      	ldr	r1, [pc, #124]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003638:	d106      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	4a1a      	ldr	r2, [pc, #104]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003644:	60d3      	str	r3, [r2, #12]
 8003646:	e011      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003650:	d10c      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3304      	adds	r3, #4
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f899 	bl	8003790 <RCCEx_PLLSAI1_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d109      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a02      	ldr	r2, [pc, #8]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
 80036a4:	e014      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f867 	bl	8003790 <RCCEx_PLLSAI1_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02f      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036dc:	4b2b      	ldr	r3, [pc, #172]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ea:	4928      	ldr	r1, [pc, #160]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036fa:	d10d      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	2102      	movs	r1, #2
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f844 	bl	8003790 <RCCEx_PLLSAI1_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	74bb      	strb	r3, [r7, #18]
 8003716:	e011      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003720:	d10c      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3320      	adds	r3, #32
 8003726:	2102      	movs	r1, #2
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f925 	bl	8003978 <RCCEx_PLLSAI2_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003748:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800374a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003756:	490d      	ldr	r1, [pc, #52]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800377a:	4904      	ldr	r1, [pc, #16]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003782:	7cbb      	ldrb	r3, [r7, #18]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000

08003790 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800379e:	4b75      	ldr	r3, [pc, #468]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d10d      	bne.n	80037d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
       ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037c2:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	091b      	lsrs	r3, r3, #4
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
       ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d047      	beq.n	8003866 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	e044      	b.n	8003866 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d018      	beq.n	8003816 <RCCEx_PLLSAI1_Config+0x86>
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d825      	bhi.n	8003834 <RCCEx_PLLSAI1_Config+0xa4>
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d002      	beq.n	80037f2 <RCCEx_PLLSAI1_Config+0x62>
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d009      	beq.n	8003804 <RCCEx_PLLSAI1_Config+0x74>
 80037f0:	e020      	b.n	8003834 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037f2:	4b60      	ldr	r3, [pc, #384]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003802:	e01a      	b.n	800383a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003804:	4b5b      	ldr	r3, [pc, #364]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	2b00      	cmp	r3, #0
 800380e:	d116      	bne.n	800383e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003814:	e013      	b.n	800383e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003816:	4b57      	ldr	r3, [pc, #348]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003822:	4b54      	ldr	r3, [pc, #336]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003832:	e006      	b.n	8003842 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
      break;
 8003838:	e004      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003842:	bf00      	nop
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800384a:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6819      	ldr	r1, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	430b      	orrs	r3, r1
 8003860:	4944      	ldr	r1, [pc, #272]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d17d      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800386c:	4b41      	ldr	r3, [pc, #260]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a40      	ldr	r2, [pc, #256]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fd f94e 	bl	8000b18 <HAL_GetTick>
 800387c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800387e:	e009      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003880:	f7fd f94a 	bl	8000b18 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d902      	bls.n	8003894 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	73fb      	strb	r3, [r7, #15]
        break;
 8003892:	e005      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ef      	bne.n	8003880 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d160      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038ac:	4b31      	ldr	r3, [pc, #196]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6892      	ldr	r2, [r2, #8]
 80038bc:	0211      	lsls	r1, r2, #8
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	68d2      	ldr	r2, [r2, #12]
 80038c2:	0912      	lsrs	r2, r2, #4
 80038c4:	0452      	lsls	r2, r2, #17
 80038c6:	430a      	orrs	r2, r1
 80038c8:	492a      	ldr	r1, [pc, #168]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	610b      	str	r3, [r1, #16]
 80038ce:	e027      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d112      	bne.n	80038fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038d6:	4b27      	ldr	r3, [pc, #156]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80038de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6892      	ldr	r2, [r2, #8]
 80038e6:	0211      	lsls	r1, r2, #8
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6912      	ldr	r2, [r2, #16]
 80038ec:	0852      	lsrs	r2, r2, #1
 80038ee:	3a01      	subs	r2, #1
 80038f0:	0552      	lsls	r2, r2, #21
 80038f2:	430a      	orrs	r2, r1
 80038f4:	491f      	ldr	r1, [pc, #124]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	610b      	str	r3, [r1, #16]
 80038fa:	e011      	b.n	8003920 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038fc:	4b1d      	ldr	r3, [pc, #116]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003904:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6892      	ldr	r2, [r2, #8]
 800390c:	0211      	lsls	r1, r2, #8
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6952      	ldr	r2, [r2, #20]
 8003912:	0852      	lsrs	r2, r2, #1
 8003914:	3a01      	subs	r2, #1
 8003916:	0652      	lsls	r2, r2, #25
 8003918:	430a      	orrs	r2, r1
 800391a:	4916      	ldr	r1, [pc, #88]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a13      	ldr	r2, [pc, #76]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800392a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd f8f4 	bl	8000b18 <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003932:	e009      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003934:	f7fd f8f0 	bl	8000b18 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d902      	bls.n	8003948 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	73fb      	strb	r3, [r7, #15]
          break;
 8003946:	e005      	b.n	8003954 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ef      	beq.n	8003934 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003954:	7bfb      	ldrb	r3, [r7, #15]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	4904      	ldr	r1, [pc, #16]	; (8003974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000

08003978 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003986:	4b6a      	ldr	r3, [pc, #424]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003992:	4b67      	ldr	r3, [pc, #412]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10d      	bne.n	80039be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
       ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039aa:	4b61      	ldr	r3, [pc, #388]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d047      	beq.n	8003a4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e044      	b.n	8003a4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d018      	beq.n	80039fe <RCCEx_PLLSAI2_Config+0x86>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d825      	bhi.n	8003a1c <RCCEx_PLLSAI2_Config+0xa4>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <RCCEx_PLLSAI2_Config+0x62>
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d009      	beq.n	80039ec <RCCEx_PLLSAI2_Config+0x74>
 80039d8:	e020      	b.n	8003a1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039da:	4b55      	ldr	r3, [pc, #340]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ea:	e01a      	b.n	8003a22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ec:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fc:	e013      	b.n	8003a26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039fe:	4b4c      	ldr	r3, [pc, #304]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0a:	4b49      	ldr	r3, [pc, #292]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1a:	e006      	b.n	8003a2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e004      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	430b      	orrs	r3, r1
 8003a48:	4939      	ldr	r1, [pc, #228]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d167      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a54:	4b36      	ldr	r3, [pc, #216]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a35      	ldr	r2, [pc, #212]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd f85a 	bl	8000b18 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a68:	f7fd f856 	bl	8000b18 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a7c:	4b2c      	ldr	r3, [pc, #176]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ef      	bne.n	8003a68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d14a      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a94:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	0912      	lsrs	r2, r2, #4
 8003aac:	0452      	lsls	r2, r2, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	491f      	ldr	r1, [pc, #124]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	614b      	str	r3, [r1, #20]
 8003ab6:	e011      	b.n	8003adc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6892      	ldr	r2, [r2, #8]
 8003ac8:	0211      	lsls	r1, r2, #8
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6912      	ldr	r2, [r2, #16]
 8003ace:	0852      	lsrs	r2, r2, #1
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0652      	lsls	r2, r2, #25
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003adc:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f816 	bl	8000b18 <HAL_GetTick>
 8003aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aee:	e009      	b.n	8003b04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003af0:	f7fd f812 	bl	8000b18 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d902      	bls.n	8003b04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
          break;
 8003b02:	e005      	b.n	8003b10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ef      	beq.n	8003af0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b16:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	4904      	ldr	r1, [pc, #16]	; (8003b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000

08003b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e049      	b.n	8003bda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d106      	bne.n	8003b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f841 	bl	8003be2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4610      	mov	r0, r2
 8003b74:	f000 f9f8 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3708      	adds	r7, #8
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d001      	beq.n	8003c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e04f      	b.n	8003cb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a23      	ldr	r2, [pc, #140]	; (8003cbc <HAL_TIM_Base_Start_IT+0xc4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01d      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3a:	d018      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00e      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <HAL_TIM_Base_Start_IT+0x76>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d115      	bne.n	8003c9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b06      	cmp	r3, #6
 8003c7e:	d015      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0xb4>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d011      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	e008      	b.n	8003cac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e000      	b.n	8003cae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	00010007 	.word	0x00010007

08003cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0202 	mvn.w	r2, #2
 8003d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f905 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8f7 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f908 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0204 	mvn.w	r2, #4
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8db 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8cd 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f8de 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d122      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d11b      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0208 	mvn.w	r2, #8
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2204      	movs	r2, #4
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8b1 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8a3 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f8b4 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d122      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d11b      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0210 	mvn.w	r2, #16
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2208      	movs	r2, #8
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f887 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f879 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f88a 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10e      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0201 	mvn.w	r2, #1
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fcb0 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f914 	bl	80040b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e96:	d10e      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d107      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f907 	bl	80040c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d10e      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d107      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f838 	bl	8003f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d10e      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0220 	mvn.w	r2, #32
 8003f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8c7 	bl	800409c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a40      	ldr	r2, [pc, #256]	; (800407c <TIM_Base_SetConfig+0x114>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f86:	d00f      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	; (8004080 <TIM_Base_SetConfig+0x118>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00b      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a3c      	ldr	r2, [pc, #240]	; (8004084 <TIM_Base_SetConfig+0x11c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d007      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <TIM_Base_SetConfig+0x120>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a3a      	ldr	r2, [pc, #232]	; (800408c <TIM_Base_SetConfig+0x124>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a2f      	ldr	r2, [pc, #188]	; (800407c <TIM_Base_SetConfig+0x114>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01f      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d01b      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a2c      	ldr	r2, [pc, #176]	; (8004080 <TIM_Base_SetConfig+0x118>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d017      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <TIM_Base_SetConfig+0x11c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d013      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <TIM_Base_SetConfig+0x120>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00f      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a29      	ldr	r2, [pc, #164]	; (800408c <TIM_Base_SetConfig+0x124>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a28      	ldr	r2, [pc, #160]	; (8004090 <TIM_Base_SetConfig+0x128>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a27      	ldr	r2, [pc, #156]	; (8004094 <TIM_Base_SetConfig+0x12c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_Base_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	; (8004098 <TIM_Base_SetConfig+0x130>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <TIM_Base_SetConfig+0x114>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a12      	ldr	r2, [pc, #72]	; (800408c <TIM_Base_SetConfig+0x124>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a11      	ldr	r2, [pc, #68]	; (8004090 <TIM_Base_SetConfig+0x128>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a10      	ldr	r2, [pc, #64]	; (8004094 <TIM_Base_SetConfig+0x12c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0xf8>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <TIM_Base_SetConfig+0x130>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d103      	bne.n	8004068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	615a      	str	r2, [r3, #20]
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40013400 	.word	0x40013400
 8004090:	40014000 	.word	0x40014000
 8004094:	40014400 	.word	0x40014400
 8004098:	40014800 	.word	0x40014800

0800409c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e040      	b.n	800416c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fb9a 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	; 0x24
 8004104:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8c0 	bl	800429c <UART_SetConfig>
 800411c:	4603      	mov	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e022      	b.n	800416c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fb6c 	bl	800480c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fbf3 	bl	8004950 <UART_CheckIdleState>
 800416a:	4603      	mov	r3, r0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	4613      	mov	r3, r2
 8004182:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004188:	2b20      	cmp	r3, #32
 800418a:	f040 8082 	bne.w	8004292 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_UART_Transmit+0x26>
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07a      	b.n	8004294 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Transmit+0x38>
 80041a8:	2302      	movs	r3, #2
 80041aa:	e073      	b.n	8004294 <HAL_UART_Transmit+0x120>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2221      	movs	r2, #33	; 0x21
 80041c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c2:	f7fc fca9 	bl	8000b18 <HAL_GetTick>
 80041c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	88fa      	ldrh	r2, [r7, #6]
 80041cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e0:	d108      	bne.n	80041f4 <HAL_UART_Transmit+0x80>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d104      	bne.n	80041f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	e003      	b.n	80041fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004204:	e02d      	b.n	8004262 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2180      	movs	r1, #128	; 0x80
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 fbe6 	bl	80049e2 <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e039      	b.n	8004294 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004232:	b292      	uxth	r2, r2
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3302      	adds	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e008      	b.n	8004250 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b292      	uxth	r2, r2
 8004248:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3301      	adds	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1cb      	bne.n	8004206 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	2140      	movs	r1, #64	; 0x40
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fbb2 	bl	80049e2 <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e005      	b.n	8004294 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3720      	adds	r7, #32
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800429c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a0:	b08a      	sub	sp, #40	; 0x28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4ba4      	ldr	r3, [pc, #656]	; (800455c <UART_SetConfig+0x2c0>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a99      	ldr	r2, [pc, #612]	; (8004560 <UART_SetConfig+0x2c4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004304:	4313      	orrs	r3, r2
 8004306:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	430a      	orrs	r2, r1
 800431a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a90      	ldr	r2, [pc, #576]	; (8004564 <UART_SetConfig+0x2c8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d126      	bne.n	8004374 <UART_SetConfig+0xd8>
 8004326:	4b90      	ldr	r3, [pc, #576]	; (8004568 <UART_SetConfig+0x2cc>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d81b      	bhi.n	800436c <UART_SetConfig+0xd0>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <UART_SetConfig+0xa0>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	0800434d 	.word	0x0800434d
 8004340:	0800435d 	.word	0x0800435d
 8004344:	08004355 	.word	0x08004355
 8004348:	08004365 	.word	0x08004365
 800434c:	2301      	movs	r3, #1
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004352:	e116      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004354:	2302      	movs	r3, #2
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435a:	e112      	b.n	8004582 <UART_SetConfig+0x2e6>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004362:	e10e      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e10a      	b.n	8004582 <UART_SetConfig+0x2e6>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e106      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a7c      	ldr	r2, [pc, #496]	; (800456c <UART_SetConfig+0x2d0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d138      	bne.n	80043f0 <UART_SetConfig+0x154>
 800437e:	4b7a      	ldr	r3, [pc, #488]	; (8004568 <UART_SetConfig+0x2cc>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	2b0c      	cmp	r3, #12
 800438a:	d82d      	bhi.n	80043e8 <UART_SetConfig+0x14c>
 800438c:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <UART_SetConfig+0xf8>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043c9 	.word	0x080043c9
 8004398:	080043e9 	.word	0x080043e9
 800439c:	080043e9 	.word	0x080043e9
 80043a0:	080043e9 	.word	0x080043e9
 80043a4:	080043d9 	.word	0x080043d9
 80043a8:	080043e9 	.word	0x080043e9
 80043ac:	080043e9 	.word	0x080043e9
 80043b0:	080043e9 	.word	0x080043e9
 80043b4:	080043d1 	.word	0x080043d1
 80043b8:	080043e9 	.word	0x080043e9
 80043bc:	080043e9 	.word	0x080043e9
 80043c0:	080043e9 	.word	0x080043e9
 80043c4:	080043e1 	.word	0x080043e1
 80043c8:	2300      	movs	r3, #0
 80043ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ce:	e0d8      	b.n	8004582 <UART_SetConfig+0x2e6>
 80043d0:	2302      	movs	r3, #2
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d6:	e0d4      	b.n	8004582 <UART_SetConfig+0x2e6>
 80043d8:	2304      	movs	r3, #4
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043de:	e0d0      	b.n	8004582 <UART_SetConfig+0x2e6>
 80043e0:	2308      	movs	r3, #8
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e6:	e0cc      	b.n	8004582 <UART_SetConfig+0x2e6>
 80043e8:	2310      	movs	r3, #16
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ee:	e0c8      	b.n	8004582 <UART_SetConfig+0x2e6>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a5e      	ldr	r2, [pc, #376]	; (8004570 <UART_SetConfig+0x2d4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d125      	bne.n	8004446 <UART_SetConfig+0x1aa>
 80043fa:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <UART_SetConfig+0x2cc>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004404:	2b30      	cmp	r3, #48	; 0x30
 8004406:	d016      	beq.n	8004436 <UART_SetConfig+0x19a>
 8004408:	2b30      	cmp	r3, #48	; 0x30
 800440a:	d818      	bhi.n	800443e <UART_SetConfig+0x1a2>
 800440c:	2b20      	cmp	r3, #32
 800440e:	d00a      	beq.n	8004426 <UART_SetConfig+0x18a>
 8004410:	2b20      	cmp	r3, #32
 8004412:	d814      	bhi.n	800443e <UART_SetConfig+0x1a2>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <UART_SetConfig+0x182>
 8004418:	2b10      	cmp	r3, #16
 800441a:	d008      	beq.n	800442e <UART_SetConfig+0x192>
 800441c:	e00f      	b.n	800443e <UART_SetConfig+0x1a2>
 800441e:	2300      	movs	r3, #0
 8004420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004424:	e0ad      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004426:	2302      	movs	r3, #2
 8004428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442c:	e0a9      	b.n	8004582 <UART_SetConfig+0x2e6>
 800442e:	2304      	movs	r3, #4
 8004430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004434:	e0a5      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004436:	2308      	movs	r3, #8
 8004438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800443c:	e0a1      	b.n	8004582 <UART_SetConfig+0x2e6>
 800443e:	2310      	movs	r3, #16
 8004440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004444:	e09d      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4a      	ldr	r2, [pc, #296]	; (8004574 <UART_SetConfig+0x2d8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d125      	bne.n	800449c <UART_SetConfig+0x200>
 8004450:	4b45      	ldr	r3, [pc, #276]	; (8004568 <UART_SetConfig+0x2cc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800445a:	2bc0      	cmp	r3, #192	; 0xc0
 800445c:	d016      	beq.n	800448c <UART_SetConfig+0x1f0>
 800445e:	2bc0      	cmp	r3, #192	; 0xc0
 8004460:	d818      	bhi.n	8004494 <UART_SetConfig+0x1f8>
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d00a      	beq.n	800447c <UART_SetConfig+0x1e0>
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d814      	bhi.n	8004494 <UART_SetConfig+0x1f8>
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <UART_SetConfig+0x1d8>
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d008      	beq.n	8004484 <UART_SetConfig+0x1e8>
 8004472:	e00f      	b.n	8004494 <UART_SetConfig+0x1f8>
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e082      	b.n	8004582 <UART_SetConfig+0x2e6>
 800447c:	2302      	movs	r3, #2
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e07e      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004484:	2304      	movs	r3, #4
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e07a      	b.n	8004582 <UART_SetConfig+0x2e6>
 800448c:	2308      	movs	r3, #8
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004492:	e076      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004494:	2310      	movs	r3, #16
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800449a:	e072      	b.n	8004582 <UART_SetConfig+0x2e6>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a35      	ldr	r2, [pc, #212]	; (8004578 <UART_SetConfig+0x2dc>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d12a      	bne.n	80044fc <UART_SetConfig+0x260>
 80044a6:	4b30      	ldr	r3, [pc, #192]	; (8004568 <UART_SetConfig+0x2cc>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b4:	d01a      	beq.n	80044ec <UART_SetConfig+0x250>
 80044b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ba:	d81b      	bhi.n	80044f4 <UART_SetConfig+0x258>
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c0:	d00c      	beq.n	80044dc <UART_SetConfig+0x240>
 80044c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c6:	d815      	bhi.n	80044f4 <UART_SetConfig+0x258>
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <UART_SetConfig+0x238>
 80044cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044d0:	d008      	beq.n	80044e4 <UART_SetConfig+0x248>
 80044d2:	e00f      	b.n	80044f4 <UART_SetConfig+0x258>
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e052      	b.n	8004582 <UART_SetConfig+0x2e6>
 80044dc:	2302      	movs	r3, #2
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e04e      	b.n	8004582 <UART_SetConfig+0x2e6>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e04a      	b.n	8004582 <UART_SetConfig+0x2e6>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e046      	b.n	8004582 <UART_SetConfig+0x2e6>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e042      	b.n	8004582 <UART_SetConfig+0x2e6>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <UART_SetConfig+0x2c4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d13a      	bne.n	800457c <UART_SetConfig+0x2e0>
 8004506:	4b18      	ldr	r3, [pc, #96]	; (8004568 <UART_SetConfig+0x2cc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004510:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004514:	d01a      	beq.n	800454c <UART_SetConfig+0x2b0>
 8004516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800451a:	d81b      	bhi.n	8004554 <UART_SetConfig+0x2b8>
 800451c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004520:	d00c      	beq.n	800453c <UART_SetConfig+0x2a0>
 8004522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004526:	d815      	bhi.n	8004554 <UART_SetConfig+0x2b8>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <UART_SetConfig+0x298>
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004530:	d008      	beq.n	8004544 <UART_SetConfig+0x2a8>
 8004532:	e00f      	b.n	8004554 <UART_SetConfig+0x2b8>
 8004534:	2300      	movs	r3, #0
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453a:	e022      	b.n	8004582 <UART_SetConfig+0x2e6>
 800453c:	2302      	movs	r3, #2
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004542:	e01e      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454a:	e01a      	b.n	8004582 <UART_SetConfig+0x2e6>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004552:	e016      	b.n	8004582 <UART_SetConfig+0x2e6>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455a:	e012      	b.n	8004582 <UART_SetConfig+0x2e6>
 800455c:	efff69f3 	.word	0xefff69f3
 8004560:	40008000 	.word	0x40008000
 8004564:	40013800 	.word	0x40013800
 8004568:	40021000 	.word	0x40021000
 800456c:	40004400 	.word	0x40004400
 8004570:	40004800 	.word	0x40004800
 8004574:	40004c00 	.word	0x40004c00
 8004578:	40005000 	.word	0x40005000
 800457c:	2310      	movs	r3, #16
 800457e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a9f      	ldr	r2, [pc, #636]	; (8004804 <UART_SetConfig+0x568>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d17a      	bne.n	8004682 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800458c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004590:	2b08      	cmp	r3, #8
 8004592:	d824      	bhi.n	80045de <UART_SetConfig+0x342>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x300>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045df 	.word	0x080045df
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045df 	.word	0x080045df
 80045ac:	080045cf 	.word	0x080045cf
 80045b0:	080045df 	.word	0x080045df
 80045b4:	080045df 	.word	0x080045df
 80045b8:	080045df 	.word	0x080045df
 80045bc:	080045d7 	.word	0x080045d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c0:	f7fe fd3e 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80045c4:	61f8      	str	r0, [r7, #28]
        break;
 80045c6:	e010      	b.n	80045ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c8:	4b8f      	ldr	r3, [pc, #572]	; (8004808 <UART_SetConfig+0x56c>)
 80045ca:	61fb      	str	r3, [r7, #28]
        break;
 80045cc:	e00d      	b.n	80045ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ce:	f7fe fc9f 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 80045d2:	61f8      	str	r0, [r7, #28]
        break;
 80045d4:	e009      	b.n	80045ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045da:	61fb      	str	r3, [r7, #28]
        break;
 80045dc:	e005      	b.n	80045ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80fb 	beq.w	80047e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d305      	bcc.n	800460e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	429a      	cmp	r2, r3
 800460c:	d903      	bls.n	8004616 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004614:	e0e8      	b.n	80047e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	2200      	movs	r2, #0
 800461a:	461c      	mov	r4, r3
 800461c:	4615      	mov	r5, r2
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	022b      	lsls	r3, r5, #8
 8004628:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800462c:	0222      	lsls	r2, r4, #8
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	6849      	ldr	r1, [r1, #4]
 8004632:	0849      	lsrs	r1, r1, #1
 8004634:	2000      	movs	r0, #0
 8004636:	4688      	mov	r8, r1
 8004638:	4681      	mov	r9, r0
 800463a:	eb12 0a08 	adds.w	sl, r2, r8
 800463e:	eb43 0b09 	adc.w	fp, r3, r9
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004650:	4650      	mov	r0, sl
 8004652:	4659      	mov	r1, fp
 8004654:	f7fb fdb8 	bl	80001c8 <__aeabi_uldivmod>
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4613      	mov	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d308      	bcc.n	800467a <UART_SetConfig+0x3de>
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800466e:	d204      	bcs.n	800467a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	e0b6      	b.n	80047e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004680:	e0b2      	b.n	80047e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	69db      	ldr	r3, [r3, #28]
 8004686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800468a:	d15e      	bne.n	800474a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800468c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004690:	2b08      	cmp	r3, #8
 8004692:	d828      	bhi.n	80046e6 <UART_SetConfig+0x44a>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <UART_SetConfig+0x400>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046c1 	.word	0x080046c1
 80046a0:	080046c9 	.word	0x080046c9
 80046a4:	080046d1 	.word	0x080046d1
 80046a8:	080046e7 	.word	0x080046e7
 80046ac:	080046d7 	.word	0x080046d7
 80046b0:	080046e7 	.word	0x080046e7
 80046b4:	080046e7 	.word	0x080046e7
 80046b8:	080046e7 	.word	0x080046e7
 80046bc:	080046df 	.word	0x080046df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c0:	f7fe fcbe 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 80046c4:	61f8      	str	r0, [r7, #28]
        break;
 80046c6:	e014      	b.n	80046f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046c8:	f7fe fcd0 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 80046cc:	61f8      	str	r0, [r7, #28]
        break;
 80046ce:	e010      	b.n	80046f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d0:	4b4d      	ldr	r3, [pc, #308]	; (8004808 <UART_SetConfig+0x56c>)
 80046d2:	61fb      	str	r3, [r7, #28]
        break;
 80046d4:	e00d      	b.n	80046f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d6:	f7fe fc1b 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 80046da:	61f8      	str	r0, [r7, #28]
        break;
 80046dc:	e009      	b.n	80046f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e2:	61fb      	str	r3, [r7, #28]
        break;
 80046e4:	e005      	b.n	80046f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d077      	beq.n	80047e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	005a      	lsls	r2, r3, #1
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b0f      	cmp	r3, #15
 8004712:	d916      	bls.n	8004742 <UART_SetConfig+0x4a6>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471a:	d212      	bcs.n	8004742 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f023 030f 	bic.w	r3, r3, #15
 8004724:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	b29b      	uxth	r3, r3
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	b29a      	uxth	r2, r3
 8004732:	8afb      	ldrh	r3, [r7, #22]
 8004734:	4313      	orrs	r3, r2
 8004736:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	8afa      	ldrh	r2, [r7, #22]
 800473e:	60da      	str	r2, [r3, #12]
 8004740:	e052      	b.n	80047e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004748:	e04e      	b.n	80047e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800474a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800474e:	2b08      	cmp	r3, #8
 8004750:	d827      	bhi.n	80047a2 <UART_SetConfig+0x506>
 8004752:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x4bc>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	0800477d 	.word	0x0800477d
 800475c:	08004785 	.word	0x08004785
 8004760:	0800478d 	.word	0x0800478d
 8004764:	080047a3 	.word	0x080047a3
 8004768:	08004793 	.word	0x08004793
 800476c:	080047a3 	.word	0x080047a3
 8004770:	080047a3 	.word	0x080047a3
 8004774:	080047a3 	.word	0x080047a3
 8004778:	0800479b 	.word	0x0800479b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe fc60 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004780:	61f8      	str	r0, [r7, #28]
        break;
 8004782:	e014      	b.n	80047ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004784:	f7fe fc72 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 8004788:	61f8      	str	r0, [r7, #28]
        break;
 800478a:	e010      	b.n	80047ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800478c:	4b1e      	ldr	r3, [pc, #120]	; (8004808 <UART_SetConfig+0x56c>)
 800478e:	61fb      	str	r3, [r7, #28]
        break;
 8004790:	e00d      	b.n	80047ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004792:	f7fe fbbd 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8004796:	61f8      	str	r0, [r7, #28]
        break;
 8004798:	e009      	b.n	80047ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479e:	61fb      	str	r3, [r7, #28]
        break;
 80047a0:	e005      	b.n	80047ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047ac:	bf00      	nop
    }

    if (pclk != 0U)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d019      	beq.n	80047e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	085a      	lsrs	r2, r3, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	441a      	add	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	d909      	bls.n	80047e2 <UART_SetConfig+0x546>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d4:	d205      	bcs.n	80047e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60da      	str	r2, [r3, #12]
 80047e0:	e002      	b.n	80047e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80047f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3728      	adds	r7, #40	; 0x28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004802:	bf00      	nop
 8004804:	40008000 	.word	0x40008000
 8004808:	00f42400 	.word	0x00f42400

0800480c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d01a      	beq.n	8004922 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490a:	d10a      	bne.n	8004922 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af02      	add	r7, sp, #8
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004960:	f7fc f8da 	bl	8000b18 <HAL_GetTick>
 8004964:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b08      	cmp	r3, #8
 8004972:	d10e      	bne.n	8004992 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004974:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f82d 	bl	80049e2 <UART_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e023      	b.n	80049da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d10e      	bne.n	80049be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f817 	bl	80049e2 <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e00d      	b.n	80049da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b09c      	sub	sp, #112	; 0x70
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f2:	e0a5      	b.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	f000 80a1 	beq.w	8004b40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049fe:	f7fc f88b 	bl	8000b18 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d302      	bcc.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d13e      	bne.n	8004a92 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a28:	667b      	str	r3, [r7, #100]	; 0x64
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a34:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a3a:	e841 2300 	strex	r3, r2, [r1]
 8004a3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1e6      	bne.n	8004a14 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3308      	adds	r3, #8
 8004a64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a66:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e067      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d04f      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aae:	d147      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ab8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ace:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ada:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004adc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ae0:	e841 2300 	strex	r3, r2, [r1]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e6      	bne.n	8004aba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	3308      	adds	r3, #8
 8004af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	613b      	str	r3, [r7, #16]
   return(result);
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b0c:	623a      	str	r2, [r7, #32]
 8004b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	69f9      	ldr	r1, [r7, #28]
 8004b12:	6a3a      	ldr	r2, [r7, #32]
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e5      	bne.n	8004aec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2220      	movs	r2, #32
 8004b24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e010      	b.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69da      	ldr	r2, [r3, #28]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	f43f af4a 	beq.w	80049f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3770      	adds	r7, #112	; 0x70
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	f107 001c 	add.w	r0, r7, #28
 8004b78:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f001 faf7 	bl	800617c <USB_CoreReset>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ba4:	e005      	b.n	8004bb2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bbe:	b004      	add	sp, #16
 8004bc0:	4770      	bx	lr
	...

08004bc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d165      	bne.n	8004ca4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4a3e      	ldr	r2, [pc, #248]	; (8004cd4 <USB_SetTurnaroundTime+0x110>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d906      	bls.n	8004bee <USB_SetTurnaroundTime+0x2a>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4a3d      	ldr	r2, [pc, #244]	; (8004cd8 <USB_SetTurnaroundTime+0x114>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d202      	bcs.n	8004bee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004be8:	230f      	movs	r3, #15
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	e05c      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	4a39      	ldr	r2, [pc, #228]	; (8004cd8 <USB_SetTurnaroundTime+0x114>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d306      	bcc.n	8004c04 <USB_SetTurnaroundTime+0x40>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4a38      	ldr	r2, [pc, #224]	; (8004cdc <USB_SetTurnaroundTime+0x118>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d202      	bcs.n	8004c04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004bfe:	230e      	movs	r3, #14
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	e051      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4a35      	ldr	r2, [pc, #212]	; (8004cdc <USB_SetTurnaroundTime+0x118>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d306      	bcc.n	8004c1a <USB_SetTurnaroundTime+0x56>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4a34      	ldr	r2, [pc, #208]	; (8004ce0 <USB_SetTurnaroundTime+0x11c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d202      	bcs.n	8004c1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004c14:	230d      	movs	r3, #13
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e046      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4a30      	ldr	r2, [pc, #192]	; (8004ce0 <USB_SetTurnaroundTime+0x11c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d306      	bcc.n	8004c30 <USB_SetTurnaroundTime+0x6c>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4a2f      	ldr	r2, [pc, #188]	; (8004ce4 <USB_SetTurnaroundTime+0x120>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d802      	bhi.n	8004c30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004c2a:	230c      	movs	r3, #12
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	e03b      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4a2c      	ldr	r2, [pc, #176]	; (8004ce4 <USB_SetTurnaroundTime+0x120>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d906      	bls.n	8004c46 <USB_SetTurnaroundTime+0x82>
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	4a2b      	ldr	r2, [pc, #172]	; (8004ce8 <USB_SetTurnaroundTime+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d802      	bhi.n	8004c46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004c40:	230b      	movs	r3, #11
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	e030      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	4a27      	ldr	r2, [pc, #156]	; (8004ce8 <USB_SetTurnaroundTime+0x124>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d906      	bls.n	8004c5c <USB_SetTurnaroundTime+0x98>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4a26      	ldr	r2, [pc, #152]	; (8004cec <USB_SetTurnaroundTime+0x128>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d802      	bhi.n	8004c5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004c56:	230a      	movs	r3, #10
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e025      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a23      	ldr	r2, [pc, #140]	; (8004cec <USB_SetTurnaroundTime+0x128>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d906      	bls.n	8004c72 <USB_SetTurnaroundTime+0xae>
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	4a22      	ldr	r2, [pc, #136]	; (8004cf0 <USB_SetTurnaroundTime+0x12c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d202      	bcs.n	8004c72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004c6c:	2309      	movs	r3, #9
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e01a      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <USB_SetTurnaroundTime+0x12c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d306      	bcc.n	8004c88 <USB_SetTurnaroundTime+0xc4>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <USB_SetTurnaroundTime+0x130>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d802      	bhi.n	8004c88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c82:	2308      	movs	r3, #8
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e00f      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <USB_SetTurnaroundTime+0x130>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d906      	bls.n	8004c9e <USB_SetTurnaroundTime+0xda>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <USB_SetTurnaroundTime+0x134>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d202      	bcs.n	8004c9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c98:	2307      	movs	r3, #7
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e004      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c9e:	2306      	movs	r3, #6
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	e001      	b.n	8004ca8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ca4:	2309      	movs	r3, #9
 8004ca6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	029b      	lsls	r3, r3, #10
 8004cbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	00d8acbf 	.word	0x00d8acbf
 8004cd8:	00e4e1c0 	.word	0x00e4e1c0
 8004cdc:	00f42400 	.word	0x00f42400
 8004ce0:	01067380 	.word	0x01067380
 8004ce4:	011a499f 	.word	0x011a499f
 8004ce8:	01312cff 	.word	0x01312cff
 8004cec:	014ca43f 	.word	0x014ca43f
 8004cf0:	016e3600 	.word	0x016e3600
 8004cf4:	01a6ab1f 	.word	0x01a6ab1f
 8004cf8:	01e84800 	.word	0x01e84800

08004cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f043 0201 	orr.w	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f023 0201 	bic.w	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d115      	bne.n	8004d8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7fb fede 	bl	8000b30 <HAL_Delay>
      ms++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f001 f985 	bl	800608a <USB_GetMode>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d01e      	beq.n	8004dc4 <USB_SetCurrentMode+0x84>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b31      	cmp	r3, #49	; 0x31
 8004d8a:	d9f0      	bls.n	8004d6e <USB_SetCurrentMode+0x2e>
 8004d8c:	e01a      	b.n	8004dc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d115      	bne.n	8004dc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004da0:	2001      	movs	r0, #1
 8004da2:	f7fb fec5 	bl	8000b30 <HAL_Delay>
      ms++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 f96c 	bl	800608a <USB_GetMode>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <USB_SetCurrentMode+0x84>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b31      	cmp	r3, #49	; 0x31
 8004dbc:	d9f0      	bls.n	8004da0 <USB_SetCurrentMode+0x60>
 8004dbe:	e001      	b.n	8004dc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e005      	b.n	8004dd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b32      	cmp	r3, #50	; 0x32
 8004dc8:	d101      	bne.n	8004dce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e000      	b.n	8004dd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004dd8:	b084      	sub	sp, #16
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	e009      	b.n	8004e0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3340      	adds	r3, #64	; 0x40
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	2200      	movs	r2, #0
 8004e04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	613b      	str	r3, [r7, #16]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b0e      	cmp	r3, #14
 8004e10:	d9f2      	bls.n	8004df8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11c      	bne.n	8004e52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e26:	f043 0302 	orr.w	r3, r3, #2
 8004e2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e005      	b.n	8004e5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e64:	461a      	mov	r2, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e70:	4619      	mov	r1, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	461a      	mov	r2, r3
 8004e7a:	680b      	ldr	r3, [r1, #0]
 8004e7c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e7e:	2103      	movs	r1, #3
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f959 	bl	8005138 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e86:	2110      	movs	r1, #16
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f8f1 	bl	8005070 <USB_FlushTxFifo>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f91d 	bl	80050d8 <USB_FlushRxFifo>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	e043      	b.n	8004f5a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ee8:	d118      	bne.n	8004f1c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	461a      	mov	r2, r3
 8004efe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	e013      	b.n	8004f2e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	461a      	mov	r2, r3
 8004f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e008      	b.n	8004f2e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	461a      	mov	r2, r3
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	015a      	lsls	r2, r3, #5
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	3301      	adds	r3, #1
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d3b7      	bcc.n	8004ed2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f62:	2300      	movs	r3, #0
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e043      	b.n	8004ff0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f7e:	d118      	bne.n	8004fb2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	015a      	lsls	r2, r3, #5
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f92:	461a      	mov	r2, r3
 8004f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	e013      	b.n	8004fc4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	461a      	mov	r2, r3
 8004faa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e008      	b.n	8004fc4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fe8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3301      	adds	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d3b7      	bcc.n	8004f68 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800500a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005018:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f043 0210 	orr.w	r2, r3, #16
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699a      	ldr	r2, [r3, #24]
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <USB_DevInit+0x294>)
 800502c:	4313      	orrs	r3, r2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f043 0208 	orr.w	r2, r3, #8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d107      	bne.n	800505a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005052:	f043 0304 	orr.w	r3, r3, #4
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005066:	b004      	add	sp, #16
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	803c3800 	.word	0x803c3800

08005070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <USB_FlushTxFifo+0x64>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d901      	bls.n	8005090 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e01b      	b.n	80050c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	daf2      	bge.n	800507e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	019b      	lsls	r3, r3, #6
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3301      	adds	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a08      	ldr	r2, [pc, #32]	; (80050d4 <USB_FlushTxFifo+0x64>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e006      	b.n	80050c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d0f0      	beq.n	80050a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	00030d40 	.word	0x00030d40

080050d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3301      	adds	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <USB_FlushRxFifo+0x5c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e018      	b.n	8005128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	daf2      	bge.n	80050e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2210      	movs	r2, #16
 8005106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a08      	ldr	r2, [pc, #32]	; (8005134 <USB_FlushRxFifo+0x5c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e006      	b.n	8005128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b10      	cmp	r3, #16
 8005124:	d0f0      	beq.n	8005108 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	00030d40 	.word	0x00030d40

08005138 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	68f9      	ldr	r1, [r7, #12]
 8005154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800516a:	b480      	push	{r7}
 800516c:	b087      	sub	sp, #28
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0306 	and.w	r3, r3, #6
 8005182:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d002      	beq.n	8005190 <USB_GetDevSpeed+0x26>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b06      	cmp	r3, #6
 800518e:	d102      	bne.n	8005196 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005190:	2302      	movs	r3, #2
 8005192:	75fb      	strb	r3, [r7, #23]
 8005194:	e001      	b.n	800519a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005196:	230f      	movs	r3, #15
 8005198:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800519a:	7dfb      	ldrb	r3, [r7, #23]
}
 800519c:	4618      	mov	r0, r3
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d13a      	bne.n	800523a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	69da      	ldr	r2, [r3, #28]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	2101      	movs	r1, #1
 80051d6:	fa01 f303 	lsl.w	r3, r1, r3
 80051da:	b29b      	uxth	r3, r3
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e2:	4313      	orrs	r3, r2
 80051e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d155      	bne.n	80052a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	791b      	ldrb	r3, [r3, #4]
 8005216:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005218:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	059b      	lsls	r3, r3, #22
 800521e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005220:	4313      	orrs	r3, r2
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	e036      	b.n	80052a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	2101      	movs	r1, #1
 800524c:	fa01 f303 	lsl.w	r3, r1, r3
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005258:	4313      	orrs	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11a      	bne.n	80052a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	791b      	ldrb	r3, [r3, #4]
 800528c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800528e:	430b      	orrs	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d161      	bne.n	8005398 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ea:	d11f      	bne.n	800532c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800530a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800532a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	f003 030f 	and.w	r3, r3, #15
 800533c:	2101      	movs	r1, #1
 800533e:	fa01 f303 	lsl.w	r3, r1, r3
 8005342:	b29b      	uxth	r3, r3
 8005344:	43db      	mvns	r3, r3
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800534c:	4013      	ands	r3, r2
 800534e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	2101      	movs	r1, #1
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	b29b      	uxth	r3, r3
 8005368:	43db      	mvns	r3, r3
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005370:	4013      	ands	r3, r2
 8005372:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	0159      	lsls	r1, r3, #5
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	440b      	add	r3, r1
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	4619      	mov	r1, r3
 8005390:	4b35      	ldr	r3, [pc, #212]	; (8005468 <USB_DeactivateEndpoint+0x1b0>)
 8005392:	4013      	ands	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
 8005396:	e060      	b.n	800545a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ae:	d11f      	bne.n	80053f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	2101      	movs	r1, #1
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	43db      	mvns	r3, r3
 800540a:	68f9      	ldr	r1, [r7, #12]
 800540c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005410:	4013      	ands	r3, r2
 8005412:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	2101      	movs	r1, #1
 8005426:	fa01 f303 	lsl.w	r3, r1, r3
 800542a:	041b      	lsls	r3, r3, #16
 800542c:	43db      	mvns	r3, r3
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005434:	4013      	ands	r3, r2
 8005436:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	0159      	lsls	r1, r3, #5
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	440b      	add	r3, r1
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	4619      	mov	r1, r3
 8005454:	4b05      	ldr	r3, [pc, #20]	; (800546c <USB_DeactivateEndpoint+0x1b4>)
 8005456:	4013      	ands	r3, r2
 8005458:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	ec337800 	.word	0xec337800
 800546c:	eff37800 	.word	0xeff37800

08005470 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	f040 810a 	bne.w	80056a2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d132      	bne.n	80054fc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	0151      	lsls	r1, r2, #5
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	440a      	add	r2, r1
 80054ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f4:	0cdb      	lsrs	r3, r3, #19
 80054f6:	04db      	lsls	r3, r3, #19
 80054f8:	6113      	str	r3, [r2, #16]
 80054fa:	e074      	b.n	80055e6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005516:	0cdb      	lsrs	r3, r3, #19
 8005518:	04db      	lsls	r3, r3, #19
 800551a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800553a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800553e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	4413      	add	r3, r2
 8005548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6999      	ldr	r1, [r3, #24]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	440b      	add	r3, r1
 8005558:	1e59      	subs	r1, r3, #1
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005562:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005564:	4b9e      	ldr	r3, [pc, #632]	; (80057e0 <USB_EPStartXfer+0x370>)
 8005566:	400b      	ands	r3, r1
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	0148      	lsls	r0, r1, #5
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	4401      	add	r1, r0
 8005570:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005574:	4313      	orrs	r3, r2
 8005576:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800558e:	6939      	ldr	r1, [r7, #16]
 8005590:	0148      	lsls	r0, r1, #5
 8005592:	6979      	ldr	r1, [r7, #20]
 8005594:	4401      	add	r1, r0
 8005596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800559a:	4313      	orrs	r3, r2
 800559c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	791b      	ldrb	r3, [r3, #4]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d11f      	bne.n	80055e6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80055c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055e4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005600:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005604:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	791b      	ldrb	r3, [r3, #4]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d015      	beq.n	800563a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8106 	beq.w	8005824 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	6979      	ldr	r1, [r7, #20]
 8005630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005634:	4313      	orrs	r3, r2
 8005636:	634b      	str	r3, [r1, #52]	; 0x34
 8005638:	e0f4      	b.n	8005824 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d110      	bne.n	800566c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e00f      	b.n	800568c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	4413      	add	r3, r2
 8005674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	0151      	lsls	r1, r2, #5
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	440a      	add	r2, r1
 8005682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800568a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6919      	ldr	r1, [r3, #16]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	b29b      	uxth	r3, r3
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa94 	bl	8005bc8 <USB_WritePacket>
 80056a0:	e0c0      	b.n	8005824 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	0cdb      	lsrs	r3, r3, #19
 80056be:	04db      	lsls	r3, r3, #19
 80056c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d123      	bne.n	8005736 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005704:	6939      	ldr	r1, [r7, #16]
 8005706:	0148      	lsls	r0, r1, #5
 8005708:	6979      	ldr	r1, [r7, #20]
 800570a:	4401      	add	r1, r0
 800570c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005710:	4313      	orrs	r3, r2
 8005712:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005732:	6113      	str	r3, [r2, #16]
 8005734:	e037      	b.n	80057a6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	4413      	add	r3, r2
 8005740:	1e5a      	subs	r2, r3, #1
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	89fa      	ldrh	r2, [r7, #14]
 8005752:	fb03 f202 	mul.w	r2, r3, r2
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	89fb      	ldrh	r3, [r7, #14]
 800576a:	04d9      	lsls	r1, r3, #19
 800576c:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <USB_EPStartXfer+0x370>)
 800576e:	400b      	ands	r3, r1
 8005770:	6939      	ldr	r1, [r7, #16]
 8005772:	0148      	lsls	r0, r1, #5
 8005774:	6979      	ldr	r1, [r7, #20]
 8005776:	4401      	add	r1, r0
 8005778:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800577c:	4313      	orrs	r3, r2
 800577e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005796:	6939      	ldr	r1, [r7, #16]
 8005798:	0148      	lsls	r0, r1, #5
 800579a:	6979      	ldr	r1, [r7, #20]
 800579c:	4401      	add	r1, r0
 800579e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057a2:	4313      	orrs	r3, r2
 80057a4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	791b      	ldrb	r3, [r3, #4]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d12a      	bne.n	8005804 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d112      	bne.n	80057e4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	e011      	b.n	8005804 <USB_EPStartXfer+0x394>
 80057e0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800581e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop

08005830 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	785b      	ldrb	r3, [r3, #1]
 8005848:	2b01      	cmp	r3, #1
 800584a:	f040 80ab 	bne.w	80059a4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d132      	bne.n	80058bc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005870:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005874:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b4:	0cdb      	lsrs	r3, r3, #19
 80058b6:	04db      	lsls	r3, r3, #19
 80058b8:	6113      	str	r3, [r2, #16]
 80058ba:	e04e      	b.n	800595a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d6:	0cdb      	lsrs	r3, r3, #19
 80058d8:	04db      	lsls	r3, r3, #19
 80058da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	429a      	cmp	r2, r3
 800590a:	d903      	bls.n	8005914 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	0151      	lsls	r1, r2, #5
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	440a      	add	r2, r1
 800592a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	0148      	lsls	r0, r1, #5
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	4401      	add	r1, r0
 8005952:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005956:	4313      	orrs	r3, r2
 8005958:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	0151      	lsls	r1, r2, #5
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	440a      	add	r2, r1
 8005970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005978:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d071      	beq.n	8005a66 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	68f9      	ldr	r1, [r7, #12]
 800599a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800599e:	4313      	orrs	r3, r2
 80059a0:	634b      	str	r3, [r1, #52]	; 0x34
 80059a2:	e060      	b.n	8005a66 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	0151      	lsls	r1, r2, #5
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	440a      	add	r2, r1
 80059ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059be:	0cdb      	lsrs	r3, r3, #19
 80059c0:	04db      	lsls	r3, r3, #19
 80059c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a36:	68b9      	ldr	r1, [r7, #8]
 8005a38:	0148      	lsls	r0, r1, #5
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	4401      	add	r1, r0
 8005a3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a42:	4313      	orrs	r3, r2
 8005a44:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	785b      	ldrb	r3, [r3, #1]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d14a      	bne.n	8005b28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aaa:	f040 8086 	bne.w	8005bba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	7812      	ldrb	r2, [r2, #0]
 8005ac2:	0151      	lsls	r1, r2, #5
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	440a      	add	r2, r1
 8005ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005acc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ad0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	7812      	ldrb	r2, [r2, #0]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d902      	bls.n	8005b0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	75fb      	strb	r3, [r7, #23]
          break;
 8005b0a:	e056      	b.n	8005bba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b24:	d0e7      	beq.n	8005af6 <USB_EPStopXfer+0x82>
 8005b26:	e048      	b.n	8005bba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b40:	d13b      	bne.n	8005bba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	7812      	ldrb	r2, [r2, #0]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d902      	bls.n	8005ba0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b9e:	e00c      	b.n	8005bba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb8:	d0e7      	beq.n	8005b8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b089      	sub	sp, #36	; 0x24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	71fb      	strb	r3, [r7, #7]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8005be6:	88bb      	ldrh	r3, [r7, #4]
 8005be8:	3303      	adds	r3, #3
 8005bea:	089b      	lsrs	r3, r3, #2
 8005bec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8005bee:	2300      	movs	r3, #0
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e018      	b.n	8005c26 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bf4:	79fb      	ldrb	r3, [r7, #7]
 8005bf6:	031a      	lsls	r2, r3, #12
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c00:	461a      	mov	r2, r3
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6013      	str	r3, [r2, #0]
    pSrc++;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	3301      	adds	r3, #1
 8005c12:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	3301      	adds	r3, #1
 8005c18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	3301      	adds	r3, #1
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3e2      	bcc.n	8005bf4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3724      	adds	r7, #36	; 0x24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b08b      	sub	sp, #44	; 0x2c
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	089b      	lsrs	r3, r3, #2
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	f003 0303 	and.w	r3, r3, #3
 8005c60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	623b      	str	r3, [r7, #32]
 8005c66:	e014      	b.n	8005c92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	3301      	adds	r3, #1
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	3301      	adds	r3, #1
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	3301      	adds	r3, #1
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	6a3a      	ldr	r2, [r7, #32]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d3e6      	bcc.n	8005c68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c9a:	8bfb      	ldrh	r3, [r7, #30]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d01e      	beq.n	8005cde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005caa:	461a      	mov	r2, r3
 8005cac:	f107 0310 	add.w	r3, r7, #16
 8005cb0:	6812      	ldr	r2, [r2, #0]
 8005cb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	701a      	strb	r2, [r3, #0]
      i++;
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	3301      	adds	r3, #1
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cd2:	8bfb      	ldrh	r3, [r7, #30]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cd8:	8bfb      	ldrh	r3, [r7, #30]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ea      	bne.n	8005cb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	372c      	adds	r7, #44	; 0x2c
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	785b      	ldrb	r3, [r3, #1]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d12c      	bne.n	8005d62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	db12      	blt.n	8005d40 <USB_EPSetStall+0x54>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00f      	beq.n	8005d40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e02b      	b.n	8005dba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db12      	blt.n	8005d9a <USB_EPSetStall+0xae>
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00f      	beq.n	8005d9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005db8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d128      	bne.n	8005e36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	0151      	lsls	r1, r2, #5
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	440a      	add	r2, r1
 8005dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	791b      	ldrb	r3, [r3, #4]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d003      	beq.n	8005e14 <USB_EPClearStall+0x4c>
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	791b      	ldrb	r3, [r3, #4]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d138      	bne.n	8005e86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e027      	b.n	8005e86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	791b      	ldrb	r3, [r3, #4]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d003      	beq.n	8005e66 <USB_EPClearStall+0x9e>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	791b      	ldrb	r3, [r3, #4]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d10f      	bne.n	8005e86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	015a      	lsls	r2, r3, #5
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005eb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005efa:	f023 0303 	bic.w	r3, r3, #3
 8005efe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f023 0302 	bic.w	r3, r3, #2
 8005f12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b085      	sub	sp, #20
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f3c:	f023 0303 	bic.w	r3, r3, #3
 8005f40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f50:	f043 0302 	orr.w	r3, r3, #2
 8005f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	0c1b      	lsrs	r3, r3, #16
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	b29b      	uxth	r3, r3
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4013      	ands	r3, r2
 800601e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006020:	68bb      	ldr	r3, [r7, #8]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800602e:	b480      	push	{r7}
 8006030:	b087      	sub	sp, #28
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006050:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	f003 030f 	and.w	r3, r3, #15
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	01db      	lsls	r3, r3, #7
 8006060:	b2db      	uxtb	r3, r3
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4013      	ands	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800607c:	68bb      	ldr	r3, [r7, #8]
}
 800607e:	4618      	mov	r0, r3
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	f003 0301 	and.w	r3, r3, #1
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060c4:	f023 0307 	bic.w	r3, r3, #7
 80060c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	333c      	adds	r3, #60	; 0x3c
 80060fe:	3304      	adds	r3, #4
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <USB_EP0_OutStart+0x8c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d90a      	bls.n	8006122 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800611c:	d101      	bne.n	8006122 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	e024      	b.n	800616c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	461a      	mov	r2, r3
 800612a:	2300      	movs	r3, #0
 800612c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006150:	f043 0318 	orr.w	r3, r3, #24
 8006154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006168:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	4f54300a 	.word	0x4f54300a

0800617c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <USB_CoreReset+0x64>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e01b      	b.n	80061d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	daf2      	bge.n	8006188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f043 0201 	orr.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <USB_CoreReset+0x64>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e006      	b.n	80061d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d0f0      	beq.n	80061b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	00030d40 	.word	0x00030d40

080061e4 <write_K_L_T>:
uint16_t K_R_BR_PIN[] = {K_R_BR5_Pin,K_R_BR6_Pin,K_R_BR7_Pin,K_R_BR8_Pin,K_R_BR9_Pin,K_R_BR10_Pin};

GPIO_TypeDef * K_R_MK_PORT[] = {GPIOC,GPIOA,GPIOA,GPIOC,GPIOD,GPIOB};
uint16_t K_R_MK_PIN[] = {K_R_MK5_Pin,K_R_MK6_Pin,K_R_MK7_Pin,K_R_MK8_Pin,K_R_MK9_Pin,K_R_MK10_Pin};

void write_K_L_T(int index, GPIO_PinState val){
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(K_L_T_PORT[index], K_L_T_PIN[index],  val);
 80061f0:	4a07      	ldr	r2, [pc, #28]	; (8006210 <write_K_L_T+0x2c>)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80061f8:	4a06      	ldr	r2, [pc, #24]	; (8006214 <write_K_L_T+0x30>)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	4619      	mov	r1, r3
 8006204:	f7fa ff5c 	bl	80010c0 <HAL_GPIO_WritePin>
}
 8006208:	bf00      	nop
 800620a:	3708      	adds	r7, #8
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000210 	.word	0x20000210
 8006214:	20000230 	.word	0x20000230

08006218 <write_K_R_T>:

void write_K_R_T(int index, GPIO_PinState val){
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(K_R_T_PORT[index], K_R_T_PIN[index],  val);
 8006224:	4a07      	ldr	r2, [pc, #28]	; (8006244 <write_K_R_T+0x2c>)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800622c:	4a06      	ldr	r2, [pc, #24]	; (8006248 <write_K_R_T+0x30>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	4619      	mov	r1, r3
 8006238:	f7fa ff42 	bl	80010c0 <HAL_GPIO_WritePin>
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000280 	.word	0x20000280
 8006248:	200002a0 	.word	0x200002a0

0800624c <read_K_L_MK>:

GPIO_PinState read_K_L_MK(int index){
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(K_L_MK_PORT[index], K_L_MK_PIN[index]);
 8006254:	4a08      	ldr	r2, [pc, #32]	; (8006278 <read_K_L_MK+0x2c>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800625c:	4907      	ldr	r1, [pc, #28]	; (800627c <read_K_L_MK+0x30>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f7fa ff12 	bl	8001090 <HAL_GPIO_ReadPin>
 800626c:	4603      	mov	r3, r0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000260 	.word	0x20000260
 800627c:	20000274 	.word	0x20000274

08006280 <read_K_L_BR>:

GPIO_PinState read_K_L_BR(int index){
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(K_L_BR_PORT[index], K_L_BR_PIN[index]);
 8006288:	4a08      	ldr	r2, [pc, #32]	; (80062ac <read_K_L_BR+0x2c>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006290:	4907      	ldr	r1, [pc, #28]	; (80062b0 <read_K_L_BR+0x30>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006298:	4619      	mov	r1, r3
 800629a:	4610      	mov	r0, r2
 800629c:	f7fa fef8 	bl	8001090 <HAL_GPIO_ReadPin>
 80062a0:	4603      	mov	r3, r0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000240 	.word	0x20000240
 80062b0:	20000254 	.word	0x20000254

080062b4 <read_K_R_MK>:

GPIO_PinState read_K_R_MK(int index){
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(K_R_MK_PORT[index], K_R_MK_PIN[index]);
 80062bc:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <read_K_R_MK+0x2c>)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062c4:	4907      	ldr	r1, [pc, #28]	; (80062e4 <read_K_R_MK+0x30>)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80062cc:	4619      	mov	r1, r3
 80062ce:	4610      	mov	r0, r2
 80062d0:	f7fa fede 	bl	8001090 <HAL_GPIO_ReadPin>
 80062d4:	4603      	mov	r3, r0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	200002d4 	.word	0x200002d4
 80062e4:	200002ec 	.word	0x200002ec

080062e8 <read_K_R_BR>:

GPIO_PinState read_K_R_BR(int index){
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(K_R_BR_PORT[index], K_R_BR_PIN[index]);
 80062f0:	4a08      	ldr	r2, [pc, #32]	; (8006314 <read_K_R_BR+0x2c>)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80062f8:	4907      	ldr	r1, [pc, #28]	; (8006318 <read_K_R_BR+0x30>)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006300:	4619      	mov	r1, r3
 8006302:	4610      	mov	r0, r2
 8006304:	f7fa fec4 	bl	8001090 <HAL_GPIO_ReadPin>
 8006308:	4603      	mov	r3, r0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	200002b0 	.word	0x200002b0
 8006318:	200002c8 	.word	0x200002c8

0800631c <getVelocity>:

FATAR_KEY_STATUS_t keyStatus[88];



static int getVelocity(int br_mr_time_ms){
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]

	int max_velocity = 127;
 8006324:	237f      	movs	r3, #127	; 0x7f
 8006326:	613b      	str	r3, [r7, #16]
	int min_velocity = 1; //lower end of the velocity in range 0 to 127
 8006328:	2301      	movs	r3, #1
 800632a:	60fb      	str	r3, [r7, #12]

	int time_ms = br_mr_time_ms;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	617b      	str	r3, [r7, #20]
	if(time_ms > threshold) time_ms = threshold;
 8006330:	4b10      	ldr	r3, [pc, #64]	; (8006374 <getVelocity+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	429a      	cmp	r2, r3
 8006338:	dd02      	ble.n	8006340 <getVelocity+0x24>
 800633a:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <getVelocity+0x58>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	617b      	str	r3, [r7, #20]
	int velocity = 127 - ( time_ms * (max_velocity - min_velocity) / (threshold - 0) );
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	fb03 f202 	mul.w	r2, r3, r2
 800634c:	4b09      	ldr	r3, [pc, #36]	; (8006374 <getVelocity+0x58>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	fb92 f3f3 	sdiv	r3, r2, r3
 8006354:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8006358:	60bb      	str	r3, [r7, #8]
	velocity = nCurve[velocity-1];
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	3b01      	subs	r3, #1
 800635e:	4a06      	ldr	r2, [pc, #24]	; (8006378 <getVelocity+0x5c>)
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	60bb      	str	r3, [r7, #8]

	return velocity;
 8006366:	68bb      	ldr	r3, [r7, #8]


}
 8006368:	4618      	mov	r0, r3
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	2000000c 	.word	0x2000000c
 8006378:	20000010 	.word	0x20000010

0800637c <scan_L_keys>:


void scan_L_keys(){
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	; 0x28
 8006380:	af00      	add	r7, sp, #0
	int i,j;

	for(j=0;j<=7;j++){
 8006382:	2300      	movs	r3, #0
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	e0ff      	b.n	8006588 <scan_L_keys+0x20c>
		for(i=0;i<=4;i++){
 8006388:	2300      	movs	r3, #0
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
 800638c:	e0f5      	b.n	800657a <scan_L_keys+0x1fe>
			int keyID = i*8 + j;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	4413      	add	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
			write_K_L_T(j, 1);
 8006398:	2101      	movs	r1, #1
 800639a:	6a38      	ldr	r0, [r7, #32]
 800639c:	f7ff ff22 	bl	80061e4 <write_K_L_T>
			int br = read_K_L_BR(i);
 80063a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063a2:	f7ff ff6d 	bl	8006280 <read_K_L_BR>
 80063a6:	4603      	mov	r3, r0
 80063a8:	617b      	str	r3, [r7, #20]
			int mk = read_K_L_MK(i);
 80063aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063ac:	f7ff ff4e 	bl	800624c <read_K_L_MK>
 80063b0:	4603      	mov	r3, r0
 80063b2:	613b      	str	r3, [r7, #16]
			FATAR_KEY_STATUS_t currentKeyStat = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	77fb      	strb	r3, [r7, #31]
			write_K_L_T(j, 0);
 80063b8:	2100      	movs	r1, #0
 80063ba:	6a38      	ldr	r0, [r7, #32]
 80063bc:	f7ff ff12 	bl	80061e4 <write_K_L_T>

			if(br == 0  && mk == 0) currentKeyStat = UNPRESSED;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d105      	bne.n	80063d2 <scan_L_keys+0x56>
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <scan_L_keys+0x56>
 80063cc:	2300      	movs	r3, #0
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e010      	b.n	80063f4 <scan_L_keys+0x78>
			else if(br == 1  && mk == 0) currentKeyStat = BROKEN;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d105      	bne.n	80063e4 <scan_L_keys+0x68>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d102      	bne.n	80063e4 <scan_L_keys+0x68>
 80063de:	2301      	movs	r3, #1
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e007      	b.n	80063f4 <scan_L_keys+0x78>
			else if(br == 1  && mk == 1) currentKeyStat = MADE;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d104      	bne.n	80063f4 <scan_L_keys+0x78>
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <scan_L_keys+0x78>
 80063f0:	2302      	movs	r3, #2
 80063f2:	77fb      	strb	r3, [r7, #31]

			if( keyStatus[keyID] == UNPRESSED && currentKeyStat == BROKEN){
 80063f4:	4a69      	ldr	r2, [pc, #420]	; (800659c <scan_L_keys+0x220>)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	4413      	add	r3, r2
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <scan_L_keys+0x9a>
 8006400:	7ffb      	ldrb	r3, [r7, #31]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d107      	bne.n	8006416 <scan_L_keys+0x9a>
				timestamp1[keyID] = HAL_GetTick();
 8006406:	f7fa fb87 	bl	8000b18 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	4964      	ldr	r1, [pc, #400]	; (80065a0 <scan_L_keys+0x224>)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006414:	e0a9      	b.n	800656a <scan_L_keys+0x1ee>
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == MADE){
 8006416:	4a61      	ldr	r2, [pc, #388]	; (800659c <scan_L_keys+0x220>)
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	4413      	add	r3, r2
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d146      	bne.n	80064b0 <scan_L_keys+0x134>
 8006422:	7ffb      	ldrb	r3, [r7, #31]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d143      	bne.n	80064b0 <scan_L_keys+0x134>
				timestamp2[keyID] = HAL_GetTick();
 8006428:	f7fa fb76 	bl	8000b18 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	495d      	ldr	r1, [pc, #372]	; (80065a4 <scan_L_keys+0x228>)
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
 8006436:	4a5b      	ldr	r2, [pc, #364]	; (80065a4 <scan_L_keys+0x228>)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800643e:	4958      	ldr	r1, [pc, #352]	; (80065a0 <scan_L_keys+0x224>)
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	60fb      	str	r3, [r7, #12]
				int velocity = getVelocity(time_elapsed);
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f7ff ff66 	bl	800631c <getVelocity>
 8006450:	60b8      	str	r0, [r7, #8]
				usbmidi_note_on(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
 8006452:	4b55      	ldr	r3, [pc, #340]	; (80065a8 <scan_L_keys+0x22c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	0052      	lsls	r2, r2, #1
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	b2da      	uxtb	r2, r3
 8006462:	4b52      	ldr	r3, [pc, #328]	; (80065ac <scan_L_keys+0x230>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	4413      	add	r3, r2
 800646a:	b2da      	uxtb	r2, r3
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	b2db      	uxtb	r3, r3
 8006470:	4413      	add	r3, r2
 8006472:	b2da      	uxtb	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2100      	movs	r1, #0
 800647a:	484d      	ldr	r0, [pc, #308]	; (80065b0 <scan_L_keys+0x234>)
 800647c:	f000 fabf 	bl	80069fe <usbmidi_note_on>
				midi_note_on(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift +  keyID, velocity );
 8006480:	4b49      	ldr	r3, [pc, #292]	; (80065a8 <scan_L_keys+0x22c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	0052      	lsls	r2, r2, #1
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4b46      	ldr	r3, [pc, #280]	; (80065ac <scan_L_keys+0x230>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	4413      	add	r3, r2
 8006498:	b2da      	uxtb	r2, r3
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4413      	add	r3, r2
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2100      	movs	r1, #0
 80064a8:	4842      	ldr	r0, [pc, #264]	; (80065b4 <scan_L_keys+0x238>)
 80064aa:	f000 f9c4 	bl	8006836 <midi_note_on>
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == MADE){
 80064ae:	e05c      	b.n	800656a <scan_L_keys+0x1ee>

			}
			else if( keyStatus[keyID] == MADE && currentKeyStat == BROKEN){
 80064b0:	4a3a      	ldr	r2, [pc, #232]	; (800659c <scan_L_keys+0x220>)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	4413      	add	r3, r2
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d10a      	bne.n	80064d2 <scan_L_keys+0x156>
 80064bc:	7ffb      	ldrb	r3, [r7, #31]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d107      	bne.n	80064d2 <scan_L_keys+0x156>
				timestamp1[keyID] = HAL_GetTick();
 80064c2:	f7fa fb29 	bl	8000b18 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	4935      	ldr	r1, [pc, #212]	; (80065a0 <scan_L_keys+0x224>)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80064d0:	e04b      	b.n	800656a <scan_L_keys+0x1ee>
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == UNPRESSED){
 80064d2:	4a32      	ldr	r2, [pc, #200]	; (800659c <scan_L_keys+0x220>)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	4413      	add	r3, r2
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d145      	bne.n	800656a <scan_L_keys+0x1ee>
 80064de:	7ffb      	ldrb	r3, [r7, #31]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d142      	bne.n	800656a <scan_L_keys+0x1ee>
				timestamp2[keyID] = HAL_GetTick();
 80064e4:	f7fa fb18 	bl	8000b18 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	492e      	ldr	r1, [pc, #184]	; (80065a4 <scan_L_keys+0x228>)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
 80064f2:	4a2c      	ldr	r2, [pc, #176]	; (80065a4 <scan_L_keys+0x228>)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064fa:	4929      	ldr	r1, [pc, #164]	; (80065a0 <scan_L_keys+0x224>)
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	607b      	str	r3, [r7, #4]
				int velocity = getVelocity(time_elapsed);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7ff ff08 	bl	800631c <getVelocity>
 800650c:	6038      	str	r0, [r7, #0]
				usbmidi_note_off(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
 800650e:	4b26      	ldr	r3, [pc, #152]	; (80065a8 <scan_L_keys+0x22c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	461a      	mov	r2, r3
 8006516:	0052      	lsls	r2, r2, #1
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	b2da      	uxtb	r2, r3
 800651e:	4b23      	ldr	r3, [pc, #140]	; (80065ac <scan_L_keys+0x230>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	4413      	add	r3, r2
 8006526:	b2da      	uxtb	r2, r3
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	4413      	add	r3, r2
 800652e:	b2da      	uxtb	r2, r3
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2100      	movs	r1, #0
 8006536:	481e      	ldr	r0, [pc, #120]	; (80065b0 <scan_L_keys+0x234>)
 8006538:	f000 fa3d 	bl	80069b6 <usbmidi_note_off>
				midi_note_off(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
 800653c:	4b1a      	ldr	r3, [pc, #104]	; (80065a8 <scan_L_keys+0x22c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	b2db      	uxtb	r3, r3
 8006542:	461a      	mov	r2, r3
 8006544:	0052      	lsls	r2, r2, #1
 8006546:	4413      	add	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	b2da      	uxtb	r2, r3
 800654c:	4b17      	ldr	r3, [pc, #92]	; (80065ac <scan_L_keys+0x230>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	4413      	add	r3, r2
 8006554:	b2da      	uxtb	r2, r3
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4413      	add	r3, r2
 800655c:	b2da      	uxtb	r2, r3
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2100      	movs	r1, #0
 8006564:	4813      	ldr	r0, [pc, #76]	; (80065b4 <scan_L_keys+0x238>)
 8006566:	f000 f945 	bl	80067f4 <midi_note_off>
			}

			keyStatus[keyID] = currentKeyStat;
 800656a:	4a0c      	ldr	r2, [pc, #48]	; (800659c <scan_L_keys+0x220>)
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	4413      	add	r3, r2
 8006570:	7ffa      	ldrb	r2, [r7, #31]
 8006572:	701a      	strb	r2, [r3, #0]
		for(i=0;i<=4;i++){
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	3301      	adds	r3, #1
 8006578:	627b      	str	r3, [r7, #36]	; 0x24
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	2b04      	cmp	r3, #4
 800657e:	f77f af06 	ble.w	800638e <scan_L_keys+0x12>
	for(j=0;j<=7;j++){
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	3301      	adds	r3, #1
 8006586:	623b      	str	r3, [r7, #32]
 8006588:	6a3b      	ldr	r3, [r7, #32]
 800658a:	2b07      	cmp	r3, #7
 800658c:	f77f aefc 	ble.w	8006388 <scan_L_keys+0xc>
		}
	}
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	3728      	adds	r7, #40	; 0x28
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	200008a8 	.word	0x200008a8
 80065a0:	200005e4 	.word	0x200005e4
 80065a4:	20000744 	.word	0x20000744
 80065a8:	200008a4 	.word	0x200008a4
 80065ac:	2000020c 	.word	0x2000020c
 80065b0:	200002f8 	.word	0x200002f8
 80065b4:	20000304 	.word	0x20000304

080065b8 <scan_R_keys>:


void scan_R_keys(){
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af00      	add	r7, sp, #0
	int i,j;

	for(j=0;j<=7;j++){
 80065be:	2300      	movs	r3, #0
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	e100      	b.n	80067c6 <scan_R_keys+0x20e>
		for(i=0;i<=5;i++){
 80065c4:	2300      	movs	r3, #0
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
 80065c8:	e0f6      	b.n	80067b8 <scan_R_keys+0x200>
			int keyID = 40 + i*8 + j;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	3305      	adds	r3, #5
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	6a3a      	ldr	r2, [r7, #32]
 80065d2:	4413      	add	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
			write_K_R_T(j, 1);
 80065d6:	2101      	movs	r1, #1
 80065d8:	6a38      	ldr	r0, [r7, #32]
 80065da:	f7ff fe1d 	bl	8006218 <write_K_R_T>
			int br = read_K_R_BR(i);
 80065de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065e0:	f7ff fe82 	bl	80062e8 <read_K_R_BR>
 80065e4:	4603      	mov	r3, r0
 80065e6:	617b      	str	r3, [r7, #20]
			int mk = read_K_R_MK(i);
 80065e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ea:	f7ff fe63 	bl	80062b4 <read_K_R_MK>
 80065ee:	4603      	mov	r3, r0
 80065f0:	613b      	str	r3, [r7, #16]
			FATAR_KEY_STATUS_t currentKeyStat = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	77fb      	strb	r3, [r7, #31]
			write_K_R_T(j, 0);
 80065f6:	2100      	movs	r1, #0
 80065f8:	6a38      	ldr	r0, [r7, #32]
 80065fa:	f7ff fe0d 	bl	8006218 <write_K_R_T>

			if(br == 0  && mk == 0) currentKeyStat = UNPRESSED;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d105      	bne.n	8006610 <scan_R_keys+0x58>
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d102      	bne.n	8006610 <scan_R_keys+0x58>
 800660a:	2300      	movs	r3, #0
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e010      	b.n	8006632 <scan_R_keys+0x7a>
			else if(br == 1  && mk == 0) currentKeyStat = BROKEN;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d105      	bne.n	8006622 <scan_R_keys+0x6a>
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d102      	bne.n	8006622 <scan_R_keys+0x6a>
 800661c:	2301      	movs	r3, #1
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e007      	b.n	8006632 <scan_R_keys+0x7a>
			else if(br == 1  && mk == 1) currentKeyStat = MADE;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d104      	bne.n	8006632 <scan_R_keys+0x7a>
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d101      	bne.n	8006632 <scan_R_keys+0x7a>
 800662e:	2302      	movs	r3, #2
 8006630:	77fb      	strb	r3, [r7, #31]

			if( keyStatus[keyID] == UNPRESSED && currentKeyStat == BROKEN){
 8006632:	4a69      	ldr	r2, [pc, #420]	; (80067d8 <scan_R_keys+0x220>)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	4413      	add	r3, r2
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10a      	bne.n	8006654 <scan_R_keys+0x9c>
 800663e:	7ffb      	ldrb	r3, [r7, #31]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d107      	bne.n	8006654 <scan_R_keys+0x9c>
				timestamp1[keyID] = HAL_GetTick();
 8006644:	f7fa fa68 	bl	8000b18 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	4964      	ldr	r1, [pc, #400]	; (80067dc <scan_R_keys+0x224>)
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006652:	e0a9      	b.n	80067a8 <scan_R_keys+0x1f0>
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == MADE){
 8006654:	4a60      	ldr	r2, [pc, #384]	; (80067d8 <scan_R_keys+0x220>)
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	4413      	add	r3, r2
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d146      	bne.n	80066ee <scan_R_keys+0x136>
 8006660:	7ffb      	ldrb	r3, [r7, #31]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d143      	bne.n	80066ee <scan_R_keys+0x136>
				timestamp2[keyID] = HAL_GetTick();
 8006666:	f7fa fa57 	bl	8000b18 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	495c      	ldr	r1, [pc, #368]	; (80067e0 <scan_R_keys+0x228>)
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
 8006674:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <scan_R_keys+0x228>)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800667c:	4957      	ldr	r1, [pc, #348]	; (80067dc <scan_R_keys+0x224>)
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	60fb      	str	r3, [r7, #12]
				int velocity = getVelocity(time_elapsed);
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f7ff fe47 	bl	800631c <getVelocity>
 800668e:	60b8      	str	r0, [r7, #8]
				usbmidi_note_on(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
 8006690:	4b54      	ldr	r3, [pc, #336]	; (80067e4 <scan_R_keys+0x22c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	461a      	mov	r2, r3
 8006698:	0052      	lsls	r2, r2, #1
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	4b51      	ldr	r3, [pc, #324]	; (80067e8 <scan_R_keys+0x230>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	4413      	add	r3, r2
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	2100      	movs	r1, #0
 80066b8:	484c      	ldr	r0, [pc, #304]	; (80067ec <scan_R_keys+0x234>)
 80066ba:	f000 f9a0 	bl	80069fe <usbmidi_note_on>
				midi_note_on(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
 80066be:	4b49      	ldr	r3, [pc, #292]	; (80067e4 <scan_R_keys+0x22c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	0052      	lsls	r2, r2, #1
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	4b46      	ldr	r3, [pc, #280]	; (80067e8 <scan_R_keys+0x230>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	4413      	add	r3, r2
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	4413      	add	r3, r2
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2100      	movs	r1, #0
 80066e6:	4842      	ldr	r0, [pc, #264]	; (80067f0 <scan_R_keys+0x238>)
 80066e8:	f000 f8a5 	bl	8006836 <midi_note_on>
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == MADE){
 80066ec:	e05c      	b.n	80067a8 <scan_R_keys+0x1f0>
				//printf("pressed at velocity %d and time is %d \r\n",velocity,time_elapsed );
			}
			else if( keyStatus[keyID] == MADE && currentKeyStat == BROKEN){
 80066ee:	4a3a      	ldr	r2, [pc, #232]	; (80067d8 <scan_R_keys+0x220>)
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	4413      	add	r3, r2
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	d10a      	bne.n	8006710 <scan_R_keys+0x158>
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d107      	bne.n	8006710 <scan_R_keys+0x158>
				timestamp1[keyID] = HAL_GetTick();
 8006700:	f7fa fa0a 	bl	8000b18 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	4935      	ldr	r1, [pc, #212]	; (80067dc <scan_R_keys+0x224>)
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800670e:	e04b      	b.n	80067a8 <scan_R_keys+0x1f0>
			}
			else if( keyStatus[keyID] == BROKEN && currentKeyStat == UNPRESSED){
 8006710:	4a31      	ldr	r2, [pc, #196]	; (80067d8 <scan_R_keys+0x220>)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	4413      	add	r3, r2
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d145      	bne.n	80067a8 <scan_R_keys+0x1f0>
 800671c:	7ffb      	ldrb	r3, [r7, #31]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d142      	bne.n	80067a8 <scan_R_keys+0x1f0>
				timestamp2[keyID] = HAL_GetTick();
 8006722:	f7fa f9f9 	bl	8000b18 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	492d      	ldr	r1, [pc, #180]	; (80067e0 <scan_R_keys+0x228>)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				int time_elapsed = timestamp2[keyID] - timestamp1[keyID];
 8006730:	4a2b      	ldr	r2, [pc, #172]	; (80067e0 <scan_R_keys+0x228>)
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006738:	4928      	ldr	r1, [pc, #160]	; (80067dc <scan_R_keys+0x224>)
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	607b      	str	r3, [r7, #4]
				int velocity = getVelocity(time_elapsed);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fde9 	bl	800631c <getVelocity>
 800674a:	6038      	str	r0, [r7, #0]

				usbmidi_note_off(&USBMIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
 800674c:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <scan_R_keys+0x22c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	b2da      	uxtb	r2, r3
 800675c:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <scan_R_keys+0x230>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	4413      	add	r3, r2
 8006764:	b2da      	uxtb	r2, r3
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	4413      	add	r3, r2
 800676c:	b2da      	uxtb	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2100      	movs	r1, #0
 8006774:	481d      	ldr	r0, [pc, #116]	; (80067ec <scan_R_keys+0x234>)
 8006776:	f000 f91e 	bl	80069b6 <usbmidi_note_off>
				midi_note_off(&MIDI1, CHANNEL_1 , midiStartNoteNo + 12*octaveShift + keyID, velocity );
 800677a:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <scan_R_keys+0x22c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	0052      	lsls	r2, r2, #1
 8006784:	4413      	add	r3, r2
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <scan_R_keys+0x230>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	4413      	add	r3, r2
 8006792:	b2da      	uxtb	r2, r3
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	4413      	add	r3, r2
 800679a:	b2da      	uxtb	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2100      	movs	r1, #0
 80067a2:	4813      	ldr	r0, [pc, #76]	; (80067f0 <scan_R_keys+0x238>)
 80067a4:	f000 f826 	bl	80067f4 <midi_note_off>
				//printf("released at velocity %d and time is %d \r\n",velocity,time_elapsed );
			}
			keyStatus[keyID] = currentKeyStat;
 80067a8:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <scan_R_keys+0x220>)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	4413      	add	r3, r2
 80067ae:	7ffa      	ldrb	r2, [r7, #31]
 80067b0:	701a      	strb	r2, [r3, #0]
		for(i=0;i<=5;i++){
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	3301      	adds	r3, #1
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	f77f af05 	ble.w	80065ca <scan_R_keys+0x12>
	for(j=0;j<=7;j++){
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	3301      	adds	r3, #1
 80067c4:	623b      	str	r3, [r7, #32]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	2b07      	cmp	r3, #7
 80067ca:	f77f aefb 	ble.w	80065c4 <scan_R_keys+0xc>
		}
	}
}
 80067ce:	bf00      	nop
 80067d0:	bf00      	nop
 80067d2:	3728      	adds	r7, #40	; 0x28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	200008a8 	.word	0x200008a8
 80067dc:	200005e4 	.word	0x200005e4
 80067e0:	20000744 	.word	0x20000744
 80067e4:	200008a4 	.word	0x200008a4
 80067e8:	2000020c 	.word	0x2000020c
 80067ec:	200002f8 	.word	0x200002f8
 80067f0:	20000304 	.word	0x20000304

080067f4 <midi_note_off>:
 */

#include <midi.h>


uint16_t midi_note_off(MIDI_t *MIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	4608      	mov	r0, r1
 80067fe:	4611      	mov	r1, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4603      	mov	r3, r0
 8006804:	70fb      	strb	r3, [r7, #3]
 8006806:	460b      	mov	r3, r1
 8006808:	70bb      	strb	r3, [r7, #2]
 800680a:	4613      	mov	r3, r2
 800680c:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];
	midiData[0] = NOTE_OFF + channel;
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	3b80      	subs	r3, #128	; 0x80
 8006812:	b2db      	uxtb	r3, r3
 8006814:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 8006816:	78bb      	ldrb	r3, [r7, #2]
 8006818:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 800681a:	787b      	ldrb	r3, [r7, #1]
 800681c:	73bb      	strb	r3, [r7, #14]
	return MIDI->tx_bytes(midiData, 3);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f107 020c 	add.w	r2, r7, #12
 8006826:	2103      	movs	r1, #3
 8006828:	4610      	mov	r0, r2
 800682a:	4798      	blx	r3
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <midi_note_on>:
uint16_t midi_note_on(MIDI_t *MIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	4608      	mov	r0, r1
 8006840:	4611      	mov	r1, r2
 8006842:	461a      	mov	r2, r3
 8006844:	4603      	mov	r3, r0
 8006846:	70fb      	strb	r3, [r7, #3]
 8006848:	460b      	mov	r3, r1
 800684a:	70bb      	strb	r3, [r7, #2]
 800684c:	4613      	mov	r3, r2
 800684e:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];
	midiData[0] = NOTE_ON + channel;
 8006850:	78fb      	ldrb	r3, [r7, #3]
 8006852:	3b70      	subs	r3, #112	; 0x70
 8006854:	b2db      	uxtb	r3, r3
 8006856:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 8006858:	78bb      	ldrb	r3, [r7, #2]
 800685a:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 800685c:	787b      	ldrb	r3, [r7, #1]
 800685e:	73bb      	strb	r3, [r7, #14]
	return MIDI->tx_bytes(midiData, 3);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f107 020c 	add.w	r2, r7, #12
 8006868:	2103      	movs	r1, #3
 800686a:	4610      	mov	r0, r2
 800686c:	4798      	blx	r3
 800686e:	4603      	mov	r3, r0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <midi_control_change>:
	midiData[0] = POLY_AFTERTOUCH + channel;
	midiData[1] = note;
	midiData[2] = pressureValue;
	return MIDI->tx_bytes(midiData, 3);
}
uint16_t midi_control_change(MIDI_t *MIDI, MIDI_CHANNEL_t channel, MIDI_CONTROL_FUNCTION_t controllerNumber, uint8_t controllerValue){
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	4608      	mov	r0, r1
 8006882:	4611      	mov	r1, r2
 8006884:	461a      	mov	r2, r3
 8006886:	4603      	mov	r3, r0
 8006888:	70fb      	strb	r3, [r7, #3]
 800688a:	460b      	mov	r3, r1
 800688c:	70bb      	strb	r3, [r7, #2]
 800688e:	4613      	mov	r3, r2
 8006890:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];
	midiData[0] = MODE_CHANGE + channel;
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	3b50      	subs	r3, #80	; 0x50
 8006896:	b2db      	uxtb	r3, r3
 8006898:	733b      	strb	r3, [r7, #12]
	midiData[1] = controllerNumber;
 800689a:	78bb      	ldrb	r3, [r7, #2]
 800689c:	737b      	strb	r3, [r7, #13]
	midiData[2] = controllerValue;
 800689e:	787b      	ldrb	r3, [r7, #1]
 80068a0:	73bb      	strb	r3, [r7, #14]
	return MIDI->tx_bytes(midiData, 3);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f107 020c 	add.w	r2, r7, #12
 80068aa:	2103      	movs	r1, #3
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
 80068b0:	4603      	mov	r3, r0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <midi_damperPedal>:





uint16_t midi_damperPedal(MIDI_t *MIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
 80068c6:	4613      	mov	r3, r2
 80068c8:	70bb      	strb	r3, [r7, #2]
	midi_control_change(MIDI, channel, SUSTAIN_ON_OFF , onOff );
 80068ca:	78bb      	ldrb	r3, [r7, #2]
 80068cc:	78f9      	ldrb	r1, [r7, #3]
 80068ce:	2240      	movs	r2, #64	; 0x40
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff ffd1 	bl	8006878 <midi_control_change>
}
 80068d6:	bf00      	nop
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <midi_sostenuto>:
uint16_t midi_portamento(MIDI_t *MIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
	midi_control_change(MIDI, channel, PORTAMENTO_ON_OFF , onOff );
}
uint16_t midi_sostenuto(MIDI_t *MIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
 80068ec:	4613      	mov	r3, r2
 80068ee:	70bb      	strb	r3, [r7, #2]
	midi_control_change(MIDI, channel, SOSTUNUTO_ON_OFF , onOff );
 80068f0:	78bb      	ldrb	r3, [r7, #2]
 80068f2:	78f9      	ldrb	r1, [r7, #3]
 80068f4:	2242      	movs	r2, #66	; 0x42
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff ffbe 	bl	8006878 <midi_control_change>
}
 80068fc:	bf00      	nop
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <midi_softPedal>:
uint16_t midi_softPedal(MIDI_t *MIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
 8006912:	4613      	mov	r3, r2
 8006914:	70bb      	strb	r3, [r7, #2]
	midi_control_change(MIDI, channel, SOFT_PEDAL_ON_OFF , onOff );
 8006916:	78bb      	ldrb	r3, [r7, #2]
 8006918:	78f9      	ldrb	r1, [r7, #3]
 800691a:	2243      	movs	r2, #67	; 0x43
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ffab 	bl	8006878 <midi_control_change>
}
 8006922:	bf00      	nop
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <_usbmidi_port_tx_bytes>:
};

extern UART_HandleTypeDef huart2;


uint16_t _usbmidi_port_tx_bytes(uint8_t *data, uint16_t len){
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	807b      	strh	r3, [r7, #2]
	MIDI_DataTx(data, len);
 8006938:	887b      	ldrh	r3, [r7, #2]
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f002 fa83 	bl	8008e48 <MIDI_DataTx>
	HAL_Delay(0); // for some reason this is needed. Will investigate later.
 8006942:	2000      	movs	r0, #0
 8006944:	f7fa f8f4 	bl	8000b30 <HAL_Delay>
	// Maybe problem with time-stamping.
	//can also use a FIFO and send multiple packets at once.
	//This will also ensure time-stamp is same for all packets sent at once.

	return 0;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <_usbmidi_port_rx_bytes>:
uint16_t _usbmidi_port_rx_bytes(uint8_t *data, uint16_t len){
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	807b      	strh	r3, [r7, #2]
	MIDI_DataRx(data, len);
 800695e:	887b      	ldrh	r3, [r7, #2]
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f002 fa10 	bl	8008d88 <MIDI_DataRx>
	return 0;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <_uartmidi_port_tx_bytes>:


uint16_t _uartmidi_port_tx_bytes(uint8_t *data, uint16_t len){
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	460b      	mov	r3, r1
 800697e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, data, len, 100);
 8006980:	887a      	ldrh	r2, [r7, #2]
 8006982:	2364      	movs	r3, #100	; 0x64
 8006984:	6879      	ldr	r1, [r7, #4]
 8006986:	4804      	ldr	r0, [pc, #16]	; (8006998 <_uartmidi_port_tx_bytes+0x24>)
 8006988:	f7fd fbf4 	bl	8004174 <HAL_UART_Transmit>
	return 0;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20000510 	.word	0x20000510

0800699c <_uartmidi_port_rx_bytes>:
uint16_t _uartmidi_port_rx_bytes(uint8_t *data, uint16_t len){
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
	return 0;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <usbmidi_note_off>:
#include "usbmidi.h"




uint16_t usbmidi_note_off(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af02      	add	r7, sp, #8
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	4608      	mov	r0, r1
 80069c0:	4611      	mov	r1, r2
 80069c2:	461a      	mov	r2, r3
 80069c4:	4603      	mov	r3, r0
 80069c6:	70fb      	strb	r3, [r7, #3]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70bb      	strb	r3, [r7, #2]
 80069cc:	4613      	mov	r3, r2
 80069ce:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];

	midiData[0] = NOTE_OFF + channel;
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	3b80      	subs	r3, #128	; 0x80
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 80069d8:	78bb      	ldrb	r3, [r7, #2]
 80069da:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 80069dc:	787b      	ldrb	r3, [r7, #1]
 80069de:	73bb      	strb	r3, [r7, #14]

	usbmidi_tx(USBMIDI, USBMIDI->CN, CIN_NOTE_OFF, midiData, 3);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7a19      	ldrb	r1, [r3, #8]
 80069e4:	f107 030c 	add.w	r3, r7, #12
 80069e8:	2203      	movs	r2, #3
 80069ea:	9200      	str	r2, [sp, #0]
 80069ec:	2208      	movs	r2, #8
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f898 	bl	8006b24 <usbmidi_tx>

}
 80069f4:	bf00      	nop
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <usbmidi_note_on>:
uint16_t usbmidi_note_on(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel, uint8_t note, uint8_t velocity ){
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af02      	add	r7, sp, #8
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	4608      	mov	r0, r1
 8006a08:	4611      	mov	r1, r2
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	70fb      	strb	r3, [r7, #3]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70bb      	strb	r3, [r7, #2]
 8006a14:	4613      	mov	r3, r2
 8006a16:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];

	midiData[0] = NOTE_ON + channel;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	3b70      	subs	r3, #112	; 0x70
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	733b      	strb	r3, [r7, #12]
	midiData[1] = note;
 8006a20:	78bb      	ldrb	r3, [r7, #2]
 8006a22:	737b      	strb	r3, [r7, #13]
	midiData[2] = velocity;
 8006a24:	787b      	ldrb	r3, [r7, #1]
 8006a26:	73bb      	strb	r3, [r7, #14]

	usbmidi_tx(USBMIDI, USBMIDI->CN, CIN_NOTE_ON, midiData, 3);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	7a19      	ldrb	r1, [r3, #8]
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	2203      	movs	r2, #3
 8006a32:	9200      	str	r2, [sp, #0]
 8006a34:	2209      	movs	r2, #9
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f874 	bl	8006b24 <usbmidi_tx>
}
 8006a3c:	bf00      	nop
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <usbmidi_control_change>:
	midiData[2] = pressureValue;

	usbmidi_tx(USBMIDI, USBMIDI->CN, CIN_POLY_KEY_PRESS, midiData, 3);

}
uint16_t usbmidi_control_change(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel, MIDI_CONTROL_FUNCTION_t controllerNumber, uint8_t controllerValue){
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af02      	add	r7, sp, #8
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	461a      	mov	r2, r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	70fb      	strb	r3, [r7, #3]
 8006a58:	460b      	mov	r3, r1
 8006a5a:	70bb      	strb	r3, [r7, #2]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	707b      	strb	r3, [r7, #1]
	uint8_t midiData[3];
	midiData[0] = MODE_CHANGE + channel;
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	3b50      	subs	r3, #80	; 0x50
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	733b      	strb	r3, [r7, #12]
	midiData[1] = controllerNumber;
 8006a68:	78bb      	ldrb	r3, [r7, #2]
 8006a6a:	737b      	strb	r3, [r7, #13]
	midiData[2] = controllerValue;
 8006a6c:	787b      	ldrb	r3, [r7, #1]
 8006a6e:	73bb      	strb	r3, [r7, #14]

	usbmidi_tx(USBMIDI, USBMIDI->CN, CIN_CONTROL_CHANGE, midiData, 3);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7a19      	ldrb	r1, [r3, #8]
 8006a74:	f107 030c 	add.w	r3, r7, #12
 8006a78:	2203      	movs	r2, #3
 8006a7a:	9200      	str	r2, [sp, #0]
 8006a7c:	220b      	movs	r2, #11
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f850 	bl	8006b24 <usbmidi_tx>

}
 8006a84:	bf00      	nop
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <usbmidi_damperPedal>:
uint16_t usbmidi_control_generalPurpose_1(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t value_msb,uint8_t value_lsb){}
uint16_t usbmidi_control_generalPurpose_2(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t value_msb,uint8_t value_lsb){}
uint16_t usbmidi_control_generalPurpose_3(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t value_msb,uint8_t value_lsb){}
uint16_t usbmidi_control_generalPurpose_4(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t value_msb,uint8_t value_lsb){}

uint16_t usbmidi_damperPedal(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b082      	sub	sp, #8
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	460b      	mov	r3, r1
 8006a98:	70fb      	strb	r3, [r7, #3]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	70bb      	strb	r3, [r7, #2]
	usbmidi_control_change(USBMIDI, channel, SUSTAIN_ON_OFF , onOff );
 8006a9e:	78bb      	ldrb	r3, [r7, #2]
 8006aa0:	78f9      	ldrb	r1, [r7, #3]
 8006aa2:	2240      	movs	r2, #64	; 0x40
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff ffce 	bl	8006a46 <usbmidi_control_change>
}
 8006aaa:	bf00      	nop
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <usbmidi_sostenuto>:
uint16_t usbmidi_portamento(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
	usbmidi_control_change(USBMIDI, channel, PORTAMENTO_ON_OFF , onOff );
}
uint16_t usbmidi_sostenuto(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	70bb      	strb	r3, [r7, #2]
	usbmidi_control_change(USBMIDI, channel, SOSTUNUTO_ON_OFF , onOff );
 8006ac4:	78bb      	ldrb	r3, [r7, #2]
 8006ac6:	78f9      	ldrb	r1, [r7, #3]
 8006ac8:	2242      	movs	r2, #66	; 0x42
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff ffbb 	bl	8006a46 <usbmidi_control_change>
}
 8006ad0:	bf00      	nop
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <usbmidi_softPedal>:
uint16_t usbmidi_softPedal(USBMIDI_t *USBMIDI, MIDI_CHANNEL_t channel,uint8_t onOff){
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	70bb      	strb	r3, [r7, #2]
	usbmidi_control_change(USBMIDI, channel, SOFT_PEDAL_ON_OFF , onOff );
 8006aea:	78bb      	ldrb	r3, [r7, #2]
 8006aec:	78f9      	ldrb	r1, [r7, #3]
 8006aee:	2243      	movs	r2, #67	; 0x43
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ffa8 	bl	8006a46 <usbmidi_control_change>
}
 8006af6:	bf00      	nop
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <usbmidi_tx_bytes>:
/*-----------------------------------------------------------------------------*/




uint16_t usbmidi_tx_bytes(USBMIDI_t *USBMIDI,uint8_t *data, uint16_t len ){
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
	return USBMIDI->tx_bytes(data,len);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	4611      	mov	r1, r2
 8006b16:	68b8      	ldr	r0, [r7, #8]
 8006b18:	4798      	blx	r3
 8006b1a:	4603      	mov	r3, r0


}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <usbmidi_tx>:
uint16_t usbmidi_rx_bytes(USBMIDI_t *USBMIDI,uint8_t *data, uint16_t len ){
	return USBMIDI->rx_bytes(data,len);
}

uint16_t usbmidi_tx(USBMIDI_t *USBMIDI, uint8_t CN, USBMIDI_CIN_t CIN, uint8_t *midiData, uint16_t len){
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	460b      	mov	r3, r1
 8006b30:	72fb      	strb	r3, [r7, #11]
 8006b32:	4613      	mov	r3, r2
 8006b34:	72bb      	strb	r3, [r7, #10]
	uint8_t data[4];

	data[0] = (CN << 4 | CIN);
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	b25a      	sxtb	r2, r3
 8006b3c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	b25b      	sxtb	r3, r3
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	753b      	strb	r3, [r7, #20]

	switch (CIN){
 8006b48:	7abb      	ldrb	r3, [r7, #10]
 8006b4a:	2b0f      	cmp	r3, #15
 8006b4c:	f200 810a 	bhi.w	8006d64 <usbmidi_tx+0x240>
 8006b50:	a201      	add	r2, pc, #4	; (adr r2, 8006b58 <usbmidi_tx+0x34>)
 8006b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b56:	bf00      	nop
 8006b58:	08006d65 	.word	0x08006d65
 8006b5c:	08006d65 	.word	0x08006d65
 8006b60:	08006b99 	.word	0x08006b99
 8006b64:	08006bb9 	.word	0x08006bb9
 8006b68:	08006bdb 	.word	0x08006bdb
 8006b6c:	08006bfd 	.word	0x08006bfd
 8006b70:	08006c1b 	.word	0x08006c1b
 8006b74:	08006c3b 	.word	0x08006c3b
 8006b78:	08006c5d 	.word	0x08006c5d
 8006b7c:	08006c7f 	.word	0x08006c7f
 8006b80:	08006ca1 	.word	0x08006ca1
 8006b84:	08006cc3 	.word	0x08006cc3
 8006b88:	08006ce5 	.word	0x08006ce5
 8006b8c:	08006d05 	.word	0x08006d05
 8006b90:	08006d25 	.word	0x08006d25
 8006b94:	08006d47 	.word	0x08006d47
	case	CIN_MISC_FUNC_CODES: break;
	case	CIN_CABLE_EVENTS: break;
	case	CIN_TWO_BYTE_SYS_COMMON_MSG:
		data[1] = midiData[0];
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	785b      	ldrb	r3, [r3, #1]
 8006ba2:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006ba8:	f107 0314 	add.w	r3, r7, #20
 8006bac:	2204      	movs	r2, #4
 8006bae:	4619      	mov	r1, r3
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f7ff ffa5 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006bb6:	e0d6      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_THREE_BYTE_SYS_COMMON_MSG:
		data[1] = midiData[0];
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	789b      	ldrb	r3, [r3, #2]
 8006bc8:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006bca:	f107 0314 	add.w	r3, r7, #20
 8006bce:	2204      	movs	r2, #4
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff ff94 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006bd8:	e0c5      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_SYSEX_STARTS_OR_CONT:
		data[1] = midiData[0];
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	789b      	ldrb	r3, [r3, #2]
 8006bea:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff ff83 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006bfa:	e0b4      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_SINGLE_BYTE_SYS_COMMON_MSG:
		data[1] = midiData[0];
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	757b      	strb	r3, [r7, #21]
		data[2] = 0x00;
 8006c02:	2300      	movs	r3, #0
 8006c04:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006c06:	2300      	movs	r3, #0
 8006c08:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006c0a:	f107 0314 	add.w	r3, r7, #20
 8006c0e:	2204      	movs	r2, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f7ff ff74 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006c18:	e0a5      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_SYSEX_ENDS_FOLLOWING_TWO_BYTES:
		data[1] = midiData[0];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006c2a:	f107 0314 	add.w	r3, r7, #20
 8006c2e:	2204      	movs	r2, #4
 8006c30:	4619      	mov	r1, r3
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff ff64 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006c38:	e095      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_SYSEX_ENDS_FOLLOWING_THREE_BYTES:
		data[1] = midiData[0];
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	789b      	ldrb	r3, [r3, #2]
 8006c4a:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006c4c:	f107 0314 	add.w	r3, r7, #20
 8006c50:	2204      	movs	r2, #4
 8006c52:	4619      	mov	r1, r3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f7ff ff53 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006c5a:	e084      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_NOTE_OFF:
		data[1] = midiData[0];
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	785b      	ldrb	r3, [r3, #1]
 8006c66:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	789b      	ldrb	r3, [r3, #2]
 8006c6c:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006c6e:	f107 0314 	add.w	r3, r7, #20
 8006c72:	2204      	movs	r2, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f7ff ff42 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006c7c:	e073      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_NOTE_ON:
		data[1] = midiData[0];
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	785b      	ldrb	r3, [r3, #1]
 8006c88:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	789b      	ldrb	r3, [r3, #2]
 8006c8e:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006c90:	f107 0314 	add.w	r3, r7, #20
 8006c94:	2204      	movs	r2, #4
 8006c96:	4619      	mov	r1, r3
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff ff31 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006c9e:	e062      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_POLY_KEY_PRESS:
		data[1] = midiData[0];
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	785b      	ldrb	r3, [r3, #1]
 8006caa:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	789b      	ldrb	r3, [r3, #2]
 8006cb0:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006cb2:	f107 0314 	add.w	r3, r7, #20
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff ff20 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006cc0:	e051      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_CONTROL_CHANGE:
		data[1] = midiData[0];
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	789b      	ldrb	r3, [r3, #2]
 8006cd2:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006cd4:	f107 0314 	add.w	r3, r7, #20
 8006cd8:	2204      	movs	r2, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff ff0f 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006ce2:	e040      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_PROGRAM_CHANGE:
		data[1] = midiData[0];
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	785b      	ldrb	r3, [r3, #1]
 8006cee:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006cf4:	f107 0314 	add.w	r3, r7, #20
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff feff 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006d02:	e030      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_CHANNEL_PRESSURE:
		data[1] = midiData[0];
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006d10:	2300      	movs	r3, #0
 8006d12:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006d14:	f107 0314 	add.w	r3, r7, #20
 8006d18:	2204      	movs	r2, #4
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff feef 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006d22:	e020      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_PITCHBEND_CHANGE:
		data[1] = midiData[0];
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	757b      	strb	r3, [r7, #21]
		data[2] = midiData[1];
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	75bb      	strb	r3, [r7, #22]
		data[3] = midiData[2];
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	789b      	ldrb	r3, [r3, #2]
 8006d34:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f7ff fede 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006d44:	e00f      	b.n	8006d66 <usbmidi_tx+0x242>
	case	CIN_SINGLE_BYTE:
		data[1] = midiData[0];
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	757b      	strb	r3, [r7, #21]
		data[2] = 0x00;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	75bb      	strb	r3, [r7, #22]
		data[3] = 0x00;
 8006d50:	2300      	movs	r3, #0
 8006d52:	75fb      	strb	r3, [r7, #23]
		usbmidi_tx_bytes(USBMIDI,data, 4 );
 8006d54:	f107 0314 	add.w	r3, r7, #20
 8006d58:	2204      	movs	r2, #4
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f7ff fecf 	bl	8006b00 <usbmidi_tx_bytes>
		break;
 8006d62:	e000      	b.n	8006d66 <usbmidi_tx+0x242>
	default: break;
 8006d64:	bf00      	nop

	}

}
 8006d66:	bf00      	nop
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8006d7c:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8006d80:	f002 fcb8 	bl	80096f4 <USBD_static_malloc>
 8006d84:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <USBD_AUDIO_Init+0x28>
  {
    pdev->pClassData = NULL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d94:	2302      	movs	r3, #2
 8006d96:	e04b      	b.n	8006e30 <USBD_AUDIO_Init+0xc0>
  }

  pdev->pClassData = (void *)haudio;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	7c1b      	ldrb	r3, [r3, #16]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <USBD_AUDIO_Init+0x42>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8006db0:	e003      	b.n	8006dba <USBD_AUDIO_Init+0x4a>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8006dba:	2358      	movs	r3, #88	; 0x58
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f002 fa83 	bl	80092cc <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dda:	2203      	movs	r2, #3
 8006ddc:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
  haudio->wr_ptr = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88
  haudio->rd_ptr = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8a3 2b86 	strh.w	r2, [r3, #2950]	; 0xb86
  haudio->rd_enable = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2146      	movs	r1, #70	; 0x46
 8006e10:	f245 6054 	movw	r0, #22100	; 0x5654
 8006e14:	4798      	blx	r3
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <USBD_AUDIO_Init+0xb0>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e007      	b.n	8006e30 <USBD_AUDIO_Init+0xc0>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	2358      	movs	r3, #88	; 0x58
 8006e26:	2101      	movs	r1, #1
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f002 fbc9 	bl	80095c0 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 8006e44:	2101      	movs	r1, #1
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 fa7e 	bl	8009348 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00f      	beq.n	8006e86 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2000      	movs	r0, #0
 8006e70:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f002 fc49 	bl	8009710 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea8:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <USBD_AUDIO_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e0b0      	b.n	8007016 <USBD_AUDIO_Setup+0x186>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d01a      	beq.n	8006ef6 <USBD_AUDIO_Setup+0x66>
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	f040 80a0 	bne.w	8007006 <USBD_AUDIO_Setup+0x176>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d006      	beq.n	8006edc <USBD_AUDIO_Setup+0x4c>
 8006ece:	2b81      	cmp	r3, #129	; 0x81
 8006ed0:	d109      	bne.n	8006ee6 <USBD_AUDIO_Setup+0x56>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 8006ed2:	6839      	ldr	r1, [r7, #0]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f9ac 	bl	8007232 <AUDIO_REQ_GetCurrent>
          break;
 8006eda:	e00b      	b.n	8006ef4 <USBD_AUDIO_Setup+0x64>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f9cb 	bl	800727a <AUDIO_REQ_SetCurrent>
          break;
 8006ee4:	e006      	b.n	8006ef4 <USBD_AUDIO_Setup+0x64>

        default:
          USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 fbd7 	bl	800869c <USBD_CtlError>
          ret = USBD_FAIL;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ef2:	bf00      	nop
      }
      break;
 8006ef4:	e08e      	b.n	8007014 <USBD_AUDIO_Setup+0x184>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	2b0b      	cmp	r3, #11
 8006efc:	d878      	bhi.n	8006ff0 <USBD_AUDIO_Setup+0x160>
 8006efe:	a201      	add	r2, pc, #4	; (adr r2, 8006f04 <USBD_AUDIO_Setup+0x74>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f35 	.word	0x08006f35
 8006f08:	08006fff 	.word	0x08006fff
 8006f0c:	08006ff1 	.word	0x08006ff1
 8006f10:	08006ff1 	.word	0x08006ff1
 8006f14:	08006ff1 	.word	0x08006ff1
 8006f18:	08006ff1 	.word	0x08006ff1
 8006f1c:	08006f5f 	.word	0x08006f5f
 8006f20:	08006ff1 	.word	0x08006ff1
 8006f24:	08006ff1 	.word	0x08006ff1
 8006f28:	08006ff1 	.word	0x08006ff1
 8006f2c:	08006f89 	.word	0x08006f89
 8006f30:	08006fb1 	.word	0x08006fb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b03      	cmp	r3, #3
 8006f3e:	d107      	bne.n	8006f50 <USBD_AUDIO_Setup+0xc0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	2202      	movs	r2, #2
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fc18 	bl	800877e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f4e:	e059      	b.n	8007004 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 fba2 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f5c:	e052      	b.n	8007004 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b21      	cmp	r3, #33	; 0x21
 8006f68:	d14b      	bne.n	8007002 <USBD_AUDIO_Setup+0x172>
          {
            pbuf = USBD_AUDIO_CfgDesc + 18;
 8006f6a:	4b2d      	ldr	r3, [pc, #180]	; (8007020 <USBD_AUDIO_Setup+0x190>)
 8006f6c:	60fb      	str	r3, [r7, #12]
            len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	88db      	ldrh	r3, [r3, #6]
 8006f72:	2b09      	cmp	r3, #9
 8006f74:	bf28      	it	cs
 8006f76:	2309      	movcs	r3, #9
 8006f78:	817b      	strh	r3, [r7, #10]

            (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f7a:	897b      	ldrh	r3, [r7, #10]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f001 fbfc 	bl	800877e <USBD_CtlSendData>
          }
          break;
 8006f86:	e03c      	b.n	8007002 <USBD_AUDIO_Setup+0x172>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d106      	bne.n	8006fa2 <USBD_AUDIO_Setup+0x112>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	2201      	movs	r2, #1
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 fbef 	bl	800877e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fa0:	e030      	b.n	8007004 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 fb79 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 8006faa:	2303      	movs	r3, #3
 8006fac:	75fb      	strb	r3, [r7, #23]
          break;
 8006fae:	e029      	b.n	8007004 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b03      	cmp	r3, #3
 8006fba:	d112      	bne.n	8006fe2 <USBD_AUDIO_Setup+0x152>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	885b      	ldrh	r3, [r3, #2]
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d806      	bhi.n	8006fd4 <USBD_AUDIO_Setup+0x144>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	885b      	ldrh	r3, [r3, #2]
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd2:	e017      	b.n	8007004 <USBD_AUDIO_Setup+0x174>
              USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f001 fb60 	bl	800869c <USBD_CtlError>
              ret = USBD_FAIL;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe0:	e010      	b.n	8007004 <USBD_AUDIO_Setup+0x174>
            USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fb59 	bl	800869c <USBD_CtlError>
            ret = USBD_FAIL;
 8006fea:	2303      	movs	r3, #3
 8006fec:	75fb      	strb	r3, [r7, #23]
          break;
 8006fee:	e009      	b.n	8007004 <USBD_AUDIO_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fb52 	bl	800869c <USBD_CtlError>
          ret = USBD_FAIL;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	75fb      	strb	r3, [r7, #23]
          break;
 8006ffc:	e002      	b.n	8007004 <USBD_AUDIO_Setup+0x174>
          break;
 8006ffe:	bf00      	nop
 8007000:	e008      	b.n	8007014 <USBD_AUDIO_Setup+0x184>
          break;
 8007002:	bf00      	nop
      }
      break;
 8007004:	e006      	b.n	8007014 <USBD_AUDIO_Setup+0x184>
    default:
      USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 fb47 	bl	800869c <USBD_CtlError>
      ret = USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	75fb      	strb	r3, [r7, #23]
      break;
 8007012:	bf00      	nop
  }

  return (uint8_t)ret;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000356 	.word	0x20000356

08007024 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	226d      	movs	r2, #109	; 0x6d
 8007030:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	20000344 	.word	0x20000344

08007044 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b084      	sub	sp, #16
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800706c:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <USBD_AUDIO_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	e025      	b.n	80070c4 <USBD_AUDIO_EP0_RxReady+0x66>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800707e:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	; 0xb8a
 8007082:	2b01      	cmp	r3, #1
 8007084:	d11d      	bne.n	80070c2 <USBD_AUDIO_EP0_RxReady+0x64>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708c:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	; 0xbcc
 8007090:	2b02      	cmp	r3, #2
 8007092:	d116      	bne.n	80070c2 <USBD_AUDIO_EP0_RxReady+0x64>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070a2:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	; 0xb8b
 80070a6:	4610      	mov	r0, r2
 80070a8:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
      haudio->control.len = 0U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    }
  }

  return (uint8_t)USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	460b      	mov	r3, r1
 800711c:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713e:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <USBD_AUDIO_DataOut+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007146:	2303      	movs	r3, #3
 8007148:	e06f      	b.n	800722a <USBD_AUDIO_DataOut+0xfe>
  }

  if (epnum == AUDIO_OUT_EP)
 800714a:	78fb      	ldrb	r3, [r7, #3]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d16b      	bne.n	8007228 <USBD_AUDIO_DataOut+0xfc>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f002 fa6b 	bl	8009630 <USBD_LL_GetRxDataSize>
 800715a:	4603      	mov	r3, r0
 800715c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800716c:	f8b2 2b88 	ldrh.w	r2, [r2, #2952]	; 0xb88
 8007170:	4611      	mov	r1, r2
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	440a      	add	r2, r1
 8007176:	1d10      	adds	r0, r2, #4
 8007178:	8979      	ldrh	r1, [r7, #10]
 800717a:	2201      	movs	r2, #1
 800717c:	4798      	blx	r3
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007184:	f8b3 2b88 	ldrh.w	r2, [r3, #2952]	; 0xb88
 8007188:	897b      	ldrh	r3, [r7, #10]
 800718a:	4413      	add	r3, r2
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007194:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800719e:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 80071a2:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 80071a6:	d11c      	bne.n	80071e2 <USBD_AUDIO_DataOut+0xb6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071ba:	f893 3b84 	ldrb.w	r3, [r3, #2948]	; 0xb84
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d10f      	bne.n	80071e2 <USBD_AUDIO_DataOut+0xb6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	1d10      	adds	r0, r2, #4
 80071ce:	2201      	movs	r2, #1
 80071d0:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 80071d4:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071e8:	f893 3b85 	ldrb.w	r3, [r3, #2949]	; 0xb85
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10d      	bne.n	800720c <USBD_AUDIO_DataOut+0xe0>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f6:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 80071fa:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 80071fe:	d105      	bne.n	800720c <USBD_AUDIO_DataOut+0xe0>
      {
        haudio->rd_enable = 1U;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007212:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 8007216:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	1d1a      	adds	r2, r3, #4
 800721e:	2358      	movs	r3, #88	; 0x58
 8007220:	2101      	movs	r1, #1
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f002 f9cc 	bl	80095c0 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007242:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d013      	beq.n	8007272 <AUDIO_REQ_GetCurrent+0x40>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, 64U);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8007250:	330b      	adds	r3, #11
 8007252:	2240      	movs	r2, #64	; 0x40
 8007254:	2100      	movs	r1, #0
 8007256:	4618      	mov	r0, r3
 8007258:	f002 fa8e 	bl	8009778 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8007262:	330b      	adds	r3, #11
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	88d2      	ldrh	r2, [r2, #6]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f001 fa87 	bl	800877e <USBD_CtlSendData>
 8007270:	e000      	b.n	8007274 <AUDIO_REQ_GetCurrent+0x42>
    return;
 8007272:	bf00      	nop
}
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800728a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d026      	beq.n	80072e0 <AUDIO_REQ_SetCurrent+0x66>
  {
    return;
  }

  if (req->wLength != 0U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	88db      	ldrh	r3, [r3, #6]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d023      	beq.n	80072e2 <AUDIO_REQ_SetCurrent+0x68>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80072a0:	330b      	adds	r3, #11
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	88d2      	ldrh	r2, [r2, #6]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 fa94 	bl	80087d6 <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	88db      	ldrh	r3, [r3, #6]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c6:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	889b      	ldrh	r3, [r3, #4]
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072da:	f883 2bcc 	strb.w	r2, [r3, #3020]	; 0xbcc
 80072de:	e000      	b.n	80072e2 <AUDIO_REQ_SetCurrent+0x68>
    return;
 80072e0:	bf00      	nop
  }
}
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	220a      	movs	r2, #10
 80072f4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 80072f6:	4b03      	ldr	r3, [pc, #12]	; (8007304 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	200003b4 	.word	0x200003b4

08007308 <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	e004      	b.n	8007326 <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	370c      	adds	r7, #12
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8007340:	4a0c      	ldr	r2, [pc, #48]	; (8007374 <USBD_MIDI_Init+0x40>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 8007346:	2340      	movs	r3, #64	; 0x40
 8007348:	2202      	movs	r2, #2
 800734a:	2181      	movs	r1, #129	; 0x81
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 ffbd 	bl	80092cc <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8007352:	2340      	movs	r3, #64	; 0x40
 8007354:	2202      	movs	r2, #2
 8007356:	2101      	movs	r1, #1
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 ffb7 	bl	80092cc <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	4a05      	ldr	r2, [pc, #20]	; (8007378 <USBD_MIDI_Init+0x44>)
 8007362:	2101      	movs	r1, #1
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f002 f92b 	bl	80095c0 <USBD_LL_PrepareReceive>
  return 0;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000900 	.word	0x20000900
 8007378:	20000914 	.word	0x20000914

0800737c <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 8007388:	4b07      	ldr	r3, [pc, #28]	; (80073a8 <USBD_MIDI_DeInit+0x2c>)
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 800738e:	2181      	movs	r1, #129	; 0x81
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 ffd9 	bl	8009348 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 8007396:	2101      	movs	r1, #1
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 ffd5 	bl	8009348 <USBD_LL_CloseEP>
  return 0;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000900 	.word	0x20000900

080073ac <USBD_MIDI_DataIn>:

static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <USBD_MIDI_DataIn+0x28>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d102      	bne.n	80073c6 <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 80073c0:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <USBD_MIDI_DataIn+0x28>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
  }
  return USBD_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	20000910 	.word	0x20000910

080073d8 <USBD_MIDI_DataOut>:

static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073ea:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	440b      	add	r3, r1
 80073fe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	897a      	ldrh	r2, [r7, #10]
 800740c:	4611      	mov	r1, r2
 800740e:	4806      	ldr	r0, [pc, #24]	; (8007428 <USBD_MIDI_DataOut+0x50>)
 8007410:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	4a04      	ldr	r2, [pc, #16]	; (8007428 <USBD_MIDI_DataOut+0x50>)
 8007416:	2101      	movs	r1, #1
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f002 f8d1 	bl	80095c0 <USBD_LL_PrepareReceive>
  return USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	20000914 	.word	0x20000914

0800742c <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 8007432:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <USBD_MIDI_SendPacket+0xc8>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d059      	beq.n	80074ee <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 800743a:	4b2f      	ldr	r3, [pc, #188]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007442:	d102      	bne.n	800744a <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 8007444:	4b2c      	ldr	r3, [pc, #176]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 800744a:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	4b2b      	ldr	r3, [pc, #172]	; (80074fc <USBD_MIDI_SendPacket+0xd0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	429a      	cmp	r2, r3
 8007454:	d103      	bne.n	800745e <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 8007456:	4b27      	ldr	r3, [pc, #156]	; (80074f4 <USBD_MIDI_SendPacket+0xc8>)
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
      return;
 800745c:	e047      	b.n	80074ee <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 800745e:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	4b26      	ldr	r3, [pc, #152]	; (80074fc <USBD_MIDI_SendPacket+0xd0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d906      	bls.n	8007478 <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 800746a:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007472:	4a23      	ldr	r2, [pc, #140]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	e006      	b.n	8007486 <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8007478:	4b20      	ldr	r3, [pc, #128]	; (80074fc <USBD_MIDI_SendPacket+0xd0>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	4a1f      	ldr	r2, [pc, #124]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 8007484:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 8007486:	4b1e      	ldr	r3, [pc, #120]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2b40      	cmp	r3, #64	; 0x40
 800748c:	d90f      	bls.n	80074ae <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 800748e:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8007498:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3340      	adds	r3, #64	; 0x40
 800749e:	4a16      	ldr	r2, [pc, #88]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 80074a0:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 80074a2:	4b17      	ldr	r3, [pc, #92]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3b40      	subs	r3, #64	; 0x40
 80074a8:	4a15      	ldr	r2, [pc, #84]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	e00f      	b.n	80074ce <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 80074ae:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 80074b4:	4b12      	ldr	r3, [pc, #72]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 80074ba:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	4b10      	ldr	r3, [pc, #64]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4413      	add	r3, r2
 80074c4:	4a0c      	ldr	r2, [pc, #48]	; (80074f8 <USBD_MIDI_SendPacket+0xcc>)
 80074c6:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 80074c8:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <USBD_MIDI_SendPacket+0xd4>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 80074ce:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <USBD_MIDI_SendPacket+0xc8>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 80074d4:	bf00      	nop
 80074d6:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <USBD_MIDI_SendPacket+0xd8>)
 80074d8:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 80074da:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 80074dc:	4a0a      	ldr	r2, [pc, #40]	; (8007508 <USBD_MIDI_SendPacket+0xdc>)
 80074de:	441a      	add	r2, r3
 80074e0:	88bb      	ldrh	r3, [r7, #4]
 80074e2:	2181      	movs	r1, #129	; 0x81
 80074e4:	f002 f834 	bl	8009550 <USBD_LL_Transmit>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f3      	bne.n	80074d6 <USBD_MIDI_SendPacket+0xaa>
  }
}
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000910 	.word	0x20000910
 80074f8:	20000908 	.word	0x20000908
 80074fc:	20000904 	.word	0x20000904
 8007500:	2000090c 	.word	0x2000090c
 8007504:	20000900 	.word	0x20000900
 8007508:	20000954 	.word	0x20000954

0800750c <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2265      	movs	r2, #101	; 0x65
 8007518:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 800751a:	4b03      	ldr	r3, [pc, #12]	; (8007528 <USBD_MIDI_GetCfgDesc+0x1c>)
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	200003f8 	.word	0x200003f8

0800752c <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 8007536:	2303      	movs	r3, #3
 8007538:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	683a      	ldr	r2, [r7, #0]
 8007544:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	60f8      	str	r0, [r7, #12]
 8007562:	60b9      	str	r1, [r7, #8]
 8007564:	4613      	mov	r3, r2
 8007566:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800756e:	2303      	movs	r3, #3
 8007570:	e01f      	b.n	80075b2 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	79fa      	ldrb	r2, [r7, #7]
 80075a4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f001 fe12 	bl	80091d0 <USBD_LL_Init>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

  return ret;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e016      	b.n	8007600 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	f107 020e 	add.w	r2, r7, #14
 80075f2:	4610      	mov	r0, r2
 80075f4:	4798      	blx	r3
 80075f6:	4602      	mov	r2, r0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fe29 	bl	8009268 <USBD_LL_Start>
 8007616:	4603      	mov	r3, r0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007642:	2303      	movs	r3, #3
 8007644:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	78fa      	ldrb	r2, [r7, #3]
 800765a:	4611      	mov	r1, r2
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	4798      	blx	r3
 8007660:	4603      	mov	r3, r0
 8007662:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d007      	beq.n	8007694 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	78fa      	ldrb	r2, [r7, #3]
 800768e:	4611      	mov	r1, r2
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
  }

  return USBD_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 ffb9 	bl	8008628 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076d2:	f003 031f 	and.w	r3, r3, #31
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d01a      	beq.n	8007710 <USBD_LL_SetupStage+0x72>
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d822      	bhi.n	8007724 <USBD_LL_SetupStage+0x86>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <USBD_LL_SetupStage+0x4a>
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d00a      	beq.n	80076fc <USBD_LL_SetupStage+0x5e>
 80076e6:	e01d      	b.n	8007724 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fa61 	bl	8007bb8 <USBD_StdDevReq>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
      break;
 80076fa:	e020      	b.n	800773e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fac5 	bl	8007c94 <USBD_StdItfReq>
 800770a:	4603      	mov	r3, r0
 800770c:	73fb      	strb	r3, [r7, #15]
      break;
 800770e:	e016      	b.n	800773e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb04 	bl	8007d26 <USBD_StdEPReq>
 800771e:	4603      	mov	r3, r0
 8007720:	73fb      	strb	r3, [r7, #15]
      break;
 8007722:	e00c      	b.n	800773e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800772a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800772e:	b2db      	uxtb	r3, r3
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fe3e 	bl	80093b4 <USBD_LL_StallEP>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
      break;
 800773c:	bf00      	nop
  }

  return ret;
 800773e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	460b      	mov	r3, r1
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d138      	bne.n	80077ce <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007762:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800776a:	2b03      	cmp	r3, #3
 800776c:	d14a      	bne.n	8007804 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	429a      	cmp	r2, r3
 8007778:	d913      	bls.n	80077a2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	4293      	cmp	r3, r2
 8007792:	bf28      	it	cs
 8007794:	4613      	movcs	r3, r2
 8007796:	461a      	mov	r2, r3
 8007798:	6879      	ldr	r1, [r7, #4]
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f001 f838 	bl	8008810 <USBD_CtlContinueRx>
 80077a0:	e030      	b.n	8007804 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b03      	cmp	r3, #3
 80077ac:	d10b      	bne.n	80077c6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f001 f833 	bl	8008832 <USBD_CtlSendStatus>
 80077cc:	e01a      	b.n	8007804 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d114      	bne.n	8007804 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00e      	beq.n	8007804 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	7afa      	ldrb	r2, [r7, #11]
 80077f0:	4611      	mov	r1, r2
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	4798      	blx	r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	e000      	b.n	8007806 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	460b      	mov	r3, r1
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d16b      	bne.n	80078fa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3314      	adds	r3, #20
 8007826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800782e:	2b02      	cmp	r3, #2
 8007830:	d156      	bne.n	80078e0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	429a      	cmp	r2, r3
 800783c:	d914      	bls.n	8007868 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	461a      	mov	r2, r3
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f000 ffad 	bl	80087b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800785a:	2300      	movs	r3, #0
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f001 fead 	bl	80095c0 <USBD_LL_PrepareReceive>
 8007866:	e03b      	b.n	80078e0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	429a      	cmp	r2, r3
 8007872:	d11c      	bne.n	80078ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800787c:	429a      	cmp	r2, r3
 800787e:	d316      	bcc.n	80078ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800788a:	429a      	cmp	r2, r3
 800788c:	d20f      	bcs.n	80078ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 ff8e 	bl	80087b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a0:	2300      	movs	r3, #0
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f001 fe8a 	bl	80095c0 <USBD_LL_PrepareReceive>
 80078ac:	e018      	b.n	80078e0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d10b      	bne.n	80078d2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d2:	2180      	movs	r1, #128	; 0x80
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 fd6d 	bl	80093b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 ffbc 	bl	8008858 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d122      	bne.n	8007930 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fe98 	bl	8007620 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078f8:	e01a      	b.n	8007930 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b03      	cmp	r3, #3
 8007904:	d114      	bne.n	8007930 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00e      	beq.n	8007930 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	7afa      	ldrb	r2, [r7, #11]
 800791c:	4611      	mov	r1, r2
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	4798      	blx	r3
 8007922:	4603      	mov	r3, r0
 8007924:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	e000      	b.n	8007932 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3718      	adds	r7, #24
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b082      	sub	sp, #8
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2201      	movs	r2, #1
 8007946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	e02f      	b.n	80079ce <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00f      	beq.n	8007998 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d009      	beq.n	8007998 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	6852      	ldr	r2, [r2, #4]
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	4611      	mov	r1, r2
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	2200      	movs	r2, #0
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fc94 	bl	80092cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2240      	movs	r2, #64	; 0x40
 80079b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	2200      	movs	r2, #0
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fc86 	bl	80092cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2240      	movs	r2, #64	; 0x40
 80079ca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b083      	sub	sp, #12
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	78fa      	ldrb	r2, [r7, #3]
 80079e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2204      	movs	r2, #4
 8007a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d106      	bne.n	8007a44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d101      	bne.n	8007a68 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e012      	b.n	8007a8e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d10b      	bne.n	8007a8c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d101      	bne.n	8007ab0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e014      	b.n	8007ada <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d10d      	bne.n	8007ad8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	78fa      	ldrb	r2, [r7, #3]
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e014      	b.n	8007b26 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d10d      	bne.n	8007b24 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d007      	beq.n	8007b24 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	78fa      	ldrb	r2, [r7, #3]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d009      	beq.n	8007b72 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6852      	ldr	r2, [r2, #4]
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	4798      	blx	r3
  }

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	3301      	adds	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007b9a:	8a3b      	ldrh	r3, [r7, #16]
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	b21a      	sxth	r2, r3
 8007ba0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	b21b      	sxth	r3, r3
 8007ba8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007baa:	89fb      	ldrh	r3, [r7, #14]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d005      	beq.n	8007bde <USBD_StdDevReq+0x26>
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	d853      	bhi.n	8007c7e <USBD_StdDevReq+0xc6>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <USBD_StdDevReq+0x3a>
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d14f      	bne.n	8007c7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]
      break;
 8007bf0:	e04a      	b.n	8007c88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	785b      	ldrb	r3, [r3, #1]
 8007bf6:	2b09      	cmp	r3, #9
 8007bf8:	d83b      	bhi.n	8007c72 <USBD_StdDevReq+0xba>
 8007bfa:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <USBD_StdDevReq+0x48>)
 8007bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c00:	08007c55 	.word	0x08007c55
 8007c04:	08007c69 	.word	0x08007c69
 8007c08:	08007c73 	.word	0x08007c73
 8007c0c:	08007c5f 	.word	0x08007c5f
 8007c10:	08007c73 	.word	0x08007c73
 8007c14:	08007c33 	.word	0x08007c33
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c73 	.word	0x08007c73
 8007c20:	08007c4b 	.word	0x08007c4b
 8007c24:	08007c3d 	.word	0x08007c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007c28:	6839      	ldr	r1, [r7, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9de 	bl	8007fec <USBD_GetDescriptor>
          break;
 8007c30:	e024      	b.n	8007c7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fb6d 	bl	8008314 <USBD_SetAddress>
          break;
 8007c3a:	e01f      	b.n	8007c7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fbac 	bl	800839c <USBD_SetConfig>
 8007c44:	4603      	mov	r3, r0
 8007c46:	73fb      	strb	r3, [r7, #15]
          break;
 8007c48:	e018      	b.n	8007c7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fc4b 	bl	80084e8 <USBD_GetConfig>
          break;
 8007c52:	e013      	b.n	8007c7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fc7c 	bl	8008554 <USBD_GetStatus>
          break;
 8007c5c:	e00e      	b.n	8007c7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fcab 	bl	80085bc <USBD_SetFeature>
          break;
 8007c66:	e009      	b.n	8007c7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fcba 	bl	80085e4 <USBD_ClrFeature>
          break;
 8007c70:	e004      	b.n	8007c7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007c72:	6839      	ldr	r1, [r7, #0]
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fd11 	bl	800869c <USBD_CtlError>
          break;
 8007c7a:	bf00      	nop
      }
      break;
 8007c7c:	e004      	b.n	8007c88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fd0b 	bl	800869c <USBD_CtlError>
      break;
 8007c86:	bf00      	nop
  }

  return ret;
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop

08007c94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007caa:	2b40      	cmp	r3, #64	; 0x40
 8007cac:	d005      	beq.n	8007cba <USBD_StdItfReq+0x26>
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d82f      	bhi.n	8007d12 <USBD_StdItfReq+0x7e>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <USBD_StdItfReq+0x26>
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d12b      	bne.n	8007d12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d81d      	bhi.n	8007d04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	889b      	ldrh	r3, [r3, #4]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d813      	bhi.n	8007cfa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	6839      	ldr	r1, [r7, #0]
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	88db      	ldrh	r3, [r3, #6]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d110      	bne.n	8007d0e <USBD_StdItfReq+0x7a>
 8007cec:	7bfb      	ldrb	r3, [r7, #15]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10d      	bne.n	8007d0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fd9d 	bl	8008832 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007cf8:	e009      	b.n	8007d0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fccd 	bl	800869c <USBD_CtlError>
          break;
 8007d02:	e004      	b.n	8007d0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 fcc8 	bl	800869c <USBD_CtlError>
          break;
 8007d0c:	e000      	b.n	8007d10 <USBD_StdItfReq+0x7c>
          break;
 8007d0e:	bf00      	nop
      }
      break;
 8007d10:	e004      	b.n	8007d1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fcc1 	bl	800869c <USBD_CtlError>
      break;
 8007d1a:	bf00      	nop
  }

  return ret;
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	889b      	ldrh	r3, [r3, #4]
 8007d38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d007      	beq.n	8007d56 <USBD_StdEPReq+0x30>
 8007d46:	2b40      	cmp	r3, #64	; 0x40
 8007d48:	f200 8145 	bhi.w	8007fd6 <USBD_StdEPReq+0x2b0>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00c      	beq.n	8007d6a <USBD_StdEPReq+0x44>
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	f040 8140 	bne.w	8007fd6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	6839      	ldr	r1, [r7, #0]
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]
      break;
 8007d68:	e13a      	b.n	8007fe0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	785b      	ldrb	r3, [r3, #1]
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	d007      	beq.n	8007d82 <USBD_StdEPReq+0x5c>
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	f300 8129 	bgt.w	8007fca <USBD_StdEPReq+0x2a4>
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d07f      	beq.n	8007e7c <USBD_StdEPReq+0x156>
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d03c      	beq.n	8007dfa <USBD_StdEPReq+0xd4>
 8007d80:	e123      	b.n	8007fca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d002      	beq.n	8007d94 <USBD_StdEPReq+0x6e>
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d016      	beq.n	8007dc0 <USBD_StdEPReq+0x9a>
 8007d92:	e02c      	b.n	8007dee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00d      	beq.n	8007db6 <USBD_StdEPReq+0x90>
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b80      	cmp	r3, #128	; 0x80
 8007d9e:	d00a      	beq.n	8007db6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	4619      	mov	r1, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f001 fb05 	bl	80093b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007daa:	2180      	movs	r1, #128	; 0x80
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 fb01 	bl	80093b4 <USBD_LL_StallEP>
 8007db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007db4:	e020      	b.n	8007df8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fc6f 	bl	800869c <USBD_CtlError>
              break;
 8007dbe:	e01b      	b.n	8007df8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10e      	bne.n	8007de6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <USBD_StdEPReq+0xc0>
 8007dce:	7bbb      	ldrb	r3, [r7, #14]
 8007dd0:	2b80      	cmp	r3, #128	; 0x80
 8007dd2:	d008      	beq.n	8007de6 <USBD_StdEPReq+0xc0>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	88db      	ldrh	r3, [r3, #6]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d104      	bne.n	8007de6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f001 fae7 	bl	80093b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fd23 	bl	8008832 <USBD_CtlSendStatus>

              break;
 8007dec:	e004      	b.n	8007df8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fc53 	bl	800869c <USBD_CtlError>
              break;
 8007df6:	bf00      	nop
          }
          break;
 8007df8:	e0ec      	b.n	8007fd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d002      	beq.n	8007e0c <USBD_StdEPReq+0xe6>
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d016      	beq.n	8007e38 <USBD_StdEPReq+0x112>
 8007e0a:	e030      	b.n	8007e6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00d      	beq.n	8007e2e <USBD_StdEPReq+0x108>
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	2b80      	cmp	r3, #128	; 0x80
 8007e16:	d00a      	beq.n	8007e2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fac9 	bl	80093b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e22:	2180      	movs	r1, #128	; 0x80
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f001 fac5 	bl	80093b4 <USBD_LL_StallEP>
 8007e2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e2c:	e025      	b.n	8007e7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fc33 	bl	800869c <USBD_CtlError>
              break;
 8007e36:	e020      	b.n	8007e7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	885b      	ldrh	r3, [r3, #2]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11b      	bne.n	8007e78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e40:	7bbb      	ldrb	r3, [r7, #14]
 8007e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fae6 	bl	8009420 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fcec 	bl	8008832 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	6839      	ldr	r1, [r7, #0]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007e6c:	e004      	b.n	8007e78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc13 	bl	800869c <USBD_CtlError>
              break;
 8007e76:	e000      	b.n	8007e7a <USBD_StdEPReq+0x154>
              break;
 8007e78:	bf00      	nop
          }
          break;
 8007e7a:	e0ab      	b.n	8007fd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d002      	beq.n	8007e8e <USBD_StdEPReq+0x168>
 8007e88:	2b03      	cmp	r3, #3
 8007e8a:	d032      	beq.n	8007ef2 <USBD_StdEPReq+0x1cc>
 8007e8c:	e097      	b.n	8007fbe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e8e:	7bbb      	ldrb	r3, [r7, #14]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <USBD_StdEPReq+0x17e>
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b80      	cmp	r3, #128	; 0x80
 8007e98:	d004      	beq.n	8007ea4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fbfd 	bl	800869c <USBD_CtlError>
                break;
 8007ea2:	e091      	b.n	8007fc8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ea4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	da0b      	bge.n	8007ec4 <USBD_StdEPReq+0x19e>
 8007eac:	7bbb      	ldrb	r3, [r7, #14]
 8007eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	3310      	adds	r3, #16
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	e00b      	b.n	8007edc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
 8007ec6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	4413      	add	r3, r2
 8007eda:	3304      	adds	r3, #4
 8007edc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fc47 	bl	800877e <USBD_CtlSendData>
              break;
 8007ef0:	e06a      	b.n	8007fc8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ef2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	da11      	bge.n	8007f1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	f003 020f 	and.w	r2, r3, #15
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	4613      	mov	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4413      	add	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	440b      	add	r3, r1
 8007f0c:	3324      	adds	r3, #36	; 0x24
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d117      	bne.n	8007f44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fbc0 	bl	800869c <USBD_CtlError>
                  break;
 8007f1c:	e054      	b.n	8007fc8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f1e:	7bbb      	ldrb	r3, [r7, #14]
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d104      	bne.n	8007f44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fbad 	bl	800869c <USBD_CtlError>
                  break;
 8007f42:	e041      	b.n	8007fc8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da0b      	bge.n	8007f64 <USBD_StdEPReq+0x23e>
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	3310      	adds	r3, #16
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3304      	adds	r3, #4
 8007f62:	e00b      	b.n	8007f7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
 8007f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	4413      	add	r3, r2
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <USBD_StdEPReq+0x264>
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b80      	cmp	r3, #128	; 0x80
 8007f88:	d103      	bne.n	8007f92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	e00e      	b.n	8007fb0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f92:	7bbb      	ldrb	r3, [r7, #14]
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fa78 	bl	800948c <USBD_LL_IsStallEP>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e002      	b.n	8007fb0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fbe1 	bl	800877e <USBD_CtlSendData>
              break;
 8007fbc:	e004      	b.n	8007fc8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fb6b 	bl	800869c <USBD_CtlError>
              break;
 8007fc6:	bf00      	nop
          }
          break;
 8007fc8:	e004      	b.n	8007fd4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fb65 	bl	800869c <USBD_CtlError>
          break;
 8007fd2:	bf00      	nop
      }
      break;
 8007fd4:	e004      	b.n	8007fe0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007fd6:	6839      	ldr	r1, [r7, #0]
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fb5f 	bl	800869c <USBD_CtlError>
      break;
 8007fde:	bf00      	nop
  }

  return ret;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
	...

08007fec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	885b      	ldrh	r3, [r3, #2]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	2b0e      	cmp	r3, #14
 800800e:	f200 8152 	bhi.w	80082b6 <USBD_GetDescriptor+0x2ca>
 8008012:	a201      	add	r2, pc, #4	; (adr r2, 8008018 <USBD_GetDescriptor+0x2c>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008089 	.word	0x08008089
 800801c:	080080a1 	.word	0x080080a1
 8008020:	080080e1 	.word	0x080080e1
 8008024:	080082b7 	.word	0x080082b7
 8008028:	080082b7 	.word	0x080082b7
 800802c:	08008257 	.word	0x08008257
 8008030:	08008283 	.word	0x08008283
 8008034:	080082b7 	.word	0x080082b7
 8008038:	080082b7 	.word	0x080082b7
 800803c:	080082b7 	.word	0x080082b7
 8008040:	080082b7 	.word	0x080082b7
 8008044:	080082b7 	.word	0x080082b7
 8008048:	080082b7 	.word	0x080082b7
 800804c:	080082b7 	.word	0x080082b7
 8008050:	08008055 	.word	0x08008055
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	7c12      	ldrb	r2, [r2, #16]
 800806c:	f107 0108 	add.w	r1, r7, #8
 8008070:	4610      	mov	r0, r2
 8008072:	4798      	blx	r3
 8008074:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008076:	e126      	b.n	80082c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fb0e 	bl	800869c <USBD_CtlError>
        err++;
 8008080:	7afb      	ldrb	r3, [r7, #11]
 8008082:	3301      	adds	r3, #1
 8008084:	72fb      	strb	r3, [r7, #11]
      break;
 8008086:	e11e      	b.n	80082c6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7c12      	ldrb	r2, [r2, #16]
 8008094:	f107 0108 	add.w	r1, r7, #8
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
 800809c:	60f8      	str	r0, [r7, #12]
      break;
 800809e:	e112      	b.n	80082c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	7c1b      	ldrb	r3, [r3, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10d      	bne.n	80080c4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	f107 0208 	add.w	r2, r7, #8
 80080b4:	4610      	mov	r0, r2
 80080b6:	4798      	blx	r3
 80080b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	3301      	adds	r3, #1
 80080be:	2202      	movs	r2, #2
 80080c0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080c2:	e100      	b.n	80082c6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	f107 0208 	add.w	r2, r7, #8
 80080d0:	4610      	mov	r0, r2
 80080d2:	4798      	blx	r3
 80080d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3301      	adds	r3, #1
 80080da:	2202      	movs	r2, #2
 80080dc:	701a      	strb	r2, [r3, #0]
      break;
 80080de:	e0f2      	b.n	80082c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	885b      	ldrh	r3, [r3, #2]
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	2b05      	cmp	r3, #5
 80080e8:	f200 80ac 	bhi.w	8008244 <USBD_GetDescriptor+0x258>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <USBD_GetDescriptor+0x108>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	0800810d 	.word	0x0800810d
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008175 	.word	0x08008175
 8008100:	080081a9 	.word	0x080081a9
 8008104:	080081dd 	.word	0x080081dd
 8008108:	08008211 	.word	0x08008211
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00b      	beq.n	8008130 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	7c12      	ldrb	r2, [r2, #16]
 8008124:	f107 0108 	add.w	r1, r7, #8
 8008128:	4610      	mov	r0, r2
 800812a:	4798      	blx	r3
 800812c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800812e:	e091      	b.n	8008254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fab2 	bl	800869c <USBD_CtlError>
            err++;
 8008138:	7afb      	ldrb	r3, [r7, #11]
 800813a:	3301      	adds	r3, #1
 800813c:	72fb      	strb	r3, [r7, #11]
          break;
 800813e:	e089      	b.n	8008254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	7c12      	ldrb	r2, [r2, #16]
 8008158:	f107 0108 	add.w	r1, r7, #8
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008162:	e077      	b.n	8008254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa98 	bl	800869c <USBD_CtlError>
            err++;
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	3301      	adds	r3, #1
 8008170:	72fb      	strb	r3, [r7, #11]
          break;
 8008172:	e06f      	b.n	8008254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00b      	beq.n	8008198 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	7c12      	ldrb	r2, [r2, #16]
 800818c:	f107 0108 	add.w	r1, r7, #8
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008196:	e05d      	b.n	8008254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa7e 	bl	800869c <USBD_CtlError>
            err++;
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	3301      	adds	r3, #1
 80081a4:	72fb      	strb	r3, [r7, #11]
          break;
 80081a6:	e055      	b.n	8008254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00b      	beq.n	80081cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	7c12      	ldrb	r2, [r2, #16]
 80081c0:	f107 0108 	add.w	r1, r7, #8
 80081c4:	4610      	mov	r0, r2
 80081c6:	4798      	blx	r3
 80081c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081ca:	e043      	b.n	8008254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fa64 	bl	800869c <USBD_CtlError>
            err++;
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	3301      	adds	r3, #1
 80081d8:	72fb      	strb	r3, [r7, #11]
          break;
 80081da:	e03b      	b.n	8008254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00b      	beq.n	8008200 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	7c12      	ldrb	r2, [r2, #16]
 80081f4:	f107 0108 	add.w	r1, r7, #8
 80081f8:	4610      	mov	r0, r2
 80081fa:	4798      	blx	r3
 80081fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081fe:	e029      	b.n	8008254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa4a 	bl	800869c <USBD_CtlError>
            err++;
 8008208:	7afb      	ldrb	r3, [r7, #11]
 800820a:	3301      	adds	r3, #1
 800820c:	72fb      	strb	r3, [r7, #11]
          break;
 800820e:	e021      	b.n	8008254 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00b      	beq.n	8008234 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	7c12      	ldrb	r2, [r2, #16]
 8008228:	f107 0108 	add.w	r1, r7, #8
 800822c:	4610      	mov	r0, r2
 800822e:	4798      	blx	r3
 8008230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008232:	e00f      	b.n	8008254 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 fa30 	bl	800869c <USBD_CtlError>
            err++;
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	3301      	adds	r3, #1
 8008240:	72fb      	strb	r3, [r7, #11]
          break;
 8008242:	e007      	b.n	8008254 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fa28 	bl	800869c <USBD_CtlError>
          err++;
 800824c:	7afb      	ldrb	r3, [r7, #11]
 800824e:	3301      	adds	r3, #1
 8008250:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008252:	bf00      	nop
      }
      break;
 8008254:	e037      	b.n	80082c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	7c1b      	ldrb	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d109      	bne.n	8008272 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008266:	f107 0208 	add.w	r2, r7, #8
 800826a:	4610      	mov	r0, r2
 800826c:	4798      	blx	r3
 800826e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008270:	e029      	b.n	80082c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fa11 	bl	800869c <USBD_CtlError>
        err++;
 800827a:	7afb      	ldrb	r3, [r7, #11]
 800827c:	3301      	adds	r3, #1
 800827e:	72fb      	strb	r3, [r7, #11]
      break;
 8008280:	e021      	b.n	80082c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7c1b      	ldrb	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10d      	bne.n	80082a6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	f107 0208 	add.w	r2, r7, #8
 8008296:	4610      	mov	r0, r2
 8008298:	4798      	blx	r3
 800829a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3301      	adds	r3, #1
 80082a0:	2207      	movs	r2, #7
 80082a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082a4:	e00f      	b.n	80082c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f9f7 	bl	800869c <USBD_CtlError>
        err++;
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	3301      	adds	r3, #1
 80082b2:	72fb      	strb	r3, [r7, #11]
      break;
 80082b4:	e007      	b.n	80082c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f9ef 	bl	800869c <USBD_CtlError>
      err++;
 80082be:	7afb      	ldrb	r3, [r7, #11]
 80082c0:	3301      	adds	r3, #1
 80082c2:	72fb      	strb	r3, [r7, #11]
      break;
 80082c4:	bf00      	nop
  }

  if (err != 0U)
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d11e      	bne.n	800830a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	88db      	ldrh	r3, [r3, #6]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d016      	beq.n	8008302 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80082d4:	893b      	ldrh	r3, [r7, #8]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d00e      	beq.n	80082f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	88da      	ldrh	r2, [r3, #6]
 80082de:	893b      	ldrh	r3, [r7, #8]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bf28      	it	cs
 80082e4:	4613      	movcs	r3, r2
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80082ea:	893b      	ldrh	r3, [r7, #8]
 80082ec:	461a      	mov	r2, r3
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa44 	bl	800877e <USBD_CtlSendData>
 80082f6:	e009      	b.n	800830c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9ce 	bl	800869c <USBD_CtlError>
 8008300:	e004      	b.n	800830c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa95 	bl	8008832 <USBD_CtlSendStatus>
 8008308:	e000      	b.n	800830c <USBD_GetDescriptor+0x320>
    return;
 800830a:	bf00      	nop
  }
}
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop

08008314 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	889b      	ldrh	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d131      	bne.n	800838a <USBD_SetAddress+0x76>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d12d      	bne.n	800838a <USBD_SetAddress+0x76>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	2b7f      	cmp	r3, #127	; 0x7f
 8008334:	d829      	bhi.n	800838a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	885b      	ldrh	r3, [r3, #2]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008340:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b03      	cmp	r3, #3
 800834c:	d104      	bne.n	8008358 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9a3 	bl	800869c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008356:	e01d      	b.n	8008394 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7bfa      	ldrb	r2, [r7, #15]
 800835c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f8bd 	bl	80094e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa61 	bl	8008832 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2202      	movs	r2, #2
 800837a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837e:	e009      	b.n	8008394 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008388:	e004      	b.n	8008394 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f985 	bl	800869c <USBD_CtlError>
  }
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	885b      	ldrh	r3, [r3, #2]
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	4b4c      	ldr	r3, [pc, #304]	; (80084e4 <USBD_SetConfig+0x148>)
 80083b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083b4:	4b4b      	ldr	r3, [pc, #300]	; (80084e4 <USBD_SetConfig+0x148>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d905      	bls.n	80083c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 f96c 	bl	800869c <USBD_CtlError>
    return USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e088      	b.n	80084da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d002      	beq.n	80083da <USBD_SetConfig+0x3e>
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d025      	beq.n	8008424 <USBD_SetConfig+0x88>
 80083d8:	e071      	b.n	80084be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80083da:	4b42      	ldr	r3, [pc, #264]	; (80084e4 <USBD_SetConfig+0x148>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01c      	beq.n	800841c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80083e2:	4b40      	ldr	r3, [pc, #256]	; (80084e4 <USBD_SetConfig+0x148>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083ec:	4b3d      	ldr	r3, [pc, #244]	; (80084e4 <USBD_SetConfig+0x148>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff f91f 	bl	8007636 <USBD_SetClassConfig>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d004      	beq.n	800840c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f949 	bl	800869c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800840a:	e065      	b.n	80084d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fa10 	bl	8008832 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2203      	movs	r2, #3
 8008416:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800841a:	e05d      	b.n	80084d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fa08 	bl	8008832 <USBD_CtlSendStatus>
      break;
 8008422:	e059      	b.n	80084d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008424:	4b2f      	ldr	r3, [pc, #188]	; (80084e4 <USBD_SetConfig+0x148>)
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d112      	bne.n	8008452 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008434:	4b2b      	ldr	r3, [pc, #172]	; (80084e4 <USBD_SetConfig+0x148>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800843e:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <USBD_SetConfig+0x148>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f7ff f912 	bl	800766e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 f9f1 	bl	8008832 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008450:	e042      	b.n	80084d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008452:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <USBD_SetConfig+0x148>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	429a      	cmp	r2, r3
 800845e:	d02a      	beq.n	80084b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff f900 	bl	800766e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800846e:	4b1d      	ldr	r3, [pc, #116]	; (80084e4 <USBD_SetConfig+0x148>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008478:	4b1a      	ldr	r3, [pc, #104]	; (80084e4 <USBD_SetConfig+0x148>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7ff f8d9 	bl	8007636 <USBD_SetClassConfig>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00f      	beq.n	80084ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f903 	bl	800869c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff f8e5 	bl	800766e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80084ac:	e014      	b.n	80084d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f9bf 	bl	8008832 <USBD_CtlSendStatus>
      break;
 80084b4:	e010      	b.n	80084d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f9bb 	bl	8008832 <USBD_CtlSendStatus>
      break;
 80084bc:	e00c      	b.n	80084d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f8eb 	bl	800869c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80084c6:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <USBD_SetConfig+0x148>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff f8ce 	bl	800766e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	73fb      	strb	r3, [r7, #15]
      break;
 80084d6:	bf00      	nop
  }

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20000a54 	.word	0x20000a54

080084e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	88db      	ldrh	r3, [r3, #6]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d004      	beq.n	8008504 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 f8cd 	bl	800869c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008502:	e023      	b.n	800854c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b02      	cmp	r3, #2
 800850e:	dc02      	bgt.n	8008516 <USBD_GetConfig+0x2e>
 8008510:	2b00      	cmp	r3, #0
 8008512:	dc03      	bgt.n	800851c <USBD_GetConfig+0x34>
 8008514:	e015      	b.n	8008542 <USBD_GetConfig+0x5a>
 8008516:	2b03      	cmp	r3, #3
 8008518:	d00b      	beq.n	8008532 <USBD_GetConfig+0x4a>
 800851a:	e012      	b.n	8008542 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3308      	adds	r3, #8
 8008526:	2201      	movs	r2, #1
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f927 	bl	800877e <USBD_CtlSendData>
        break;
 8008530:	e00c      	b.n	800854c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3304      	adds	r3, #4
 8008536:	2201      	movs	r2, #1
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f91f 	bl	800877e <USBD_CtlSendData>
        break;
 8008540:	e004      	b.n	800854c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f8a9 	bl	800869c <USBD_CtlError>
        break;
 800854a:	bf00      	nop
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008564:	b2db      	uxtb	r3, r3
 8008566:	3b01      	subs	r3, #1
 8008568:	2b02      	cmp	r3, #2
 800856a:	d81e      	bhi.n	80085aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	88db      	ldrh	r3, [r3, #6]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d004      	beq.n	800857e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f890 	bl	800869c <USBD_CtlError>
        break;
 800857c:	e01a      	b.n	80085b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f043 0202 	orr.w	r2, r3, #2
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	330c      	adds	r3, #12
 800859e:	2202      	movs	r2, #2
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f8eb 	bl	800877e <USBD_CtlSendData>
      break;
 80085a8:	e004      	b.n	80085b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80085aa:	6839      	ldr	r1, [r7, #0]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f875 	bl	800869c <USBD_CtlError>
      break;
 80085b2:	bf00      	nop
  }
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	885b      	ldrh	r3, [r3, #2]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d106      	bne.n	80085dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f92b 	bl	8008832 <USBD_CtlSendStatus>
  }
}
 80085dc:	bf00      	nop
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	3b01      	subs	r3, #1
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d80b      	bhi.n	8008614 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d10c      	bne.n	800861e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f910 	bl	8008832 <USBD_CtlSendStatus>
      }
      break;
 8008612:	e004      	b.n	800861e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f840 	bl	800869c <USBD_CtlError>
      break;
 800861c:	e000      	b.n	8008620 <USBD_ClrFeature+0x3c>
      break;
 800861e:	bf00      	nop
  }
}
 8008620:	bf00      	nop
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	781a      	ldrb	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3301      	adds	r3, #1
 8008642:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	3301      	adds	r3, #1
 8008650:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f7ff fa92 	bl	8007b7c <SWAPBYTE>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7ff fa85 	bl	8007b7c <SWAPBYTE>
 8008672:	4603      	mov	r3, r0
 8008674:	461a      	mov	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3301      	adds	r3, #1
 8008684:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f7ff fa78 	bl	8007b7c <SWAPBYTE>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	80da      	strh	r2, [r3, #6]
}
 8008694:	bf00      	nop
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80086a6:	2180      	movs	r1, #128	; 0x80
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fe83 	bl	80093b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80086ae:	2100      	movs	r1, #0
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fe7f 	bl	80093b4 <USBD_LL_StallEP>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d036      	beq.n	8008742 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80086d8:	6938      	ldr	r0, [r7, #16]
 80086da:	f000 f836 	bl	800874a <USBD_GetLen>
 80086de:	4603      	mov	r3, r0
 80086e0:	3301      	adds	r3, #1
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086ec:	7dfb      	ldrb	r3, [r7, #23]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	4413      	add	r3, r2
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	7812      	ldrb	r2, [r2, #0]
 80086f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80086f8:	7dfb      	ldrb	r3, [r7, #23]
 80086fa:	3301      	adds	r3, #1
 80086fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	4413      	add	r3, r2
 8008704:	2203      	movs	r2, #3
 8008706:	701a      	strb	r2, [r3, #0]
  idx++;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	3301      	adds	r3, #1
 800870c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800870e:	e013      	b.n	8008738 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	4413      	add	r3, r2
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	7812      	ldrb	r2, [r2, #0]
 800871a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	3301      	adds	r3, #1
 8008720:	613b      	str	r3, [r7, #16]
    idx++;
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	3301      	adds	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4413      	add	r3, r2
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
    idx++;
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	3301      	adds	r3, #1
 8008736:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e7      	bne.n	8008710 <USBD_GetString+0x52>
 8008740:	e000      	b.n	8008744 <USBD_GetString+0x86>
    return;
 8008742:	bf00      	nop
  }
}
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800874a:	b480      	push	{r7}
 800874c:	b085      	sub	sp, #20
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800875a:	e005      	b.n	8008768 <USBD_GetLen+0x1e>
  {
    len++;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	3301      	adds	r3, #1
 8008760:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	3301      	adds	r3, #1
 8008766:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1f5      	bne.n	800875c <USBD_GetLen+0x12>
  }

  return len;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2202      	movs	r2, #2
 800878e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	2100      	movs	r1, #0
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 fed3 	bl	8009550 <USBD_LL_Transmit>

  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	2100      	movs	r1, #0
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 fec2 	bl	8009550 <USBD_LL_Transmit>

  return USBD_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2203      	movs	r2, #3
 80087e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	2100      	movs	r1, #0
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 fedd 	bl	80095c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	2100      	movs	r1, #0
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 fecc 	bl	80095c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2204      	movs	r2, #4
 800883e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008842:	2300      	movs	r3, #0
 8008844:	2200      	movs	r2, #0
 8008846:	2100      	movs	r1, #0
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fe81 	bl	8009550 <USBD_LL_Transmit>

  return USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2205      	movs	r2, #5
 8008864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008868:	2300      	movs	r3, #0
 800886a:	2200      	movs	r2, #0
 800886c:	2100      	movs	r1, #0
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 fea6 	bl	80095c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
	...

08008880 <readSustainPedal>:


void initializePedals(){

}
int readSustainPedal(){
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, TRS1_T_Pin);
 8008884:	2102      	movs	r1, #2
 8008886:	4803      	ldr	r0, [pc, #12]	; (8008894 <readSustainPedal+0x14>)
 8008888:	f7f8 fc02 	bl	8001090 <HAL_GPIO_ReadPin>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	48000800 	.word	0x48000800

08008898 <readSustenotoPedal>:
int readSustenotoPedal(){
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, TRS1_R_Pin);
 800889c:	2104      	movs	r1, #4
 800889e:	4803      	ldr	r0, [pc, #12]	; (80088ac <readSustenotoPedal+0x14>)
 80088a0:	f7f8 fbf6 	bl	8001090 <HAL_GPIO_ReadPin>
 80088a4:	4603      	mov	r3, r0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	48000800 	.word	0x48000800

080088b0 <readSoftPedal>:
int readSoftPedal(){
 80088b0:	b580      	push	{r7, lr}
 80088b2:	af00      	add	r7, sp, #0

	return HAL_GPIO_ReadPin(GPIOC, TRS2_T_Pin);
 80088b4:	2108      	movs	r1, #8
 80088b6:	4803      	ldr	r0, [pc, #12]	; (80088c4 <readSoftPedal+0x14>)
 80088b8:	f7f8 fbea 	bl	8001090 <HAL_GPIO_ReadPin>
 80088bc:	4603      	mov	r3, r0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	48000800 	.word	0x48000800

080088c8 <scanPedals>:


void scanPedals(){
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
	pedalCurrentStatus[0] = readSustainPedal();
 80088cc:	f7ff ffd8 	bl	8008880 <readSustainPedal>
 80088d0:	4603      	mov	r3, r0
 80088d2:	4a44      	ldr	r2, [pc, #272]	; (80089e4 <scanPedals+0x11c>)
 80088d4:	6013      	str	r3, [r2, #0]
	pedalCurrentStatus[1] = readSustenotoPedal();
 80088d6:	f7ff ffdf 	bl	8008898 <readSustenotoPedal>
 80088da:	4603      	mov	r3, r0
 80088dc:	4a41      	ldr	r2, [pc, #260]	; (80089e4 <scanPedals+0x11c>)
 80088de:	6053      	str	r3, [r2, #4]
	pedalCurrentStatus[2] = readSoftPedal();
 80088e0:	f7ff ffe6 	bl	80088b0 <readSoftPedal>
 80088e4:	4603      	mov	r3, r0
 80088e6:	4a3f      	ldr	r2, [pc, #252]	; (80089e4 <scanPedals+0x11c>)
 80088e8:	6093      	str	r3, [r2, #8]


	if(pedalPreviousStatus[0] == 0  && pedalCurrentStatus[0] == 1){
 80088ea:	4b3f      	ldr	r3, [pc, #252]	; (80089e8 <scanPedals+0x120>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10e      	bne.n	8008910 <scanPedals+0x48>
 80088f2:	4b3c      	ldr	r3, [pc, #240]	; (80089e4 <scanPedals+0x11c>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d10a      	bne.n	8008910 <scanPedals+0x48>
		usbmidi_damperPedal(&USBMIDI1,  CHANNEL_1,1);
 80088fa:	2201      	movs	r2, #1
 80088fc:	2100      	movs	r1, #0
 80088fe:	483b      	ldr	r0, [pc, #236]	; (80089ec <scanPedals+0x124>)
 8008900:	f7fe f8c5 	bl	8006a8e <usbmidi_damperPedal>
		midi_damperPedal(&MIDI1,  CHANNEL_1,1);
 8008904:	2201      	movs	r2, #1
 8008906:	2100      	movs	r1, #0
 8008908:	4839      	ldr	r0, [pc, #228]	; (80089f0 <scanPedals+0x128>)
 800890a:	f7fd ffd6 	bl	80068ba <midi_damperPedal>
 800890e:	e011      	b.n	8008934 <scanPedals+0x6c>


	}else if(pedalPreviousStatus[0] == 1  && pedalCurrentStatus[0] == 0){
 8008910:	4b35      	ldr	r3, [pc, #212]	; (80089e8 <scanPedals+0x120>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d10d      	bne.n	8008934 <scanPedals+0x6c>
 8008918:	4b32      	ldr	r3, [pc, #200]	; (80089e4 <scanPedals+0x11c>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d109      	bne.n	8008934 <scanPedals+0x6c>
		usbmidi_damperPedal(&USBMIDI1,  CHANNEL_1,0);
 8008920:	2200      	movs	r2, #0
 8008922:	2100      	movs	r1, #0
 8008924:	4831      	ldr	r0, [pc, #196]	; (80089ec <scanPedals+0x124>)
 8008926:	f7fe f8b2 	bl	8006a8e <usbmidi_damperPedal>
		midi_damperPedal(&MIDI1,  CHANNEL_1,0);
 800892a:	2200      	movs	r2, #0
 800892c:	2100      	movs	r1, #0
 800892e:	4830      	ldr	r0, [pc, #192]	; (80089f0 <scanPedals+0x128>)
 8008930:	f7fd ffc3 	bl	80068ba <midi_damperPedal>
	}

	pedalPreviousStatus[0] = pedalCurrentStatus[0];
 8008934:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <scanPedals+0x11c>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a2b      	ldr	r2, [pc, #172]	; (80089e8 <scanPedals+0x120>)
 800893a:	6013      	str	r3, [r2, #0]


	if(pedalPreviousStatus[1] == 0  && pedalCurrentStatus[1] == 1){
 800893c:	4b2a      	ldr	r3, [pc, #168]	; (80089e8 <scanPedals+0x120>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10e      	bne.n	8008962 <scanPedals+0x9a>
 8008944:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <scanPedals+0x11c>)
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d10a      	bne.n	8008962 <scanPedals+0x9a>
		usbmidi_sostenuto(&USBMIDI1,  CHANNEL_1,1);
 800894c:	2201      	movs	r2, #1
 800894e:	2100      	movs	r1, #0
 8008950:	4826      	ldr	r0, [pc, #152]	; (80089ec <scanPedals+0x124>)
 8008952:	f7fe f8af 	bl	8006ab4 <usbmidi_sostenuto>
		midi_sostenuto(&MIDI1, CHANNEL_1 , 1);
 8008956:	2201      	movs	r2, #1
 8008958:	2100      	movs	r1, #0
 800895a:	4825      	ldr	r0, [pc, #148]	; (80089f0 <scanPedals+0x128>)
 800895c:	f7fd ffc0 	bl	80068e0 <midi_sostenuto>
 8008960:	e011      	b.n	8008986 <scanPedals+0xbe>
	}else if(pedalPreviousStatus[1] == 1  && pedalCurrentStatus[1] == 0){
 8008962:	4b21      	ldr	r3, [pc, #132]	; (80089e8 <scanPedals+0x120>)
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d10d      	bne.n	8008986 <scanPedals+0xbe>
 800896a:	4b1e      	ldr	r3, [pc, #120]	; (80089e4 <scanPedals+0x11c>)
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <scanPedals+0xbe>
		usbmidi_sostenuto(&USBMIDI1,  CHANNEL_1,0);
 8008972:	2200      	movs	r2, #0
 8008974:	2100      	movs	r1, #0
 8008976:	481d      	ldr	r0, [pc, #116]	; (80089ec <scanPedals+0x124>)
 8008978:	f7fe f89c 	bl	8006ab4 <usbmidi_sostenuto>
		midi_sostenuto(&MIDI1, CHANNEL_1 , 0);
 800897c:	2200      	movs	r2, #0
 800897e:	2100      	movs	r1, #0
 8008980:	481b      	ldr	r0, [pc, #108]	; (80089f0 <scanPedals+0x128>)
 8008982:	f7fd ffad 	bl	80068e0 <midi_sostenuto>
	}

	pedalPreviousStatus[1] = pedalCurrentStatus[1];
 8008986:	4b17      	ldr	r3, [pc, #92]	; (80089e4 <scanPedals+0x11c>)
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	4a17      	ldr	r2, [pc, #92]	; (80089e8 <scanPedals+0x120>)
 800898c:	6053      	str	r3, [r2, #4]



	if(pedalPreviousStatus[2] == 0  && pedalCurrentStatus[2] == 1){
 800898e:	4b16      	ldr	r3, [pc, #88]	; (80089e8 <scanPedals+0x120>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10e      	bne.n	80089b4 <scanPedals+0xec>
 8008996:	4b13      	ldr	r3, [pc, #76]	; (80089e4 <scanPedals+0x11c>)
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	2b01      	cmp	r3, #1
 800899c:	d10a      	bne.n	80089b4 <scanPedals+0xec>
		usbmidi_softPedal(&USBMIDI1,  CHANNEL_1,1);
 800899e:	2201      	movs	r2, #1
 80089a0:	2100      	movs	r1, #0
 80089a2:	4812      	ldr	r0, [pc, #72]	; (80089ec <scanPedals+0x124>)
 80089a4:	f7fe f899 	bl	8006ada <usbmidi_softPedal>
		midi_softPedal(&MIDI1, CHANNEL_1 ,1);
 80089a8:	2201      	movs	r2, #1
 80089aa:	2100      	movs	r1, #0
 80089ac:	4810      	ldr	r0, [pc, #64]	; (80089f0 <scanPedals+0x128>)
 80089ae:	f7fd ffaa 	bl	8006906 <midi_softPedal>
 80089b2:	e011      	b.n	80089d8 <scanPedals+0x110>
	}else if(pedalPreviousStatus[2] == 1  && pedalCurrentStatus[2] == 0){
 80089b4:	4b0c      	ldr	r3, [pc, #48]	; (80089e8 <scanPedals+0x120>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d10d      	bne.n	80089d8 <scanPedals+0x110>
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <scanPedals+0x11c>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d109      	bne.n	80089d8 <scanPedals+0x110>
		usbmidi_softPedal(&USBMIDI1,  CHANNEL_1,0);
 80089c4:	2200      	movs	r2, #0
 80089c6:	2100      	movs	r1, #0
 80089c8:	4808      	ldr	r0, [pc, #32]	; (80089ec <scanPedals+0x124>)
 80089ca:	f7fe f886 	bl	8006ada <usbmidi_softPedal>
		midi_softPedal(&MIDI1, CHANNEL_1 ,0);
 80089ce:	2200      	movs	r2, #0
 80089d0:	2100      	movs	r1, #0
 80089d2:	4807      	ldr	r0, [pc, #28]	; (80089f0 <scanPedals+0x128>)
 80089d4:	f7fd ff97 	bl	8006906 <midi_softPedal>
	}

	pedalPreviousStatus[2] = pedalCurrentStatus[2];
 80089d8:	4b02      	ldr	r3, [pc, #8]	; (80089e4 <scanPedals+0x11c>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	4a02      	ldr	r2, [pc, #8]	; (80089e8 <scanPedals+0x120>)
 80089de:	6093      	str	r3, [r2, #8]



}
 80089e0:	bf00      	nop
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20000a64 	.word	0x20000a64
 80089e8:	20000a58 	.word	0x20000a58
 80089ec:	200002f8 	.word	0x200002f8
 80089f0:	20000304 	.word	0x20000304

080089f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089f8:	2200      	movs	r2, #0
 80089fa:	491f      	ldr	r1, [pc, #124]	; (8008a78 <MX_USB_DEVICE_Init+0x84>)
 80089fc:	481f      	ldr	r0, [pc, #124]	; (8008a7c <MX_USB_DEVICE_Init+0x88>)
 80089fe:	f7fe fdac 	bl	800755a <USBD_Init>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a08:	f7f7 feea 	bl	80007e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 8008a0c:	491c      	ldr	r1, [pc, #112]	; (8008a80 <MX_USB_DEVICE_Init+0x8c>)
 8008a0e:	481b      	ldr	r0, [pc, #108]	; (8008a7c <MX_USB_DEVICE_Init+0x88>)
 8008a10:	f7fe fdd3 	bl	80075ba <USBD_RegisterClass>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a1a:	f7f7 fee1 	bl	80007e0 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 8008a1e:	4919      	ldr	r1, [pc, #100]	; (8008a84 <MX_USB_DEVICE_Init+0x90>)
 8008a20:	4816      	ldr	r0, [pc, #88]	; (8008a7c <MX_USB_DEVICE_Init+0x88>)
 8008a22:	f7fe fc71 	bl	8007308 <USBD_AUDIO_RegisterInterface>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a2c:	f7f7 fed8 	bl	80007e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a30:	4812      	ldr	r0, [pc, #72]	; (8008a7c <MX_USB_DEVICE_Init+0x88>)
 8008a32:	f7fe fde9 	bl	8007608 <USBD_Start>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a3c:	f7f7 fed0 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI) != USBD_OK)
 8008a40:	4911      	ldr	r1, [pc, #68]	; (8008a88 <MX_USB_DEVICE_Init+0x94>)
 8008a42:	480e      	ldr	r0, [pc, #56]	; (8008a7c <MX_USB_DEVICE_Init+0x88>)
 8008a44:	f7fe fdb9 	bl	80075ba <USBD_RegisterClass>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <MX_USB_DEVICE_Init+0x5e>
  {
	  Error_Handler();
 8008a4e:	f7f7 fec7 	bl	80007e0 <Error_Handler>
  }
  if (USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a52:	490e      	ldr	r1, [pc, #56]	; (8008a8c <MX_USB_DEVICE_Init+0x98>)
 8008a54:	4809      	ldr	r0, [pc, #36]	; (8008a7c <MX_USB_DEVICE_Init+0x88>)
 8008a56:	f7fe fd69 	bl	800752c <USBD_MIDI_RegisterInterface>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <MX_USB_DEVICE_Init+0x70>
  {
	  Error_Handler();
 8008a60:	f7f7 febe 	bl	80007e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a64:	4805      	ldr	r0, [pc, #20]	; (8008a7c <MX_USB_DEVICE_Init+0x88>)
 8008a66:	f7fe fdcf 	bl	8007608 <USBD_Start>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <MX_USB_DEVICE_Init+0x80>
  {
	  Error_Handler();
 8008a70:	f7f7 feb6 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a74:	bf00      	nop
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	2000047c 	.word	0x2000047c
 8008a7c:	20000a70 	.word	0x20000a70
 8008a80:	2000030c 	.word	0x2000030c
 8008a84:	20000460 	.word	0x20000460
 8008a88:	200003c0 	.word	0x200003c0
 8008a8c:	200004ec 	.word	0x200004ec

08008a90 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8008a9c:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 8008ab2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	4613      	mov	r3, r2
 8008acc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d001      	beq.n	8008ad8 <AUDIO_AudioCmd_FS+0x18>
 8008ad4:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 8008ad6:	e000      	b.n	8008ada <AUDIO_AudioCmd_FS+0x1a>
    break;
 8008ad8:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008ada:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	4603      	mov	r3, r0
 8008af0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 8008af2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	4603      	mov	r3, r0
 8008b08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 8008b0a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8008b26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 8008b34:	b480      	push	{r7}
 8008b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008b38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	6039      	str	r1, [r7, #0]
 8008b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2212      	movs	r2, #18
 8008b54:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008b56:	4b03      	ldr	r3, [pc, #12]	; (8008b64 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	2000049c 	.word	0x2000049c

08008b68 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	6039      	str	r1, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2204      	movs	r2, #4
 8008b78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008b7a:	4b03      	ldr	r3, [pc, #12]	; (8008b88 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	200004bc 	.word	0x200004bc

08008b8c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	4907      	ldr	r1, [pc, #28]	; (8008bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ba2:	4808      	ldr	r0, [pc, #32]	; (8008bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ba4:	f7ff fd8b 	bl	80086be <USBD_GetString>
 8008ba8:	e004      	b.n	8008bb4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	4904      	ldr	r1, [pc, #16]	; (8008bc0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008bae:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008bb0:	f7ff fd85 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000d40 	.word	0x20000d40
 8008bc4:	080097a0 	.word	0x080097a0

08008bc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	6039      	str	r1, [r7, #0]
 8008bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	4904      	ldr	r1, [pc, #16]	; (8008be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008bd8:	4804      	ldr	r0, [pc, #16]	; (8008bec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008bda:	f7ff fd70 	bl	80086be <USBD_GetString>
  return USBD_StrDesc;
 8008bde:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	20000d40 	.word	0x20000d40
 8008bec:	080097a8 	.word	0x080097a8

08008bf0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	221a      	movs	r2, #26
 8008c00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008c02:	f000 f855 	bl	8008cb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008c06:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200004c0 	.word	0x200004c0

08008c14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d105      	bne.n	8008c32 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	4907      	ldr	r1, [pc, #28]	; (8008c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c2a:	4808      	ldr	r0, [pc, #32]	; (8008c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c2c:	f7ff fd47 	bl	80086be <USBD_GetString>
 8008c30:	e004      	b.n	8008c3c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	4904      	ldr	r1, [pc, #16]	; (8008c48 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008c36:	4805      	ldr	r0, [pc, #20]	; (8008c4c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008c38:	f7ff fd41 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3708      	adds	r7, #8
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20000d40 	.word	0x20000d40
 8008c4c:	080097bc 	.word	0x080097bc

08008c50 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	4603      	mov	r3, r0
 8008c58:	6039      	str	r1, [r7, #0]
 8008c5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d105      	bne.n	8008c6e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	4907      	ldr	r1, [pc, #28]	; (8008c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c66:	4808      	ldr	r0, [pc, #32]	; (8008c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c68:	f7ff fd29 	bl	80086be <USBD_GetString>
 8008c6c:	e004      	b.n	8008c78 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	4904      	ldr	r1, [pc, #16]	; (8008c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008c72:	4805      	ldr	r0, [pc, #20]	; (8008c88 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008c74:	f7ff fd23 	bl	80086be <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c78:	4b02      	ldr	r3, [pc, #8]	; (8008c84 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000d40 	.word	0x20000d40
 8008c88:	080097c8 	.word	0x080097c8

08008c8c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	6039      	str	r1, [r7, #0]
 8008c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	220c      	movs	r2, #12
 8008c9c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008c9e:	4b03      	ldr	r3, [pc, #12]	; (8008cac <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	200004b0 	.word	0x200004b0

08008cb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008cb6:	4b0f      	ldr	r3, [pc, #60]	; (8008cf4 <Get_SerialNum+0x44>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008cbc:	4b0e      	ldr	r3, [pc, #56]	; (8008cf8 <Get_SerialNum+0x48>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008cc2:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <Get_SerialNum+0x4c>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4413      	add	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d009      	beq.n	8008cea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008cd6:	2208      	movs	r2, #8
 8008cd8:	4909      	ldr	r1, [pc, #36]	; (8008d00 <Get_SerialNum+0x50>)
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f814 	bl	8008d08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008ce0:	2204      	movs	r2, #4
 8008ce2:	4908      	ldr	r1, [pc, #32]	; (8008d04 <Get_SerialNum+0x54>)
 8008ce4:	68b8      	ldr	r0, [r7, #8]
 8008ce6:	f000 f80f 	bl	8008d08 <IntToUnicode>
  }
}
 8008cea:	bf00      	nop
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	1fff7590 	.word	0x1fff7590
 8008cf8:	1fff7594 	.word	0x1fff7594
 8008cfc:	1fff7598 	.word	0x1fff7598
 8008d00:	200004c2 	.word	0x200004c2
 8008d04:	200004d2 	.word	0x200004d2

08008d08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	4613      	mov	r3, r2
 8008d14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	75fb      	strb	r3, [r7, #23]
 8008d1e:	e027      	b.n	8008d70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	0f1b      	lsrs	r3, r3, #28
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	d80b      	bhi.n	8008d40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	0f1b      	lsrs	r3, r3, #28
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	4619      	mov	r1, r3
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	440b      	add	r3, r1
 8008d38:	3230      	adds	r2, #48	; 0x30
 8008d3a:	b2d2      	uxtb	r2, r2
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	e00a      	b.n	8008d56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	0f1b      	lsrs	r3, r3, #28
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	440b      	add	r3, r1
 8008d50:	3237      	adds	r2, #55	; 0x37
 8008d52:	b2d2      	uxtb	r2, r2
 8008d54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	005b      	lsls	r3, r3, #1
 8008d60:	3301      	adds	r3, #1
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	2200      	movs	r2, #0
 8008d68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	75fb      	strb	r3, [r7, #23]
 8008d70:	7dfa      	ldrb	r2, [r7, #23]
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d3d3      	bcc.n	8008d20 <IntToUnicode+0x18>
  }
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	371c      	adds	r7, #28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <MIDI_DataRx>:
  MIDI_DataRx,
  MIDI_DataTx
};
 
uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	807b      	strh	r3, [r7, #2]
  uint8_t chan = msg[0] & 0x0F;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	73fb      	strb	r3, [r7, #15]
  uint8_t msgtype = msg[0] & 0xF0;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f023 030f 	bic.w	r3, r3, #15
 8008da6:	73bb      	strb	r3, [r7, #14]
  uint8_t b1 =  msg[2];
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	789b      	ldrb	r3, [r3, #2]
 8008dac:	737b      	strb	r3, [r7, #13]
  uint8_t b2 =  msg[3];
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	78db      	ldrb	r3, [r3, #3]
 8008db2:	733b      	strb	r3, [r7, #12]
  uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 8008db4:	7b3b      	ldrb	r3, [r7, #12]
 8008db6:	01db      	lsls	r3, r3, #7
 8008db8:	b21b      	sxth	r3, r3
 8008dba:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8008dbe:	b21a      	sxth	r2, r3
 8008dc0:	7b7b      	ldrb	r3, [r7, #13]
 8008dc2:	b21b      	sxth	r3, r3
 8008dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dc8:	b21b      	sxth	r3, r3
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	b21b      	sxth	r3, r3
 8008dce:	817b      	strh	r3, [r7, #10]
 
  switch (msgtype)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2bf0      	cmp	r3, #240	; 0xf0
 8008dd4:	d019      	beq.n	8008e0a <MIDI_DataRx+0x82>
 8008dd6:	2bf0      	cmp	r3, #240	; 0xf0
 8008dd8:	dc2f      	bgt.n	8008e3a <MIDI_DataRx+0xb2>
 8008dda:	2be0      	cmp	r3, #224	; 0xe0
 8008ddc:	d020      	beq.n	8008e20 <MIDI_DataRx+0x98>
 8008dde:	2be0      	cmp	r3, #224	; 0xe0
 8008de0:	dc2b      	bgt.n	8008e3a <MIDI_DataRx+0xb2>
 8008de2:	2bd0      	cmp	r3, #208	; 0xd0
 8008de4:	d01e      	beq.n	8008e24 <MIDI_DataRx+0x9c>
 8008de6:	2bd0      	cmp	r3, #208	; 0xd0
 8008de8:	dc27      	bgt.n	8008e3a <MIDI_DataRx+0xb2>
 8008dea:	2bc0      	cmp	r3, #192	; 0xc0
 8008dec:	d01c      	beq.n	8008e28 <MIDI_DataRx+0xa0>
 8008dee:	2bc0      	cmp	r3, #192	; 0xc0
 8008df0:	dc23      	bgt.n	8008e3a <MIDI_DataRx+0xb2>
 8008df2:	2bb0      	cmp	r3, #176	; 0xb0
 8008df4:	d01a      	beq.n	8008e2c <MIDI_DataRx+0xa4>
 8008df6:	2bb0      	cmp	r3, #176	; 0xb0
 8008df8:	dc1f      	bgt.n	8008e3a <MIDI_DataRx+0xb2>
 8008dfa:	2ba0      	cmp	r3, #160	; 0xa0
 8008dfc:	d018      	beq.n	8008e30 <MIDI_DataRx+0xa8>
 8008dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8008e00:	dc1b      	bgt.n	8008e3a <MIDI_DataRx+0xb2>
 8008e02:	2b80      	cmp	r3, #128	; 0x80
 8008e04:	d016      	beq.n	8008e34 <MIDI_DataRx+0xac>
 8008e06:	2b90      	cmp	r3, #144	; 0x90
	  //else
	  //{
	  //play_note(notepos, velocity);
	  //}
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 8008e08:	e017      	b.n	8008e3a <MIDI_DataRx+0xb2>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 8008e0a:	7b7b      	ldrb	r3, [r7, #13]
 8008e0c:	2b7e      	cmp	r3, #126	; 0x7e
 8008e0e:	d113      	bne.n	8008e38 <MIDI_DataRx+0xb0>
 8008e10:	7b3b      	ldrb	r3, [r7, #12]
 8008e12:	2b7f      	cmp	r3, #127	; 0x7f
 8008e14:	d110      	bne.n	8008e38 <MIDI_DataRx+0xb0>
		  MIDI_DataTx(SysexID, 15);
 8008e16:	210f      	movs	r1, #15
 8008e18:	480a      	ldr	r0, [pc, #40]	; (8008e44 <MIDI_DataRx+0xbc>)
 8008e1a:	f000 f815 	bl	8008e48 <MIDI_DataTx>
	  }
	  break;
 8008e1e:	e00b      	b.n	8008e38 <MIDI_DataRx+0xb0>
	  break;
 8008e20:	bf00      	nop
 8008e22:	e00a      	b.n	8008e3a <MIDI_DataRx+0xb2>
	  break;
 8008e24:	bf00      	nop
 8008e26:	e008      	b.n	8008e3a <MIDI_DataRx+0xb2>
	  break;
 8008e28:	bf00      	nop
 8008e2a:	e006      	b.n	8008e3a <MIDI_DataRx+0xb2>
	  break;
 8008e2c:	bf00      	nop
 8008e2e:	e004      	b.n	8008e3a <MIDI_DataRx+0xb2>
	  break;
 8008e30:	bf00      	nop
 8008e32:	e002      	b.n	8008e3a <MIDI_DataRx+0xb2>
	  break;
 8008e34:	bf00      	nop
 8008e36:	e000      	b.n	8008e3a <MIDI_DataRx+0xb2>
	  break;
 8008e38:	bf00      	nop
  }
  }
  return 0;
 8008e3a:	2300      	movs	r3, #0
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	200004dc 	.word	0x200004dc

08008e48 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 8008e58:	e017      	b.n	8008e8a <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	441a      	add	r2, r3
 8008e60:	4b0f      	ldr	r3, [pc, #60]	; (8008ea0 <MIDI_DataTx+0x58>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	7811      	ldrb	r1, [r2, #0]
 8008e66:	4a0f      	ldr	r2, [pc, #60]	; (8008ea4 <MIDI_DataTx+0x5c>)
 8008e68:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <MIDI_DataTx+0x58>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	4a0b      	ldr	r2, [pc, #44]	; (8008ea0 <MIDI_DataTx+0x58>)
 8008e72:	6013      	str	r3, [r2, #0]
    i++;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	3301      	adds	r3, #1
 8008e78:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <MIDI_DataTx+0x58>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e82:	d102      	bne.n	8008e8a <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 8008e84:	4b06      	ldr	r3, [pc, #24]	; (8008ea0 <MIDI_DataTx+0x58>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
  while (i < length) {
 8008e8a:	887b      	ldrh	r3, [r7, #2]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d3e3      	bcc.n	8008e5a <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 8008e92:	f7fe facb 	bl	800742c <USBD_MIDI_SendPacket>
  return USBD_OK;
 8008e96:	2300      	movs	r3, #0
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000904 	.word	0x20000904
 8008ea4:	20000954 	.word	0x20000954

08008ea8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b0ac      	sub	sp, #176	; 0xb0
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008eb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	605a      	str	r2, [r3, #4]
 8008eba:	609a      	str	r2, [r3, #8]
 8008ebc:	60da      	str	r2, [r3, #12]
 8008ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008ec0:	f107 0314 	add.w	r3, r7, #20
 8008ec4:	2288      	movs	r2, #136	; 0x88
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fc55 	bl	8009778 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ed6:	d173      	bne.n	8008fc0 <HAL_PCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008edc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008ede:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ee2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008eea:	2301      	movs	r3, #1
 8008eec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008eee:	2318      	movs	r3, #24
 8008ef0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008ef2:	2307      	movs	r3, #7
 8008ef4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008efa:	2302      	movs	r3, #2
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008efe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008f02:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008f04:	f107 0314 	add.w	r3, r7, #20
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fa f957 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8008f14:	f7f7 fc64 	bl	80007e0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f18:	4b2b      	ldr	r3, [pc, #172]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f1c:	4a2a      	ldr	r2, [pc, #168]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f1e:	f043 0301 	orr.w	r3, r3, #1
 8008f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f24:	4b28      	ldr	r3, [pc, #160]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f44:	2303      	movs	r3, #3
 8008f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f4a:	230a      	movs	r3, #10
 8008f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008f54:	4619      	mov	r1, r3
 8008f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f5a:	f7f7 feef 	bl	8000d3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f5e:	4b1a      	ldr	r3, [pc, #104]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f62:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f6a:	4b17      	ldr	r3, [pc, #92]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f76:	4b14      	ldr	r3, [pc, #80]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d114      	bne.n	8008fac <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f82:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f86:	4a10      	ldr	r2, [pc, #64]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f96:	60bb      	str	r3, [r7, #8]
 8008f98:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008f9a:	f7f9 facd 	bl	8002538 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f9e:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa2:	4a09      	ldr	r2, [pc, #36]	; (8008fc8 <HAL_PCD_MspInit+0x120>)
 8008fa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8008faa:	e001      	b.n	8008fb0 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008fac:	f7f9 fac4 	bl	8002538 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2043      	movs	r0, #67	; 0x43
 8008fb6:	f7f7 fe97 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008fba:	2043      	movs	r0, #67	; 0x43
 8008fbc:	f7f7 feb0 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fc0:	bf00      	nop
 8008fc2:	37b0      	adds	r7, #176	; 0xb0
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	40021000 	.word	0x40021000

08008fcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fe fb5b 	bl	800769e <USBD_LL_SetupStage>
}
 8008fe8:	bf00      	nop
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	4619      	mov	r1, r3
 800901a:	f7fe fb95 	bl	8007748 <USBD_LL_DataOutStage>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	4613      	mov	r3, r2
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	440b      	add	r3, r1
 8009046:	334c      	adds	r3, #76	; 0x4c
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	4619      	mov	r1, r3
 800904e:	f7fe fbde 	bl	800780e <USBD_LL_DataInStage>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe fcf2 	bl	8007a52 <USBD_LL_SOF>
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800907e:	2301      	movs	r3, #1
 8009080:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d001      	beq.n	800908e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800908a:	f7f7 fba9 	bl	80007e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009094:	7bfa      	ldrb	r2, [r7, #15]
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7fe fc9c 	bl	80079d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fc48 	bl	800793a <USBD_LL_Reset>
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	6812      	ldr	r2, [r2, #0]
 80090ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090ce:	f043 0301 	orr.w	r3, r3, #1
 80090d2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fe fc8b 	bl	80079f6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090e8:	4b04      	ldr	r3, [pc, #16]	; (80090fc <HAL_PCD_SuspendCallback+0x48>)
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	4a03      	ldr	r2, [pc, #12]	; (80090fc <HAL_PCD_SuspendCallback+0x48>)
 80090ee:	f043 0306 	orr.w	r3, r3, #6
 80090f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	e000ed00 	.word	0xe000ed00

08009100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	6812      	ldr	r2, [r2, #0]
 8009116:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800911a:	f023 0301 	bic.w	r3, r3, #1
 800911e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d007      	beq.n	8009138 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009128:	4b08      	ldr	r3, [pc, #32]	; (800914c <HAL_PCD_ResumeCallback+0x4c>)
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	4a07      	ldr	r2, [pc, #28]	; (800914c <HAL_PCD_ResumeCallback+0x4c>)
 800912e:	f023 0306 	bic.w	r3, r3, #6
 8009132:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009134:	f000 faf6 	bl	8009724 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fc6f 	bl	8007a22 <USBD_LL_Resume>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	e000ed00 	.word	0xe000ed00

08009150 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009162:	78fa      	ldrb	r2, [r7, #3]
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fcbb 	bl	8007ae2 <USBD_LL_IsoOUTIncomplete>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fc83 	bl	8007a96 <USBD_LL_IsoINIncomplete>
}
 8009190:	bf00      	nop
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fcc1 	bl	8007b2e <USBD_LL_DevConnected>
}
 80091ac:	bf00      	nop
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe fcbe 	bl	8007b44 <USBD_LL_DevDisconnected>
}
 80091c8:	bf00      	nop
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d13c      	bne.n	800925a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091e0:	4a20      	ldr	r2, [pc, #128]	; (8009264 <USBD_LL_Init+0x94>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a1e      	ldr	r2, [pc, #120]	; (8009264 <USBD_LL_Init+0x94>)
 80091ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091f0:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <USBD_LL_Init+0x94>)
 80091f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80091f8:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <USBD_LL_Init+0x94>)
 80091fa:	2206      	movs	r2, #6
 80091fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091fe:	4b19      	ldr	r3, [pc, #100]	; (8009264 <USBD_LL_Init+0x94>)
 8009200:	2202      	movs	r2, #2
 8009202:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009204:	4b17      	ldr	r3, [pc, #92]	; (8009264 <USBD_LL_Init+0x94>)
 8009206:	2202      	movs	r2, #2
 8009208:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800920a:	4b16      	ldr	r3, [pc, #88]	; (8009264 <USBD_LL_Init+0x94>)
 800920c:	2200      	movs	r2, #0
 800920e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009210:	4b14      	ldr	r3, [pc, #80]	; (8009264 <USBD_LL_Init+0x94>)
 8009212:	2200      	movs	r2, #0
 8009214:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009216:	4b13      	ldr	r3, [pc, #76]	; (8009264 <USBD_LL_Init+0x94>)
 8009218:	2200      	movs	r2, #0
 800921a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800921c:	4b11      	ldr	r3, [pc, #68]	; (8009264 <USBD_LL_Init+0x94>)
 800921e:	2200      	movs	r2, #0
 8009220:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009222:	4b10      	ldr	r3, [pc, #64]	; (8009264 <USBD_LL_Init+0x94>)
 8009224:	2200      	movs	r2, #0
 8009226:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009228:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <USBD_LL_Init+0x94>)
 800922a:	2200      	movs	r2, #0
 800922c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800922e:	480d      	ldr	r0, [pc, #52]	; (8009264 <USBD_LL_Init+0x94>)
 8009230:	f7f7 ff5e 	bl	80010f0 <HAL_PCD_Init>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800923a:	f7f7 fad1 	bl	80007e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800923e:	2180      	movs	r1, #128	; 0x80
 8009240:	4808      	ldr	r0, [pc, #32]	; (8009264 <USBD_LL_Init+0x94>)
 8009242:	f7f9 f8e0 	bl	8002406 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009246:	2240      	movs	r2, #64	; 0x40
 8009248:	2100      	movs	r1, #0
 800924a:	4806      	ldr	r0, [pc, #24]	; (8009264 <USBD_LL_Init+0x94>)
 800924c:	f7f9 f894 	bl	8002378 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009250:	2280      	movs	r2, #128	; 0x80
 8009252:	2101      	movs	r1, #1
 8009254:	4803      	ldr	r0, [pc, #12]	; (8009264 <USBD_LL_Init+0x94>)
 8009256:	f7f9 f88f 	bl	8002378 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3708      	adds	r7, #8
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000f40 	.word	0x20000f40

08009268 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800927e:	4618      	mov	r0, r3
 8009280:	f7f8 f85a 	bl	8001338 <HAL_PCD_Start>
 8009284:	4603      	mov	r3, r0
 8009286:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b03      	cmp	r3, #3
 800928c:	d816      	bhi.n	80092bc <USBD_LL_Start+0x54>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <USBD_LL_Start+0x2c>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092a5 	.word	0x080092a5
 8009298:	080092ab 	.word	0x080092ab
 800929c:	080092b1 	.word	0x080092b1
 80092a0:	080092b7 	.word	0x080092b7
    case HAL_OK :
      usb_status = USBD_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	73fb      	strb	r3, [r7, #15]
    break;
 80092a8:	e00b      	b.n	80092c2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80092aa:	2303      	movs	r3, #3
 80092ac:	73fb      	strb	r3, [r7, #15]
    break;
 80092ae:	e008      	b.n	80092c2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092b0:	2301      	movs	r3, #1
 80092b2:	73fb      	strb	r3, [r7, #15]
    break;
 80092b4:	e005      	b.n	80092c2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092b6:	2303      	movs	r3, #3
 80092b8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ba:	e002      	b.n	80092c2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80092bc:	2303      	movs	r3, #3
 80092be:	73fb      	strb	r3, [r7, #15]
    break;
 80092c0:	bf00      	nop
  }
  return usb_status;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	4608      	mov	r0, r1
 80092d6:	4611      	mov	r1, r2
 80092d8:	461a      	mov	r2, r3
 80092da:	4603      	mov	r3, r0
 80092dc:	70fb      	strb	r3, [r7, #3]
 80092de:	460b      	mov	r3, r1
 80092e0:	70bb      	strb	r3, [r7, #2]
 80092e2:	4613      	mov	r3, r2
 80092e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80092f4:	78bb      	ldrb	r3, [r7, #2]
 80092f6:	883a      	ldrh	r2, [r7, #0]
 80092f8:	78f9      	ldrb	r1, [r7, #3]
 80092fa:	f7f8 fd04 	bl	8001d06 <HAL_PCD_EP_Open>
 80092fe:	4603      	mov	r3, r0
 8009300:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009302:	7bbb      	ldrb	r3, [r7, #14]
 8009304:	2b03      	cmp	r3, #3
 8009306:	d817      	bhi.n	8009338 <USBD_LL_OpenEP+0x6c>
 8009308:	a201      	add	r2, pc, #4	; (adr r2, 8009310 <USBD_LL_OpenEP+0x44>)
 800930a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930e:	bf00      	nop
 8009310:	08009321 	.word	0x08009321
 8009314:	08009327 	.word	0x08009327
 8009318:	0800932d 	.word	0x0800932d
 800931c:	08009333 	.word	0x08009333
    case HAL_OK :
      usb_status = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
    break;
 8009324:	e00b      	b.n	800933e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009326:	2303      	movs	r3, #3
 8009328:	73fb      	strb	r3, [r7, #15]
    break;
 800932a:	e008      	b.n	800933e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800932c:	2301      	movs	r3, #1
 800932e:	73fb      	strb	r3, [r7, #15]
    break;
 8009330:	e005      	b.n	800933e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009332:	2303      	movs	r3, #3
 8009334:	73fb      	strb	r3, [r7, #15]
    break;
 8009336:	e002      	b.n	800933e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009338:	2303      	movs	r3, #3
 800933a:	73fb      	strb	r3, [r7, #15]
    break;
 800933c:	bf00      	nop
  }
  return usb_status;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	460b      	mov	r3, r1
 8009352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009358:	2300      	movs	r3, #0
 800935a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7f8 fd35 	bl	8001dd6 <HAL_PCD_EP_Close>
 800936c:	4603      	mov	r3, r0
 800936e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009370:	7bbb      	ldrb	r3, [r7, #14]
 8009372:	2b03      	cmp	r3, #3
 8009374:	d816      	bhi.n	80093a4 <USBD_LL_CloseEP+0x5c>
 8009376:	a201      	add	r2, pc, #4	; (adr r2, 800937c <USBD_LL_CloseEP+0x34>)
 8009378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800937c:	0800938d 	.word	0x0800938d
 8009380:	08009393 	.word	0x08009393
 8009384:	08009399 	.word	0x08009399
 8009388:	0800939f 	.word	0x0800939f
    case HAL_OK :
      usb_status = USBD_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
    break;
 8009390:	e00b      	b.n	80093aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009392:	2303      	movs	r3, #3
 8009394:	73fb      	strb	r3, [r7, #15]
    break;
 8009396:	e008      	b.n	80093aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009398:	2301      	movs	r3, #1
 800939a:	73fb      	strb	r3, [r7, #15]
    break;
 800939c:	e005      	b.n	80093aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	73fb      	strb	r3, [r7, #15]
    break;
 80093a2:	e002      	b.n	80093aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80093a4:	2303      	movs	r3, #3
 80093a6:	73fb      	strb	r3, [r7, #15]
    break;
 80093a8:	bf00      	nop
  }
  return usb_status;
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	4611      	mov	r1, r2
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7f8 fddc 	bl	8001f90 <HAL_PCD_EP_SetStall>
 80093d8:	4603      	mov	r3, r0
 80093da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d816      	bhi.n	8009410 <USBD_LL_StallEP+0x5c>
 80093e2:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <USBD_LL_StallEP+0x34>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	080093f9 	.word	0x080093f9
 80093ec:	080093ff 	.word	0x080093ff
 80093f0:	08009405 	.word	0x08009405
 80093f4:	0800940b 	.word	0x0800940b
    case HAL_OK :
      usb_status = USBD_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
    break;
 80093fc:	e00b      	b.n	8009416 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80093fe:	2303      	movs	r3, #3
 8009400:	73fb      	strb	r3, [r7, #15]
    break;
 8009402:	e008      	b.n	8009416 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009404:	2301      	movs	r3, #1
 8009406:	73fb      	strb	r3, [r7, #15]
    break;
 8009408:	e005      	b.n	8009416 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800940a:	2303      	movs	r3, #3
 800940c:	73fb      	strb	r3, [r7, #15]
    break;
 800940e:	e002      	b.n	8009416 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009410:	2303      	movs	r3, #3
 8009412:	73fb      	strb	r3, [r7, #15]
    break;
 8009414:	bf00      	nop
  }
  return usb_status;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	460b      	mov	r3, r1
 800942a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	4611      	mov	r1, r2
 800943e:	4618      	mov	r0, r3
 8009440:	f7f8 fe08 	bl	8002054 <HAL_PCD_EP_ClrStall>
 8009444:	4603      	mov	r3, r0
 8009446:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2b03      	cmp	r3, #3
 800944c:	d816      	bhi.n	800947c <USBD_LL_ClearStallEP+0x5c>
 800944e:	a201      	add	r2, pc, #4	; (adr r2, 8009454 <USBD_LL_ClearStallEP+0x34>)
 8009450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009454:	08009465 	.word	0x08009465
 8009458:	0800946b 	.word	0x0800946b
 800945c:	08009471 	.word	0x08009471
 8009460:	08009477 	.word	0x08009477
    case HAL_OK :
      usb_status = USBD_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
    break;
 8009468:	e00b      	b.n	8009482 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800946a:	2303      	movs	r3, #3
 800946c:	73fb      	strb	r3, [r7, #15]
    break;
 800946e:	e008      	b.n	8009482 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009470:	2301      	movs	r3, #1
 8009472:	73fb      	strb	r3, [r7, #15]
    break;
 8009474:	e005      	b.n	8009482 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009476:	2303      	movs	r3, #3
 8009478:	73fb      	strb	r3, [r7, #15]
    break;
 800947a:	e002      	b.n	8009482 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	73fb      	strb	r3, [r7, #15]
    break;
 8009480:	bf00      	nop
  }
  return usb_status;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800949e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80094a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	da0b      	bge.n	80094c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80094a8:	78fb      	ldrb	r3, [r7, #3]
 80094aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	4613      	mov	r3, r2
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	440b      	add	r3, r1
 80094ba:	333e      	adds	r3, #62	; 0x3e
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	e00b      	b.n	80094d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	4613      	mov	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80094d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	460b      	mov	r3, r1
 80094ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094fe:	78fa      	ldrb	r2, [r7, #3]
 8009500:	4611      	mov	r1, r2
 8009502:	4618      	mov	r0, r3
 8009504:	f7f8 fbda 	bl	8001cbc <HAL_PCD_SetAddress>
 8009508:	4603      	mov	r3, r0
 800950a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	2b03      	cmp	r3, #3
 8009510:	d816      	bhi.n	8009540 <USBD_LL_SetUSBAddress+0x5c>
 8009512:	a201      	add	r2, pc, #4	; (adr r2, 8009518 <USBD_LL_SetUSBAddress+0x34>)
 8009514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009518:	08009529 	.word	0x08009529
 800951c:	0800952f 	.word	0x0800952f
 8009520:	08009535 	.word	0x08009535
 8009524:	0800953b 	.word	0x0800953b
    case HAL_OK :
      usb_status = USBD_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	73fb      	strb	r3, [r7, #15]
    break;
 800952c:	e00b      	b.n	8009546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800952e:	2303      	movs	r3, #3
 8009530:	73fb      	strb	r3, [r7, #15]
    break;
 8009532:	e008      	b.n	8009546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009534:	2301      	movs	r3, #1
 8009536:	73fb      	strb	r3, [r7, #15]
    break;
 8009538:	e005      	b.n	8009546 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	73fb      	strb	r3, [r7, #15]
    break;
 800953e:	e002      	b.n	8009546 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009540:	2303      	movs	r3, #3
 8009542:	73fb      	strb	r3, [r7, #15]
    break;
 8009544:	bf00      	nop
  }
  return usb_status;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	607a      	str	r2, [r7, #4]
 800955a:	603b      	str	r3, [r7, #0]
 800955c:	460b      	mov	r3, r1
 800955e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800956e:	7af9      	ldrb	r1, [r7, #11]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	f7f8 fccf 	bl	8001f16 <HAL_PCD_EP_Transmit>
 8009578:	4603      	mov	r3, r0
 800957a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	2b03      	cmp	r3, #3
 8009580:	d816      	bhi.n	80095b0 <USBD_LL_Transmit+0x60>
 8009582:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <USBD_LL_Transmit+0x38>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	08009599 	.word	0x08009599
 800958c:	0800959f 	.word	0x0800959f
 8009590:	080095a5 	.word	0x080095a5
 8009594:	080095ab 	.word	0x080095ab
    case HAL_OK :
      usb_status = USBD_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	75fb      	strb	r3, [r7, #23]
    break;
 800959c:	e00b      	b.n	80095b6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800959e:	2303      	movs	r3, #3
 80095a0:	75fb      	strb	r3, [r7, #23]
    break;
 80095a2:	e008      	b.n	80095b6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095a4:	2301      	movs	r3, #1
 80095a6:	75fb      	strb	r3, [r7, #23]
    break;
 80095a8:	e005      	b.n	80095b6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095aa:	2303      	movs	r3, #3
 80095ac:	75fb      	strb	r3, [r7, #23]
    break;
 80095ae:	e002      	b.n	80095b6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80095b0:	2303      	movs	r3, #3
 80095b2:	75fb      	strb	r3, [r7, #23]
    break;
 80095b4:	bf00      	nop
  }
  return usb_status;
 80095b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	607a      	str	r2, [r7, #4]
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	460b      	mov	r3, r1
 80095ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d0:	2300      	movs	r3, #0
 80095d2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80095de:	7af9      	ldrb	r1, [r7, #11]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	f7f8 fc41 	bl	8001e6a <HAL_PCD_EP_Receive>
 80095e8:	4603      	mov	r3, r0
 80095ea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80095ec:	7dbb      	ldrb	r3, [r7, #22]
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d816      	bhi.n	8009620 <USBD_LL_PrepareReceive+0x60>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <USBD_LL_PrepareReceive+0x38>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	08009609 	.word	0x08009609
 80095fc:	0800960f 	.word	0x0800960f
 8009600:	08009615 	.word	0x08009615
 8009604:	0800961b 	.word	0x0800961b
    case HAL_OK :
      usb_status = USBD_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	75fb      	strb	r3, [r7, #23]
    break;
 800960c:	e00b      	b.n	8009626 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800960e:	2303      	movs	r3, #3
 8009610:	75fb      	strb	r3, [r7, #23]
    break;
 8009612:	e008      	b.n	8009626 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009614:	2301      	movs	r3, #1
 8009616:	75fb      	strb	r3, [r7, #23]
    break;
 8009618:	e005      	b.n	8009626 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800961a:	2303      	movs	r3, #3
 800961c:	75fb      	strb	r3, [r7, #23]
    break;
 800961e:	e002      	b.n	8009626 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009620:	2303      	movs	r3, #3
 8009622:	75fb      	strb	r3, [r7, #23]
    break;
 8009624:	bf00      	nop
  }
  return usb_status;
 8009626:	7dfb      	ldrb	r3, [r7, #23]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f7f8 fc4d 	bl	8001ee6 <HAL_PCD_EP_GetRxCount>
 800964c:	4603      	mov	r3, r0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <HAL_PCDEx_LPM_Callback+0x18>
 800966a:	2b01      	cmp	r3, #1
 800966c:	d01f      	beq.n	80096ae <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800966e:	e03b      	b.n	80096e8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a1b      	ldr	r3, [r3, #32]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009678:	f000 f854 	bl	8009724 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800967c:	4b1c      	ldr	r3, [pc, #112]	; (80096f0 <HAL_PCDEx_LPM_Callback+0x98>)
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	4a1b      	ldr	r2, [pc, #108]	; (80096f0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009682:	f023 0306 	bic.w	r3, r3, #6
 8009686:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6812      	ldr	r2, [r2, #0]
 8009696:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800969a:	f023 0301 	bic.w	r3, r3, #1
 800969e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe f9bb 	bl	8007a22 <USBD_LL_Resume>
    break;
 80096ac:	e01c      	b.n	80096e8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6812      	ldr	r2, [r2, #0]
 80096bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096c0:	f043 0301 	orr.w	r3, r3, #1
 80096c4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fe f992 	bl	80079f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d005      	beq.n	80096e6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <HAL_PCDEx_LPM_Callback+0x98>)
 80096e0:	f043 0306 	orr.w	r3, r3, #6
 80096e4:	6113      	str	r3, [r2, #16]
    break;
 80096e6:	bf00      	nop
}
 80096e8:	bf00      	nop
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	e000ed00 	.word	0xe000ed00

080096f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 80096fc:	4b03      	ldr	r3, [pc, #12]	; (800970c <USBD_static_malloc+0x18>)
}
 80096fe:	4618      	mov	r0, r3
 8009700:	370c      	adds	r7, #12
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	2000144c 	.word	0x2000144c

08009710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009728:	f7f6 fee7 	bl	80004fa <SystemClock_Config>
}
 800972c:	bf00      	nop
 800972e:	bd80      	pop	{r7, pc}

08009730 <__libc_init_array>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	4d0d      	ldr	r5, [pc, #52]	; (8009768 <__libc_init_array+0x38>)
 8009734:	4c0d      	ldr	r4, [pc, #52]	; (800976c <__libc_init_array+0x3c>)
 8009736:	1b64      	subs	r4, r4, r5
 8009738:	10a4      	asrs	r4, r4, #2
 800973a:	2600      	movs	r6, #0
 800973c:	42a6      	cmp	r6, r4
 800973e:	d109      	bne.n	8009754 <__libc_init_array+0x24>
 8009740:	4d0b      	ldr	r5, [pc, #44]	; (8009770 <__libc_init_array+0x40>)
 8009742:	4c0c      	ldr	r4, [pc, #48]	; (8009774 <__libc_init_array+0x44>)
 8009744:	f000 f820 	bl	8009788 <_init>
 8009748:	1b64      	subs	r4, r4, r5
 800974a:	10a4      	asrs	r4, r4, #2
 800974c:	2600      	movs	r6, #0
 800974e:	42a6      	cmp	r6, r4
 8009750:	d105      	bne.n	800975e <__libc_init_array+0x2e>
 8009752:	bd70      	pop	{r4, r5, r6, pc}
 8009754:	f855 3b04 	ldr.w	r3, [r5], #4
 8009758:	4798      	blx	r3
 800975a:	3601      	adds	r6, #1
 800975c:	e7ee      	b.n	800973c <__libc_init_array+0xc>
 800975e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009762:	4798      	blx	r3
 8009764:	3601      	adds	r6, #1
 8009766:	e7f2      	b.n	800974e <__libc_init_array+0x1e>
 8009768:	08009828 	.word	0x08009828
 800976c:	08009828 	.word	0x08009828
 8009770:	08009828 	.word	0x08009828
 8009774:	0800982c 	.word	0x0800982c

08009778 <memset>:
 8009778:	4402      	add	r2, r0
 800977a:	4603      	mov	r3, r0
 800977c:	4293      	cmp	r3, r2
 800977e:	d100      	bne.n	8009782 <memset+0xa>
 8009780:	4770      	bx	lr
 8009782:	f803 1b01 	strb.w	r1, [r3], #1
 8009786:	e7f9      	b.n	800977c <memset+0x4>

08009788 <_init>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr

08009794 <_fini>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr
